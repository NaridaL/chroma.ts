{"version":3,"file":"index.module.js","sources":["../src/index.ts"],"sourcesContent":["/**\r\n * @license\r\n *\r\n * chroma.js - JavaScript library for color conversions\r\n *\r\n * Copyright (c) 2011-2017, Gregor Aisch\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice, this\r\n *    list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. The name Gregor Aisch may not be used to endorse or promote products\r\n *    derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\r\n * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\r\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\r\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nconst { abs, atan2, cos, floor, log, min, max, round, sin, sqrt, cbrt, PI, hypot } = Math\r\n\r\nfunction lerp(a: number, b: number, f: number) {\r\n\treturn a + (b - a) * f\r\n}\r\nfunction lerpInv(a: number, b: number, f: number) {\r\n\treturn (f - a) / (b - a)\r\n}\r\nfunction clamp(x: number, min = 0, max = 1) {\r\n\treturn x < min ? min : x > max ? max : x\r\n}\r\n\r\nfunction newtonIterate1d(f: (x: number) => number, xStart: number, max_steps: number, eps: number = 1e-8): number {\r\n\tlet x = xStart,\r\n\t\tfx\r\n\twhile (max_steps-- && abs((fx = f(x))) > eps) {\r\n\t\tconst dfdx = (f(x + eps) - fx) / eps\r\n\t\tconsole.log(\"fx / dfdx\", fx / dfdx, \"fx\", fx, \"x\", x)\r\n\t\tx = x - fx / dfdx\r\n\t}\r\n\treturn x\r\n}\r\n// function bisect(f: (x: number) => number, a: number, b: number, steps: number) {\r\n// \t//assert(a < b)\r\n// \tlet fA = f(a),\r\n// \t\tfB = f(b)\r\n// \t//assert(fA * fB < 0)\r\n// \twhile (steps--) {\r\n// \t\tconst c = (a + b) / 2\r\n// \t\tconst fC = f(c)\r\n// \t\tconsole.log(\"fC\", fC, \"c\", c)\r\n// \t\tif (sign(fA) == sign(fC)) {\r\n// \t\t\ta = c\r\n// \t\t\tfA = fC\r\n// \t\t} else {\r\n// \t\t\tb = c\r\n// \t\t\tfB = fC\r\n// \t\t}\r\n// \t}\r\n// \t//assert(a <= (b + a) / 2)\r\n// \t//assert(b >= (b + a) / 2)\r\n// \treturn (a + b) / 2\r\n// }\r\n\r\nconst TWOPI = 2 * PI\r\n\r\nconst DEG2RAD = PI / 180\r\n\r\nconst RAD2DEG = 180 / PI\r\n/**\r\n * @param alpha1 default=1\r\n * @example chroma(99, 99, 44, 0.7)\r\n */\r\nfunction chroma(red255: number, green255: number, blue255: number, alpha1?: number): chroma.Color\r\n/**\r\n * @example chroma('mediumorchid') // a css string\r\n * @example chroma([56, 203, 30]) // a RGB triple\r\n * @example chroma(0x4b0082) // a hex num\r\n * @example chroma([30, 0.8, 0.3], 'hsl') // explicit format\r\n */\r\nfunction chroma(x: chroma.Chromable, format?: ColorFormat): chroma.Color\r\n/** @example chroma(30, 0.8, 0.3, 'hsl') */\r\nfunction chroma(channel0: number, channel1: chroma.Color, channel2: number, format: ColorFormat): chroma.Color\r\n/** @example chroma(0.3, 0.8, 0.3, 1, 'gl') */\r\nfunction chroma(\r\n\tchannel0: number,\r\n\tchannel1: chroma.Color,\r\n\tchannel2: number,\r\n\tchannel3: number,\r\n\tformat: ColorFormat,\r\n): chroma.Color\r\nfunction chroma(...args: any[]) {\r\n\tif (args[0] instanceof chroma.Color) {\r\n\t\treturn args[0]\r\n\t}\r\n\tif (args.length > 1 && \"string\" == typeof args[args.length - 1]) {\r\n\t\treturn guess(args.slice(0, args.length - 1), args[args.length - 1])\r\n\t} else if (Array.isArray(args[0])) {\r\n\t\treturn guess(args[0])\r\n\t} else {\r\n\t\treturn guess(args)\r\n\t}\r\n}\r\nexport default chroma\r\nexport { chroma }\r\nnamespace chroma {\r\n\t/**\r\n\t * A Chromable is any value which can be converted to a color. For ease of use, most functions accept these instead of\r\n\t * only Color values.\r\n\t */\r\n\texport type Chromable = number | string | Color | number[]\r\n\r\n\texport class Color {\r\n\t\t/** @internal */\r\n\t\tconstructor(\r\n\t\t\tprivate readonly r: number,\r\n\t\t\tprivate readonly g: number,\r\n\t\t\tprivate readonly b: number,\r\n\t\t\tprivate readonly a = 1,\r\n\t\t) {}\r\n\r\n\t\t// public shade() {\r\n\t\t// \tconst shades: [string, string, number][] = [\r\n\t\t// \t\t[\"ff0000\", \"red\"],\r\n\t\t// \t\t[\"ffa500\", \"orange\"],\r\n\t\t// \t\t[\"ffff00\", \"yellow\"],\r\n\t\t// \t\t[\"008000\", \"green\"],\r\n\t\t// \t\t[\"0000ff\", \"blue\"],\r\n\t\t// \t\t[\"ee82ee\", \"violet\"],\r\n\t\t// \t\t[\"a52a2a\", \"brown\"],\r\n\t\t// \t\t[\"000000\", \"black\"],\r\n\t\t// \t\t[\"808080\", \"grey\"],\r\n\t\t// \t\t[\"ffffff\", \"white\"],\r\n\t\t// \t] as any\r\n\t\t// \tfunction angleDiff(a: number, b: number) {\r\n\t\t// \t\tconst d = (a - b) % 360\r\n\t\t// \t\tif (d > 180) return d - 360\r\n\t\t// \t\tif (d < -180) return d + 360\r\n\t\t// \t\treturn d\r\n\t\t// \t}\r\n\t\t// \tshades.forEach(arr => arr.push(chroma(arr[0]).hsl()[0]))\r\n\t\t// \tconst [h, s, l] = this.hsl()\r\n\t\t// \tif (l > 0.9) return \"white\"\r\n\t\t// \tif (l > 0.8 && s < 0.2) return \"white\"\r\n\t\t// \tif (s < 0.1) return \"grey\"\r\n\t\t// \tif (s < 0.4 && h > 0 && h < 48) return \"brown\"\r\n\r\n\t\t// \tconst distanceInXYZ: { [hue: number]: number } = { 0: 0 }\r\n\t\t// \tfor (let i = 60; i <= 360; i += 60) {\r\n\t\t// \t\tdistanceInXYZ[i] =\r\n\t\t// \t\t\tdistanceInXYZ[i - 60] + chroma.distance(chroma.hsl(i - 60, 1, 0.5), chroma.hsl(i, 1, 0.5), \"xyz\")\r\n\t\t// \t}\r\n\t\t// \t// console.log(distanceInXYZ)\r\n\r\n\t\t// \tconst shadeEnds: { [hue: number]: number } = {\r\n\t\t// \t\t0: 9,\r\n\t\t// \t\t38: 48,\r\n\t\t// \t\t60: 65,\r\n\t\t// \t\t120: 165,\r\n\t\t// \t\t240: 245,\r\n\t\t// \t\t300: 338,\r\n\t\t// \t\t360: 369,\r\n\t\t// \t}\r\n\r\n\t\t// \tconst getColorDistanceAlongXYZHue = (hueDegrees: number) => {\r\n\t\t// \t\tconst base = hueDegrees - (hueDegrees % 60)\r\n\t\t// \t\treturn (\r\n\t\t// \t\t\tdistanceInXYZ[base] + chroma.distance(chroma.hsl(base, 1, 0.5), chroma.hsl(hueDegrees, 1, 0.5), \"xyz\")\r\n\t\t// \t\t)\r\n\t\t// \t}\r\n\t\t// \tconst colorXYZD = getColorDistanceAlongXYZHue(this.hsl()[0])\r\n\t\t// \tconst md = distanceInXYZ[360]\r\n\t\t// \tconst shadeHue =\r\n\t\t// \t\t(Object.keys(shadeEnds) as any[]).find(shadeHue => shadeEnds[shadeHue | 0] >= this.hsl()[0])! % 360\r\n\t\t// \treturn shades.find(([_hex, _name, _hue]) => (_hue | 0) === shadeHue)![1]\r\n\t\t// \t// process.exit()\r\n\t\t// \treturn withMax(shades, ([_hex, _name, _hue]) => {\r\n\t\t// \t\treturn -abs(angleDiff(this.hsl()[0], _hue))\r\n\t\t// \t})[1]\r\n\t\t// \treturn withMax(shades, ([_hex, _name, _hue]) => {\r\n\t\t// \t\tconst [thisL, thisA, thisB] = this.lab()\r\n\t\t// \t\tconst [L, A, B] = chroma(_hex).lab()\r\n\t\t// \t\treturn -hypot(thisL - L, thisA - A, thisB - B)\r\n\t\t// \t})[1]\r\n\t\t// }\r\n\r\n\t\t/**\r\n\t\t * @see [[chroma.mix]]\r\n\t\t */\r\n\t\tpublic mix(col2: Chromable, f: number, m: InterpolationMode = \"rgb\") {\r\n\t\t\treturn chroma.mix(this, col2, f, m)\r\n\t\t}\r\n\t\tpublic rgb(doRound = true, clamp_ = true): RGB {\r\n\t\t\tconst f = (t: number) => {\r\n\t\t\t\tif (doRound) t = round(t)\r\n\t\t\t\tif (clamp_) t = clamp(t, 0, 255)\r\n\t\t\t\treturn t\r\n\t\t\t}\r\n\t\t\tconst { r, g, b } = this\r\n\t\t\treturn [f(r), f(g), f(b)]\r\n\t\t}\r\n\t\tpublic rgba(doRound = true, clamp_ = true): RGBA {\r\n\t\t\tconst f = (t: number) => {\r\n\t\t\t\tif (doRound) t = round(t)\r\n\t\t\t\tif (clamp_) t = clamp(t, 0, 255)\r\n\t\t\t\treturn t\r\n\t\t\t}\r\n\t\t\tconst { r, g, b, a } = this\r\n\t\t\treturn [f(r), f(g), f(b), a]\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Return a hex-string representation of this color.\r\n\t\t *\r\n\t\t * @param mode\r\n\t\t * @see #num for a hex-number representation.\r\n\t\t * @example chroma('yellow').alpha(0.7).hex()\r\n\t\t * @example chroma('yellow').alpha(0.7).hex('rgba')\r\n\t\t * @example chroma('yellow').alpha(0.7).hex('argb')\r\n\t\t */\r\n\t\tpublic hex(mode: \"rgb\" | \"rgba\" | \"argb\" = \"rgb\") {\r\n\t\t\tconst { r, g, b, a } = this\r\n\t\t\treturn rgb2hex(r, g, b, a, mode)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.\r\n\t\t *\r\n\t\t * @example chroma('purple').hsl()\r\n\t\t */\r\n\t\tpublic hsl(): HSL {\r\n\t\t\tconst { r, g, b } = this\r\n\t\t\treturn rgb2hsl(r, g, b)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.\r\n\t\t *\r\n\t\t * @example chroma('purple').hsv()\r\n\t\t */\r\n\t\tpublic hsv() {\r\n\t\t\tconst { r, g, b } = this\r\n\t\t\treturn rgb2hsv(r, g, b)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.\r\n\t\t *\r\n\t\t * @example chroma('purple').hcg()\r\n\t\t */\r\n\t\tpublic hcg() {\r\n\t\t\tconst { r, g, b } = this\r\n\t\t\treturn rgb2hcg(r, g, b)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a CSS `rgb(...)` or `hsl(...)` string representation that can be used as CSS-color definition. The alpha\r\n\t\t * value is not output if it 1.\r\n\t\t * @example chroma('teal').css() // == \"rgb(0,128,128)\"\r\n\t\t * @example chroma('teal').alpha(0.5).css() // == \"rgba(0,128,128,0.5)\"\r\n\t\t * @example chroma('teal').css('hsl') // == \"hsl(180,100%,25.1%)\"\r\n\t\t */\r\n\t\tpublic css(mode: \"rgb\" | \"hsl\" = \"rgb\") {\r\n\t\t\tif (\"rgb\" == mode) {\r\n\t\t\t\tconst { r, g, b, a } = this\r\n\t\t\t\treturn rgb2css(r, g, b, a)\r\n\t\t\t} else if (\"hsl\" == mode) {\r\n\t\t\t\treturn hsl2css(this.hsl(), this.alpha())\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error()\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic name(closest: true): string\r\n\t\t/**\r\n\t\t * Get the name of a color. By default, this method will try to match the color exactly (comparing rounded RGB\r\n\t\t * values). Pass `true` to return the name of the color which is closest to `this` in CIELAB color space. CIELAB is\r\n\t\t * used as it is perceptually uniform.\r\n\t\t * @param closest Whether this should find the closest color name. default=false\r\n\t\t * @return If `closest == false`, the name of this color or `undefined` if there is no match. Otherwise, will always\r\n\t\t * return a color name.\r\n\t\t * @example chroma('#ff0000').name() // == \"red\"\r\n\t\t * @example chroma('#ff0001').name() // == undefined\r\n\t\t * @example chroma('#ff0001').name(true) // == \"red\"\r\n\t\t */\r\n\t\tpublic name(closest?: boolean): string | undefined\r\n\t\tpublic name(closest: boolean = false): string | undefined {\r\n\t\t\tconst num = this.num()\r\n\t\t\tconst name = Object.keys(chroma.w3cx11).find(name => (chroma.w3cx11 as any)[name] == num)\r\n\t\t\tif (!name && closest) {\r\n\t\t\t\tconst [thisLStar, thisAStar, thisBStar] = this.lab()\r\n\t\t\t\treturn withMax(Object.keys(chroma.w3cx11) as (keyof typeof chroma.w3cx11)[], name => {\r\n\t\t\t\t\tconst [lStar, aStar, bStar] = chroma.num(chroma.w3cx11[name]).lab()\r\n\t\t\t\t\treturn -hypot(thisLStar - lStar, thisAStar - aStar, thisBStar - bStar)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\treturn name\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the [CMYK](#chroma.CMYK) representation of this color.\r\n\t\t *\r\n\t\t * @example chroma('red').cmyk()\r\n\t\t */\r\n\t\tpublic cmyk() {\r\n\t\t\tconst { r, g, b } = this\r\n\t\t\treturn rgb2cmyk(r, g, b)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the [GL] representation of this color.\r\n\t\t * @example chroma('33cc00').gl()\r\n\t\t */\r\n\t\tpublic gl(): GL {\r\n\t\t\tconst { r, g, b, a } = this\r\n\t\t\treturn [r / 255, g / 255, b / 255, a]\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get luminance of the color. This is equal to the Y channel of the XYZ color space.\r\n\t\t * @example chroma('black').luminance() // == 0\r\n\t\t * @example chroma('white').luminance() // == 1\r\n\t\t * @example chroma('red').luminance() // == ~0.21\r\n\t\t * @see https://en.wikipedia.org/wiki/Relative_luminance\r\n\t\t */\r\n\t\tpublic luminance(): number\r\n\t\t/**\r\n\t\t * Return a new [Color] with `lum1` by linearly interpolating `this` with white (when increasing the luminance) or\r\n\t\t * black (otherwise) in the [XYZ] color space.\r\n\t\t * @see https://en.wikipedia.org/wiki/Relative_luminance\r\n\t\t * @example // Approximately doubling the luminance of red\r\n\t\t * @example chroma('red').luminance(0.4) // == #ff8686 // \"Vivid Tangerine\"\r\n\t\t * @param lum1 The desired luminance.\r\n\t\t */\r\n\t\tpublic luminance(lum1: number): this\r\n\t\tpublic luminance(lum1?: number) {\r\n\t\t\tconst { r, g, b, a } = this\r\n\t\t\tconst [, Y] = rgb2xyz(r, g, b)\r\n\t\t\tif (undefined === lum1) {\r\n\t\t\t\treturn Y\r\n\t\t\t}\r\n\t\t\tconst inverseLerp = (a: number, b: number, val: number) => (val - a) / (b - a)\r\n\t\t\tif (lum1 > Y) {\r\n\t\t\t\t// lerp to white\r\n\t\t\t\treturn chroma.mix(this, chroma(\"white\"), inverseLerp(Y, 1, lum1), \"xyz\").alpha(a)\r\n\t\t\t} else {\r\n\t\t\t\t// lerp to black\r\n\t\t\t\treturn chroma.mix(chroma(\"black\"), this, inverseLerp(0, Y, lum1), \"xyz\").alpha(a)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get color temperature of this color in Kelvin. This only makes sense for colors close to those output by\r\n\t\t * chroma.kelvin\r\n\t\t *\r\n\t\t * @example [c = chroma('#ff3300'), c.temperature()]\r\n\t\t * @example [c = chroma('#ffe3cd'), c.temperature()]\r\n\t\t * @example [c = chroma('#b3ccff'), c.temperature()]\r\n\t\t */\r\n\t\tpublic temperature() {\r\n\t\t\tconst { r, g, b } = this\r\n\t\t\treturn rgb2kelvin(r, g, b)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a new [Color] with a channel changed.\r\n\t\t * @example chroma('skyblue').set('hsl.h', 0) // change hue to 0 deg (=red)\r\n\t\t * @example chroma('hotpink').set('lch.c', 30) // set chromaticity to 30\r\n\t\t * @example chroma('orangered').set('lab.l', x => x / 2) // half Lab lightness\r\n\t\t * @example chroma('darkseagreen').set('lch.c', x => x * 2) // double Lch saturation\r\n\t\t */\r\n\t\tpublic set(modeAndChannel: string, value: number | ((channel: number) => number)) {\r\n\t\t\tconst [mode, channel] = modeAndChannel.split(\".\") as [ColorMode, string]\r\n\t\t\tconst src = this[mode]()\r\n\t\t\tconst i = mode.indexOf(channel)\r\n\t\t\tif (-1 == i) throw new Error(\"invalid channel\")\r\n\t\t\tsrc[i] = \"number\" == typeof value ? value : value(src[i])\r\n\t\t\treturn chroma(src, mode).alpha(this.a)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns whether this color is outside the RGB color cube and will be clipped/clamped when calling .rgb()\r\n\t\t *\r\n\t\t * @example [c = chroma.lch( 20, 40, 50), c.clipped()]\r\n\t\t * @example [c = chroma.lch( 40, 40, 50), c.clipped()]\r\n\t\t * @example [c = chroma.lch( 60, 40, 50), c.clipped()]\r\n\t\t * @example [c = chroma.lch( 80, 40, 50), c.clipped()]\r\n\t\t * @example [c = chroma.lch(100, 40, 50), c.clipped()]\r\n\t\t */\r\n\t\tpublic clipped() {\r\n\t\t\tconst { r, g, b } = this\r\n\t\t\treturn !(0 <= r && r <= 255 && (0 <= g && g <= 255) && (0 <= b && b <= 255))\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns black or white, whichever has the highest contrast to `this`.\r\n\t\t * In the readme you should see the result of this.\r\n\t\t *\r\n\t\t * @example chroma('red')\r\n\t\t * @example chroma('yellow')\r\n\t\t */\r\n\t\tpublic textColor() {\r\n\t\t\treturn this.luminance() > 0.5 ? chroma.black : chroma.white\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get alpha value of color.\r\n\t\t * @example chroma.rgb(0, 0, 255, 0.5).alpha() // == 0.5\r\n\t\t */\r\n\t\tpublic alpha(): number\r\n\t\t/**\r\n\t\t * Return new [Color] with given alpha value.\r\n\t\t * @example chroma('green').alpha(0.3)\r\n\t\t * @example chroma('green').alpha(0.3).hex('rgba') // == \"#00ff004d\"\r\n\t\t * @param alpha1 The desired alpha value.\r\n\t\t */\r\n\t\tpublic alpha(alpha1: number): Color\r\n\t\tpublic alpha(alpha1?: number): number | Color {\r\n\t\t\tif (undefined === alpha1) {\r\n\t\t\t\treturn this.a\r\n\t\t\t}\r\n\t\t\tconst { r, g, b } = this\r\n\t\t\treturn chroma.rgb(r, g, b, alpha1)\r\n\t\t}\r\n\r\n\t\tpublic darker(amount = 1) {\r\n\t\t\tconst [l, a, b] = this.lab()\r\n\t\t\treturn chroma.lab(l - LAB_Kn * amount, a, b, this.alpha())\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t *\r\n\t\t * @param amount\r\n\t\t * @example chroma('hotpink')\r\n\t\t * @example chroma('hotpink').brighter()\r\n\t\t * @example chroma('hotpink').brighter(2)\r\n\t\t * @example chroma('hotpink').brighter(3)\r\n\t\t */\r\n\t\tpublic brighter(amount = 1) {\r\n\t\t\treturn this.darker(-amount)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a new [Color] with increased saturation.\r\n\t\t * @param amount How much.\r\n\t\t * @example chroma('slategray')\r\n\t\t * @example chroma('slategray').saturate()\r\n\t\t * @example chroma('slategray').saturate(2)\r\n\t\t * @example chroma('slategray').saturate(3)\r\n\t\t */\r\n\t\tpublic saturate(amount = 1) {\r\n\t\t\tconst [l, c, h] = this.lch()\r\n\t\t\treturn chroma.lch(l, max(0, c + amount * LAB_Kn), h, this.alpha())\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Equivalent to `saturate(-amount)`.\r\n\t\t * @see #saturate\r\n\t\t */\r\n\t\tpublic desaturate(amount = 1) {\r\n\t\t\treturn this.saturate(-amount)\r\n\t\t}\r\n\r\n\t\tpublic premultiplied() {\r\n\t\t\tconst { r, g, b, a } = this\r\n\t\t\treturn chroma.rgb(r * a, g * a, b * a, a)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the [HSI] representation of this color. hue will always be in [0; 360). Values are never NaN.\r\n\t\t *\r\n\t\t * @example chroma('purple').hsi()\r\n\t\t */\r\n\t\tpublic hsi() {\r\n\t\t\tconst { r, g, b } = this\r\n\t\t\treturn rgb2hsi(r, g, b)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the [LAB] representation of this color.\r\n\t\t *\r\n\t\t * @example chroma('purple').lab()\r\n\t\t */\r\n\t\tpublic lab() {\r\n\t\t\tconst { r, g, b } = this\r\n\t\t\treturn rgb2lab(r, g, b)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Return a hex-num of this color.\r\n\t\t *\r\n\t\t * @param mode\r\n\t\t * @see #num for a hex-number representation.\r\n\t\t * @example chroma('yellow').alpha(0.7).hex()\r\n\t\t * @example chroma('yellow').alpha(0.7).hex('rgba')\r\n\t\t * @example chroma('yellow').alpha(0.7).hex('argb')\r\n\t\t */\r\n\t\tpublic num(mode: \"rgb\" | \"rgba\" | \"argb\" = \"rgb\") {\r\n\t\t\tconst { r, g, b, a } = this\r\n\t\t\treturn rgb2num(r, g, b, a, mode)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the [LCH] representation of this color. hue will always be in [0; 360). Values are never NaN.\r\n\t\t *\r\n\t\t * @example chroma('purple').lch()\r\n\t\t */\r\n\t\tpublic lch() {\r\n\t\t\tconst { r, g, b } = this\r\n\t\t\treturn rgb2lch(r, g, b)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns the [XYZ] representation of this color. hue will always be in [0; 360). Values are never NaN.\r\n\t\t *\r\n\t\t * @example chroma('purple').xyz()\r\n\t\t */\r\n\t\tpublic xyz() {\r\n\t\t\tconst { r, g, b } = this\r\n\t\t\treturn rgb2xyz(r, g, b)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Whether this [Color](#chroma.Color) is identical (strict equality of r, g, b, a) to `color`.\r\n\t\t */\r\n\t\tpublic equals(color: Color) {\r\n\t\t\tconst { r, g, b, a } = this\r\n\t\t\tconst { r: r2, g: g2, b: b2, a: a2 } = color\r\n\t\t\treturn r == r2 && g == g2 && b == b2 && a == a2\r\n\t\t}\r\n\r\n\t\tpublic hashCode() {\r\n\t\t\treturn this.num(\"rgba\")\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @example chroma('red').toSource() // == \"chroma.rgb(255, 0, 0)\"\r\n\t\t * @example chroma.rgb(-2, 100.02, 200, 0.5).toSource() // == \"chroma.rgb(-2, 100.02, 200, 0.5)\"\r\n\t\t */\r\n\t\tpublic toSource() {\r\n\t\t\tconst { r, g, b, a } = this\r\n\t\t\treturn \"chroma.rgb(\" + r + \", \" + g + \", \" + b + (a === 1 ? \")\" : \", \" + a + \")\")\r\n\t\t}\r\n\t}\r\n\texport interface Color {\r\n\t\ttoString(): string\r\n\t\t//darker(amount: number): Color\r\n\t\t//brighter(amount: number): Color\r\n\t\tkelvin(): number\r\n\t}\r\n\tColor.prototype.toString = Color.prototype.css\r\n\tColor.prototype.kelvin = Color.prototype.temperature\r\n\t/**\r\n\t * @example chroma.black\r\n\t */\r\n\texport const black = new Color(0, 0, 0, 1)\r\n\r\n\t/**\r\n\t * @example chroma.black\r\n\t */\r\n\texport const white = new Color(255, 255, 255, 1)\r\n\r\n\texport const brewer = {\r\n\t\tOrRd: [0xfff7ec, 0xfee8c8, 0xfdd49e, 0xfdbb84, 0xfc8d59, 0xef6548, 0xd7301f, 0xb30000, 0x7f0000],\r\n\t\tPuBu: [0xfff7fb, 0xece7f2, 0xd0d1e6, 0xa6bddb, 0x74a9cf, 0x3690c0, 0x0570b0, 0x045a8d, 0x023858],\r\n\t\tBuPu: [0xf7fcfd, 0xe0ecf4, 0xbfd3e6, 0x9ebcda, 0x8c96c6, 0x8c6bb1, 0x88419d, 0x810f7c, 0x4d004b],\r\n\t\tOranges: [0xfff5eb, 0xfee6ce, 0xfdd0a2, 0xfdae6b, 0xfd8d3c, 0xf16913, 0xd94801, 0xa63603, 0x7f2704],\r\n\t\tBuGn: [0xf7fcfd, 0xe5f5f9, 0xccece6, 0x99d8c9, 0x66c2a4, 0x41ae76, 0x238b45, 0x006d2c, 0x00441b],\r\n\t\tYlOrBr: [0xffffe5, 0xfff7bc, 0xfee391, 0xfec44f, 0xfe9929, 0xec7014, 0xcc4c02, 0x993404, 0x662506],\r\n\t\tYlGn: [0xffffe5, 0xf7fcb9, 0xd9f0a3, 0xaddd8e, 0x78c679, 0x41ab5d, 0x238443, 0x006837, 0x004529],\r\n\t\tReds: [0xfff5f0, 0xfee0d2, 0xfcbba1, 0xfc9272, 0xfb6a4a, 0xef3b2c, 0xcb181d, 0xa50f15, 0x67000d],\r\n\t\tRdPu: [0xfff7f3, 0xfde0dd, 0xfcc5c0, 0xfa9fb5, 0xf768a1, 0xdd3497, 0xae017e, 0x7a0177, 0x49006a],\r\n\t\tGreens: [0xf7fcf5, 0xe5f5e0, 0xc7e9c0, 0xa1d99b, 0x74c476, 0x41ab5d, 0x238b45, 0x006d2c, 0x00441b],\r\n\t\tYlGnBu: [0xffffd9, 0xedf8b1, 0xc7e9b4, 0x7fcdbb, 0x41b6c4, 0x1d91c0, 0x225ea8, 0x253494, 0x081d58],\r\n\t\tPurples: [0xfcfbfd, 0xefedf5, 0xdadaeb, 0xbcbddc, 0x9e9ac8, 0x807dba, 0x6a51a3, 0x54278f, 0x3f007d],\r\n\t\tGnBu: [0xf7fcf0, 0xe0f3db, 0xccebc5, 0xa8ddb5, 0x7bccc4, 0x4eb3d3, 0x2b8cbe, 0x0868ac, 0x084081],\r\n\t\tGreys: [0xffffff, 0xf0f0f0, 0xd9d9d9, 0xbdbdbd, 0x969696, 0x737373, 0x525252, 0x252525, 0x000000],\r\n\t\tYlOrRd: [0xffffcc, 0xffeda0, 0xfed976, 0xfeb24c, 0xfd8d3c, 0xfc4e2a, 0xe31a1c, 0xbd0026, 0x800026],\r\n\t\tPuRd: [0xf7f4f9, 0xe7e1ef, 0xd4b9da, 0xc994c7, 0xdf65b0, 0xe7298a, 0xce1256, 0x980043, 0x67001f],\r\n\t\tBlues: [0xf7fbff, 0xdeebf7, 0xc6dbef, 0x9ecae1, 0x6baed6, 0x4292c6, 0x2171b5, 0x08519c, 0x08306b],\r\n\t\tPuBuGn: [0xfff7fb, 0xece2f0, 0xd0d1e6, 0xa6bddb, 0x67a9cf, 0x3690c0, 0x02818a, 0x016c59, 0x014636],\r\n\t\tViridis: [0x440154, 0x482777, 0x3f4a8a, 0x31678e, 0x26838f, 0x1f9d8a, 0x6cce5a, 0xb6de2b, 0xfee825],\r\n\t\tSpectral: [\r\n\t\t\t0x9e0142,\r\n\t\t\t0xd53e4f,\r\n\t\t\t0xf46d43,\r\n\t\t\t0xfdae61,\r\n\t\t\t0xfee08b,\r\n\t\t\t0xffffbf,\r\n\t\t\t0xe6f598,\r\n\t\t\t0xabdda4,\r\n\t\t\t0x66c2a5,\r\n\t\t\t0x3288bd,\r\n\t\t\t0x5e4fa2,\r\n\t\t],\r\n\t\tRdYlGn: [\r\n\t\t\t0xa50026,\r\n\t\t\t0xd73027,\r\n\t\t\t0xf46d43,\r\n\t\t\t0xfdae61,\r\n\t\t\t0xfee08b,\r\n\t\t\t0xffffbf,\r\n\t\t\t0xd9ef8b,\r\n\t\t\t0xa6d96a,\r\n\t\t\t0x66bd63,\r\n\t\t\t0x1a9850,\r\n\t\t\t0x006837,\r\n\t\t],\r\n\t\tRdBu: [\r\n\t\t\t0x67001f,\r\n\t\t\t0xb2182b,\r\n\t\t\t0xd6604d,\r\n\t\t\t0xf4a582,\r\n\t\t\t0xfddbc7,\r\n\t\t\t0xf7f7f7,\r\n\t\t\t0xd1e5f0,\r\n\t\t\t0x92c5de,\r\n\t\t\t0x4393c3,\r\n\t\t\t0x2166ac,\r\n\t\t\t0x053061,\r\n\t\t],\r\n\t\tPiYG: [\r\n\t\t\t0x8e0152,\r\n\t\t\t0xc51b7d,\r\n\t\t\t0xde77ae,\r\n\t\t\t0xf1b6da,\r\n\t\t\t0xfde0ef,\r\n\t\t\t0xf7f7f7,\r\n\t\t\t0xe6f5d0,\r\n\t\t\t0xb8e186,\r\n\t\t\t0x7fbc41,\r\n\t\t\t0x4d9221,\r\n\t\t\t0x276419,\r\n\t\t],\r\n\t\tPRGn: [\r\n\t\t\t0x40004b,\r\n\t\t\t0x762a83,\r\n\t\t\t0x9970ab,\r\n\t\t\t0xc2a5cf,\r\n\t\t\t0xe7d4e8,\r\n\t\t\t0xf7f7f7,\r\n\t\t\t0xd9f0d3,\r\n\t\t\t0xa6dba0,\r\n\t\t\t0x5aae61,\r\n\t\t\t0x1b7837,\r\n\t\t\t0x00441b,\r\n\t\t],\r\n\t\tRdYlBu: [\r\n\t\t\t0xa50026,\r\n\t\t\t0xd73027,\r\n\t\t\t0xf46d43,\r\n\t\t\t0xfdae61,\r\n\t\t\t0xfee090,\r\n\t\t\t0xffffbf,\r\n\t\t\t0xe0f3f8,\r\n\t\t\t0xabd9e9,\r\n\t\t\t0x74add1,\r\n\t\t\t0x4575b4,\r\n\t\t\t0x313695,\r\n\t\t],\r\n\t\tBrBG: [\r\n\t\t\t0x543005,\r\n\t\t\t0x8c510a,\r\n\t\t\t0xbf812d,\r\n\t\t\t0xdfc27d,\r\n\t\t\t0xf6e8c3,\r\n\t\t\t0xf5f5f5,\r\n\t\t\t0xc7eae5,\r\n\t\t\t0x80cdc1,\r\n\t\t\t0x35978f,\r\n\t\t\t0x01665e,\r\n\t\t\t0x003c30,\r\n\t\t],\r\n\t\tRdGy: [\r\n\t\t\t0x67001f,\r\n\t\t\t0xb2182b,\r\n\t\t\t0xd6604d,\r\n\t\t\t0xf4a582,\r\n\t\t\t0xfddbc7,\r\n\t\t\t0xffffff,\r\n\t\t\t0xe0e0e0,\r\n\t\t\t0xbababa,\r\n\t\t\t0x878787,\r\n\t\t\t0x4d4d4d,\r\n\t\t\t0x1a1a1a,\r\n\t\t],\r\n\t\tPuOr: [\r\n\t\t\t0x7f3b08,\r\n\t\t\t0xb35806,\r\n\t\t\t0xe08214,\r\n\t\t\t0xfdb863,\r\n\t\t\t0xfee0b6,\r\n\t\t\t0xf7f7f7,\r\n\t\t\t0xd8daeb,\r\n\t\t\t0xb2abd2,\r\n\t\t\t0x8073ac,\r\n\t\t\t0x542788,\r\n\t\t\t0x2d004b,\r\n\t\t],\r\n\t\tSet2: [0x66c2a5, 0xfc8d62, 0x8da0cb, 0xe78ac3, 0xa6d854, 0xffd92f, 0xe5c494, 0xb3b3b3],\r\n\t\tAccent: [0x7fc97f, 0xbeaed4, 0xfdc086, 0xffff99, 0x386cb0, 0xf0027f, 0xbf5b17, 0x666666],\r\n\t\tSet1: [0xe41a1c, 0x377eb8, 0x4daf4a, 0x984ea3, 0xff7f00, 0xffff33, 0xa65628, 0xf781bf, 0x999999],\r\n\t\tSet3: [\r\n\t\t\t0x8dd3c7,\r\n\t\t\t0xffffb3,\r\n\t\t\t0xbebada,\r\n\t\t\t0xfb8072,\r\n\t\t\t0x80b1d3,\r\n\t\t\t0xfdb462,\r\n\t\t\t0xb3de69,\r\n\t\t\t0xfccde5,\r\n\t\t\t0xd9d9d9,\r\n\t\t\t0xbc80bd,\r\n\t\t\t0xccebc5,\r\n\t\t\t0xffed6f,\r\n\t\t],\r\n\t\tDark2: [0x1b9e77, 0xd95f02, 0x7570b3, 0xe7298a, 0x66a61e, 0xe6ab02, 0xa6761d, 0x666666],\r\n\t\tPaired: [\r\n\t\t\t0xa6cee3,\r\n\t\t\t0x1f78b4,\r\n\t\t\t0xb2df8a,\r\n\t\t\t0x33a02c,\r\n\t\t\t0xfb9a99,\r\n\t\t\t0xe31a1c,\r\n\t\t\t0xfdbf6f,\r\n\t\t\t0xff7f00,\r\n\t\t\t0xcab2d6,\r\n\t\t\t0x6a3d9a,\r\n\t\t\t0xffff99,\r\n\t\t\t0xb15928,\r\n\t\t],\r\n\t\tPastel2: [0xb3e2cd, 0xfdcdac, 0xcbd5e8, 0xf4cae4, 0xe6f5c9, 0xfff2ae, 0xf1e2cc, 0xcccccc],\r\n\t\tPastel1: [0xfbb4ae, 0xb3cde3, 0xccebc5, 0xdecbe4, 0xfed9a6, 0xffffcc, 0xe5d8bd, 0xfddaec, 0xf2f2f2],\r\n\t}\r\n\r\n\t/**\r\n\t * X11 color names\r\n\t * http://www.w3.org/TR/css3-color/#svg-color\r\n\t *\r\n\t * @example Object.keys(chroma.w3cx11).slice(0, 4)\r\n\t */\r\n\texport const w3cx11 = {\r\n\t\taliceblue: 0xf0f8ff,\r\n\t\tantiquewhite: 0xfaebd7,\r\n\t\taqua: 0x00ffff,\r\n\t\taquamarine: 0x7fffd4,\r\n\t\tazure: 0xf0ffff,\r\n\t\tbeige: 0xf5f5dc,\r\n\t\tbisque: 0xffe4c4,\r\n\t\tblack: 0x000000,\r\n\t\tblanchedalmond: 0xffebcd,\r\n\t\tblue: 0x0000ff,\r\n\t\tblueviolet: 0x8a2be2,\r\n\t\tbrown: 0xa52a2a,\r\n\t\tburlywood: 0xdeb887,\r\n\t\tcadetblue: 0x5f9ea0,\r\n\t\tchartreuse: 0x7fff00,\r\n\t\tchocolate: 0xd2691e,\r\n\t\tcoral: 0xff7f50,\r\n\t\tcornflower: 0x6495ed,\r\n\t\tcornflowerblue: 0x6495ed,\r\n\t\tcornsilk: 0xfff8dc,\r\n\t\tcrimson: 0xdc143c,\r\n\t\tcyan: 0x00ffff,\r\n\t\tdarkblue: 0x00008b,\r\n\t\tdarkcyan: 0x008b8b,\r\n\t\tdarkgoldenrod: 0xb8860b,\r\n\t\tdarkgray: 0xa9a9a9,\r\n\t\tdarkgreen: 0x006400,\r\n\t\tdarkgrey: 0xa9a9a9,\r\n\t\tdarkkhaki: 0xbdb76b,\r\n\t\tdarkmagenta: 0x8b008b,\r\n\t\tdarkolivegreen: 0x556b2f,\r\n\t\tdarkorange: 0xff8c00,\r\n\t\tdarkorchid: 0x9932cc,\r\n\t\tdarkred: 0x8b0000,\r\n\t\tdarksalmon: 0xe9967a,\r\n\t\tdarkseagreen: 0x8fbc8f,\r\n\t\tdarkslateblue: 0x483d8b,\r\n\t\tdarkslategray: 0x2f4f4f,\r\n\t\tdarkslategrey: 0x2f4f4f,\r\n\t\tdarkturquoise: 0x00ced1,\r\n\t\tdarkviolet: 0x9400d3,\r\n\t\tdeeppink: 0xff1493,\r\n\t\tdeepskyblue: 0x00bfff,\r\n\t\tdimgray: 0x696969,\r\n\t\tdimgrey: 0x696969,\r\n\t\tdodgerblue: 0x1e90ff,\r\n\t\tfirebrick: 0xb22222,\r\n\t\tfloralwhite: 0xfffaf0,\r\n\t\tforestgreen: 0x228b22,\r\n\t\tfuchsia: 0xff00ff,\r\n\t\tgainsboro: 0xdcdcdc,\r\n\t\tghostwhite: 0xf8f8ff,\r\n\t\tgold: 0xffd700,\r\n\t\tgoldenrod: 0xdaa520,\r\n\t\tgray: 0x808080,\r\n\t\tgreen: 0x008000,\r\n\t\tgreenyellow: 0xadff2f,\r\n\t\tgrey: 0x808080,\r\n\t\thoneydew: 0xf0fff0,\r\n\t\thotpink: 0xff69b4,\r\n\t\tindianred: 0xcd5c5c,\r\n\t\tindigo: 0x4b0082,\r\n\t\tivory: 0xfffff0,\r\n\t\tkhaki: 0xf0e68c,\r\n\t\tlaserlemon: 0xffff54,\r\n\t\tlavender: 0xe6e6fa,\r\n\t\tlavenderblush: 0xfff0f5,\r\n\t\tlawngreen: 0x7cfc00,\r\n\t\tlemonchiffon: 0xfffacd,\r\n\t\tlightblue: 0xadd8e6,\r\n\t\tlightcoral: 0xf08080,\r\n\t\tlightcyan: 0xe0ffff,\r\n\t\tlightgoldenrod: 0xfafad2,\r\n\t\tlightgoldenrodyellow: 0xfafad2,\r\n\t\tlightgray: 0xd3d3d3,\r\n\t\tlightgreen: 0x90ee90,\r\n\t\tlightgrey: 0xd3d3d3,\r\n\t\tlightpink: 0xffb6c1,\r\n\t\tlightsalmon: 0xffa07a,\r\n\t\tlightseagreen: 0x20b2aa,\r\n\t\tlightskyblue: 0x87cefa,\r\n\t\tlightslategray: 0x778899,\r\n\t\tlightslategrey: 0x778899,\r\n\t\tlightsteelblue: 0xb0c4de,\r\n\t\tlightyellow: 0xffffe0,\r\n\t\tlime: 0x00ff00,\r\n\t\tlimegreen: 0x32cd32,\r\n\t\tlinen: 0xfaf0e6,\r\n\t\tmagenta: 0xff00ff,\r\n\t\tmaroon: 0x800000,\r\n\t\tmaroon2: 0x7f0000,\r\n\t\tmaroon3: 0xb03060,\r\n\t\tmediumaquamarine: 0x66cdaa,\r\n\t\tmediumblue: 0x0000cd,\r\n\t\tmediumorchid: 0xba55d3,\r\n\t\tmediumpurple: 0x9370db,\r\n\t\tmediumseagreen: 0x3cb371,\r\n\t\tmediumslateblue: 0x7b68ee,\r\n\t\tmediumspringgreen: 0x00fa9a,\r\n\t\tmediumturquoise: 0x48d1cc,\r\n\t\tmediumvioletred: 0xc71585,\r\n\t\tmidnightblue: 0x191970,\r\n\t\tmintcream: 0xf5fffa,\r\n\t\tmistyrose: 0xffe4e1,\r\n\t\tmoccasin: 0xffe4b5,\r\n\t\tnavajowhite: 0xffdead,\r\n\t\tnavy: 0x000080,\r\n\t\toldlace: 0xfdf5e6,\r\n\t\tolive: 0x808000,\r\n\t\tolivedrab: 0x6b8e23,\r\n\t\torange: 0xffa500,\r\n\t\torangered: 0xff4500,\r\n\t\torchid: 0xda70d6,\r\n\t\tpalegoldenrod: 0xeee8aa,\r\n\t\tpalegreen: 0x98fb98,\r\n\t\tpaleturquoise: 0xafeeee,\r\n\t\tpalevioletred: 0xdb7093,\r\n\t\tpapayawhip: 0xffefd5,\r\n\t\tpeachpuff: 0xffdab9,\r\n\t\tperu: 0xcd853f,\r\n\t\tpink: 0xffc0cb,\r\n\t\tplum: 0xdda0dd,\r\n\t\tpowderblue: 0xb0e0e6,\r\n\t\tpurple: 0x800080,\r\n\t\tpurple2: 0x7f007f,\r\n\t\tpurple3: 0xa020f0,\r\n\t\trebeccapurple: 0x663399,\r\n\t\tred: 0xff0000,\r\n\t\trosybrown: 0xbc8f8f,\r\n\t\troyalblue: 0x4169e1,\r\n\t\tsaddlebrown: 0x8b4513,\r\n\t\tsalmon: 0xfa8072,\r\n\t\tsandybrown: 0xf4a460,\r\n\t\tseagreen: 0x2e8b57,\r\n\t\tseashell: 0xfff5ee,\r\n\t\tsienna: 0xa0522d,\r\n\t\tsilver: 0xc0c0c0,\r\n\t\tskyblue: 0x87ceeb,\r\n\t\tslateblue: 0x6a5acd,\r\n\t\tslategray: 0x708090,\r\n\t\tslategrey: 0x708090,\r\n\t\tsnow: 0xfffafa,\r\n\t\tspringgreen: 0x00ff7f,\r\n\t\tsteelblue: 0x4682b4,\r\n\t\ttan: 0xd2b48c,\r\n\t\tteal: 0x008080,\r\n\t\tthistle: 0xd8bfd8,\r\n\t\ttomato: 0xff6347,\r\n\t\tturquoise: 0x40e0d0,\r\n\t\tviolet: 0xee82ee,\r\n\t\twheat: 0xf5deb3,\r\n\t\twhite: 0xffffff,\r\n\t\twhitesmoke: 0xf5f5f5,\r\n\t\tyellow: 0xffff00,\r\n\t\tyellowgreen: 0x9acd32,\r\n\t}\r\n\r\n\t/**\r\n\t * Return a new [[CubeHelix]].\r\n\t *\r\n\t * @example chroma.cubehelix() // use the default helix\r\n\t * @example chroma.cubehelix().start(200).rotations(-0.5).gamma(0.8).lightness([0.3, 0.8])\r\n\t */\r\n\texport function cubehelix(\r\n\t\tstart = 300,\r\n\t\trotations = -1.5,\r\n\t\thue: number | [number, number] = 1,\r\n\t\tgamma = 1,\r\n\t\tlightness: number | [number, number] = [0, 1],\r\n\t) {\r\n\t\tconst f: CubeHelix = (t => f.at(t)) as CubeHelix\r\n\t\t;(Object.getOwnPropertyNames(CubeHelix.prototype) as (keyof typeof CubeHelix)[]).forEach(\r\n\t\t\tkey => (f[key] = CubeHelix.prototype[key]),\r\n\t\t)\r\n\t\tf.start(start)\r\n\t\tf.rotations(rotations)\r\n\t\tf.hue(hue)\r\n\t\tf.gamma(gamma)\r\n\t\tf.lightness(lightness)\r\n\t\treturn f\r\n\t}\r\n\r\n\t/**\r\n\t * [Dave Green's cubehelix color scheme](http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/)!\r\n\t *\r\n\t * A CubeHelix is a function defined on [0, 1] which returns colors.\r\n\t */\r\n\texport interface CubeHelix {\r\n\t\t(f: number): Color\r\n\t}\r\n\texport class CubeHelix {\r\n\t\tprivate _start!: number\r\n\t\tprivate _rotations!: number\r\n\t\tprivate _gamma!: number\r\n\t\tprivate _hue!: [number, number]\r\n\t\tprivate _lightness!: [number, number]\r\n\t\tpublic start(s: number) {\r\n\t\t\tif (undefined === s) {\r\n\t\t\t\treturn this._start\r\n\t\t\t}\r\n\t\t\tthis._start = s\r\n\t\t\treturn this\r\n\t\t}\r\n\t\tpublic rotations(r: number) {\r\n\t\t\tif (undefined === r) {\r\n\t\t\t\treturn this._rotations\r\n\t\t\t}\r\n\t\t\tthis._rotations = r\r\n\t\t\treturn this\r\n\t\t}\r\n\t\tpublic gamma(g: number) {\r\n\t\t\tif (undefined === g) {\r\n\t\t\t\treturn this._gamma\r\n\t\t\t}\r\n\t\t\tthis._gamma = g\r\n\t\t\treturn this\r\n\t\t}\r\n\t\tpublic hue(h: number | [number, number]) {\r\n\t\t\tif (undefined === h) {\r\n\t\t\t\treturn this._hue\r\n\t\t\t}\r\n\t\t\tthis._hue = Array.isArray(h) ? h : [h, h]\r\n\t\t\treturn this\r\n\t\t}\r\n\t\tpublic lightness(h: number | [number, number]) {\r\n\t\t\tif (undefined === h) {\r\n\t\t\t\treturn this._lightness\r\n\t\t\t}\r\n\t\t\tthis._lightness = Array.isArray(h) ? h : [h, h]\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Convert to a [[Scale]].\r\n\t\t *\r\n\t\t * @example chroma.cubehelix().scale().correctLightness().domain(2, 22)\r\n\t\t */\r\n\t\tpublic scale() {\r\n\t\t\treturn scale(this)\r\n\t\t}\r\n\r\n\t\tpublic at(fract: number) {\r\n\t\t\tconst a = TWOPI * ((this._start + 120) / 360 + this._rotations * fract)\r\n\t\t\tconst l = lerp(this._lightness[0], this._lightness[1], fract) ** this._gamma\r\n\t\t\tconst h = lerp(this._hue[0], this._hue[1], fract)\r\n\t\t\tconst amp = (h * l * (1 - l)) / 2\r\n\t\t\tconst cos_a = cos(a)\r\n\t\t\tconst sin_a = sin(a)\r\n\t\t\tconst r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a)\r\n\t\t\tconst g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a)\r\n\t\t\tconst b = l + amp * (+1.97294 * cos_a)\r\n\t\t\treturn rgb([r * 255, g * 255, b * 255, 1])\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Create a new random [Color] from a random point in the RGB color space.\r\n\t * @param randomSource A function which returns random `number`s in the interval [0; 1). Useful if you want to\r\n\t *     create a deterministic sequence of \"random\" colors. Defaults to `Math.random`.\r\n\t */\r\n\texport function random(randomSource = Math.random) {\r\n\t\treturn num((randomSource() * 0x1_00_00_00) | 0)\r\n\t}\r\n\r\n\t/**\r\n\t * Create a valid RGB color (`.clipped() == false`) from a random point in the CIELAB color space. This results in\r\n\t * more colors in the RGB color space where humans can perceive more differences.\r\n\t * @param randomSource A function which returns random `number`s in the interval [0; 1). Useful if you want to\r\n\t *     create a deterministic sequence of \"random\" colors. Defaults to `Math.random`.\r\n\t * @example chroma.random((() => { let i = 0; return () => (i = (i *Math.SQRT2) % 1); })())\r\n\t */\r\n\t// export function randomLab(randomSource = Math.random) {\r\n\t// \tconst labAMin = -87,\r\n\t// \t\tlabAMax = 99,\r\n\t// \t\tlabBMin = -108,\r\n\t// \t\tlabBMax = 95\r\n\t// \tlet maxIterations = 100\r\n\t// \twhile (maxIterations--) {\r\n\t// \t\tconst u = randomSource(),\r\n\t// \t\t\tv = randomSource(),\r\n\t// \t\t\tw = randomSource()\r\n\t// \t\t// The following matrix multiplication transform the random point (u v w) in the unit cube into the\r\n\t// \t\t// oriented bounding box (OBB) of the projection of the RGB space into the LAB space. This is necessary to\r\n\t// \t\t// avoid a huge number of misses.\r\n\t// \t\tconst color = chroma.lab(\r\n\t// \t\t\tu * -53.903 + v * -88.755 + w * 71.7 + 99.707,\r\n\t// \t\t\tu * -82.784 + v * 187.036 + w * -2.422 + -28.17,\r\n\t// \t\t\tu * -75.813 + v * -141.406 + w * -48.261 + 152.469,\r\n\t// \t\t)\r\n\t// \t\tconsole.log(color.lab())\r\n\t// \t\tconsole.log(color.rgba(false, false))\r\n\t// \t\tif (!color.clipped()) return color\r\n\t// \t}\r\n\t// \tthrow new Error(\"Could find a random color in 100 iterations\")\r\n\t// }\r\n\r\n\t/**\r\n\t * Mixes two colors. The mix ratio is a value between 0 and 1.\r\n\t * The color mixing produces different results based the color space used for interpolation.\r\n\t *\r\n\t * @param col2\r\n\t * @param f\r\n\t * @param m\r\n\t * @example chroma.mix('red', 'blue')\r\n\t * @example chroma.mix('red', 'blue', 0.25)\r\n\t * @example chroma.mix('red', 'blue', 0.75)\r\n\t *\r\n\t * @example chroma.mix('red', 'blue', 0.5, 'rgb')\r\n\t * @example chroma.mix('red', 'blue', 0.5, 'hsl')\r\n\t * @example chroma.mix('red', 'blue', 0.5, 'lab')\r\n\t * @example chroma.mix('red', 'blue', 0.5, 'lch')\r\n\t * @example chroma.mix('red', 'blue', 0.5, 'lrgb')\r\n\t */\r\n\texport function mix(col1: Chromable, col2: Chromable, f = 0.5, m: InterpolationMode = \"rgb\") {\r\n\t\tconst c1 = chroma(col1)\r\n\t\tconst c2 = chroma(col2)\r\n\t\tconst res = interpolators[m] && ((interpolators as any)[m](c1, c2, f, m) as Color)\r\n\t\tif (!res) {\r\n\t\t\tthrow new Error(\"color mode \" + m + \" is not supported\")\r\n\t\t}\r\n\t\treturn res.alpha(lerp(c1.alpha(), c2.alpha(), f))\r\n\t}\r\n\r\n\t/**\r\n\t * Parse a CSS color. See [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color) for all the possible\r\n\t * variants.\r\n\t *\r\n\t * @example chroma.css('hsl(2rad 90% 50% / 0.9)')\r\n\t * @example chroma.css('laserlemon')\r\n\t */\r\n\texport function css(cssString: string) {\r\n\t\tconst [r, g, b, a] = css2rgb(cssString)\r\n\t\treturn new Color(r, g, b, a)\r\n\t}\r\n\r\n\t/**\r\n\t * @example chroma.cmyk(0.2, 0.8, 0, 0)\r\n\t * @example chroma(0.2, 0.8, 0, 0, 'cmyk')\r\n\t */\r\n\texport function cmyk(cmyk: CMYK): Color\r\n\texport function cmyk(cyan1: number, magenta1: number, yellow1: number, key1: number): Color\r\n\texport function cmyk(...args: any[]) {\r\n\t\treturn guess(args, \"cmyk\")\r\n\t}\r\n\r\n\t/**\r\n\t * @example chroma.gl(1, 1, 0, 1)\r\n\t */\r\n\texport function gl(gl: RGBA | RGB): Color\r\n\t/**\r\n\t * @example chroma.gl([1, 0, 1, 0.5])\r\n\t */\r\n\texport function gl(red1: number, green1: number, blue1: number, alpha1: number): Color\r\n\texport function gl(...args: any[]) {\r\n\t\treturn guess(args, \"gl\")\r\n\t}\r\n\r\n\texport function hcg(hcg: HCG): Color\r\n\t/**\r\n\t * @param alpha1 default=1\r\n\t */\r\n\texport function hcg(h: number, c: number, g: number, alpha1?: number): Color\r\n\texport function hcg(...args: any[]) {\r\n\t\treturn guess(args, \"hcg\")\r\n\t}\r\n\r\n\texport function lch(lch: LCH): Color\r\n\t/**\r\n\t * @param alpha1 default=1\r\n\t */\r\n\texport function lch(h: number, c: number, l: number, alpha1?: number): Color\r\n\texport function lch(...args: any[]) {\r\n\t\treturn guess(args, \"lch\")\r\n\t}\r\n\r\n\texport function hsi(hsi: HSI): Color\r\n\t/**\r\n\t * @param alpha1 default=1\r\n\t */\r\n\texport function hsi(h: number, s: number, i: number, alpha1?: number): Color\r\n\texport function hsi(...args: any[]) {\r\n\t\treturn guess(args, \"hsi\")\r\n\t}\r\n\r\n\texport function hsl(hsl: HSL): Color\r\n\t/**\r\n\t * @param alpha1 default=1\r\n\t * @example chroma.hsl(30, 1, 0.5)\r\n\t * @example chroma.hsl(30, 0.6, 0.5)\r\n\t */\r\n\texport function hsl(hueDegrees: number, saturation1: number, lightness1: number, alpha1?: number): Color\r\n\texport function hsl(...args: any[]) {\r\n\t\treturn guess(args, \"hsl\")\r\n\t}\r\n\r\n\texport function hsv(hsv: LAB): Color\r\n\texport function hsv(h: number, s: number, v: number): Color\r\n\texport function hsv(...args: any[]) {\r\n\t\treturn guess(args, \"hsv\")\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param temperature\r\n\t * @example chroma.kelvin(2000) // candle light\r\n\t * @example chroma.kelvin(3500) // sunset\r\n\t * @example chroma.kelvin(6500) // daylight\r\n\t * @example x0_1 => chroma.kelvin(x0_1 * 30000) // effective range: [0; 30000]\r\n\t */\r\n\texport function kelvin(temperature: number) {\r\n\t\tconst [r, g, b] = kelvin2rgb(temperature)\r\n\t\treturn new Color(r, g, b)\r\n\t}\r\n\r\n\texport function lab(lab: LAB): Color\r\n\t/**\r\n\t * @param alpha1 default=1\r\n\t */\r\n\texport function lab(lightness1: number, a1: number, b: number, alpha1?: number): Color\r\n\texport function lab(...args: any[]) {\r\n\t\treturn guess(args, \"lab\")\r\n\t}\r\n\r\n\t/**\r\n\t * @example chroma.num(0x663399) // rebeccapurple\r\n\t */\r\n\texport function num(num: number) {\r\n\t\tconst [r, g, b] = num2rgb(num)\r\n\t\treturn new Color(r, g, b)\r\n\t}\r\n\r\n\texport function rgb(rgb: RGBA | RGB): Color\r\n\t/**\r\n\t * @param alpha1 default=1\r\n\t * @example chroma.rgb(0, 100, 200)\r\n\t */\r\n\texport function rgb(red255: number, green255: number, blue255: number, alpha1?: number): Color\r\n\texport function rgb(...args: any[]) {\r\n\t\treturn guess(args, \"rgb\")\r\n\t}\r\n\r\n\texport function xyz(xyz: XYZ): Color\r\n\t/** @param alpha1 default=1 */\r\n\texport function xyz(x1: number, y1: number, z1: number, alpha1?: number): Color\r\n\texport function xyz(...args: any[]) {\r\n\t\treturn guess(args, \"xyz\")\r\n\t}\r\n\r\n\t/**\r\n\t * Similar to chroma.mix, but accepts more than two colors.\r\n\t *\r\n\t * @example colors = ['#ddd', 'yellow', 'red', 'teal']\r\n\t * @example chroma.average(colors) // default = 'rgb'\r\n\t * @example chroma.average(colors, 'lab')\r\n\t * @example chroma.average(colors, 'lch')\r\n\t * @example chroma.average(colors, 'lrgb')\r\n\t * @example chroma.average(['red', 'rgba(0,0,0,0.5)']).css()\r\n\t */\r\n\texport function average(chromables: Chromable[], mode: InterpolationMode = \"rgb\") {\r\n\t\tconst colors = chromables.map(c => chroma(c))\r\n\t\tif (mode == \"lrgb\") {\r\n\t\t\treturn _average_lrgb(colors)\r\n\t\t}\r\n\t\tif (mode == \"num\") {\r\n\t\t\tlet numSum = 0,\r\n\t\t\t\talphaSum = 0\r\n\t\t\tfor (const col of colors) {\r\n\t\t\t\tnumSum += col.num()\r\n\t\t\t\talphaSum += col.alpha()\r\n\t\t\t}\r\n\t\t\treturn num(numSum / colors.length).alpha(alphaSum / colors.length)\r\n\t\t}\r\n\t\tconst xyz = [0, 0, 0]\r\n\t\tlet dx = 0\r\n\t\tlet dy = 0\r\n\t\tlet alphaSum = 0\r\n\t\tfor (const c of colors) {\r\n\t\t\tconst xyz2 = c[mode]()\r\n\t\t\talphaSum += c.alpha()\r\n\t\t\tfor (let i = 0; i < xyz.length; i++) {\r\n\t\t\t\tif (mode.charAt(i) == \"h\") {\r\n\t\t\t\t\tconst A = (xyz2[i] / 180) * PI\r\n\t\t\t\t\tdx += cos(A)\r\n\t\t\t\t\tdy += sin(A)\r\n\t\t\t\t} else {\r\n\t\t\t\t\txyz[i] += xyz2[i]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let i = 0; i < xyz.length; i++) {\r\n\t\t\tif (mode.charAt(i) == \"h\") {\r\n\t\t\t\tconst A = atan2(dy / colors.length, dx / colors.length) * RAD2DEG\r\n\t\t\t\txyz[i] = (A + 360) % 360\r\n\t\t\t} else {\r\n\t\t\t\txyz[i] = xyz[i] / colors.length\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn guess(xyz, mode).alpha(alphaSum / colors.length)\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param chromables\r\n\t * @example chroma.scale('black', 'red', 'gold') // linear interpolation\r\n\t * @example chroma.bezier('black', 'red', 'gold') // bezier interpolation\r\n\t */\r\n\texport function bezier(chromables: Chromable[]): { (t: number): Color; scale(): Scale }\r\n\texport function bezier(...chromables: Chromable[]): { (t: number): Color; scale(): Scale }\r\n\texport function bezier(...args: any[]) {\r\n\t\tconst chromables: Chromable[] = Array.isArray(args[0]) ? args[0] : args\r\n\t\tconst f = _bezier(chromables) as { (t: number): Color; scale(): Scale }\r\n\t\tf.scale = CubeHelix.prototype.scale\r\n\t\treturn f\r\n\t}\r\n\r\n\t/**\r\n\t * Blends two colors using RGB channel-wise blend functions.\r\n\t * @param bottom\r\n\t * @param top\r\n\t * @param mode\r\n\t * @example chroma.blend('4CBBFC', 'EEEE22', 'multiply')\r\n\t * @example chroma.blend('4CBBFC', 'EEEE22', 'darken')\r\n\t * @example chroma.blend('4CBBFC', 'EEEE22', 'lighten')\r\n\t */\r\n\texport function blend(bottom: Chromable, top: Chromable, mode: BlendMode) {\r\n\t\tif (!blend_fs[mode]) {\r\n\t\t\tthrow new Error(\"unknown blend mode \" + mode)\r\n\t\t}\r\n\t\treturn blend_fs[mode](bottom, top)\r\n\t}\r\n\texport type BlendMode = keyof typeof blend_fs\r\n\tnamespace blend_fs {\r\n\t\texport const normal = blend_f(each((a, _) => a))\r\n\t\texport const multiply = blend_f(each((a, b) => (a * b) / 255))\r\n\t\texport const screen = blend_f(each(_screen))\r\n\t\texport const overlay = blend_f(each(_overlay))\r\n\t\texport const darken = blend_f(each(min))\r\n\t\texport const lighten = blend_f(each(max))\r\n\t\texport const dodge = blend_f(each(_dodge))\r\n\t\texport const burn = blend_f(each(_burn))\r\n\t}\r\n\r\n\t/**\r\n\t * @param colors\r\n\t * @example scale = chroma.scale(['yellow', '008ae5'])\r\n\t * @example scale(0.25)\r\n\t * @example scale(0.5)\r\n\t * @example scale(0.75)\r\n\t * @example chroma.scale('Viridis')\r\n\t */\r\n\texport function scale(colors: Chromable[] | keyof typeof brewer | ((f: number) => Color)): Scale\r\n\texport function scale(...colors: Chromable[]): Scale\r\n\texport function scale(...args: any[]) {\r\n\t\tconst f: Scale = (t => (f as any)._at(t)) as Scale\r\n\t\t;(Object.getOwnPropertyNames(Scale.prototype) as (keyof typeof Scale)[]).forEach(\r\n\t\t\tkey => (f[key] = Scale.prototype[key]),\r\n\t\t)\r\n\t\tif (Array.isArray(args[0])) args = args[0]\r\n\t\tif (args.length == 1 && \"string\" == typeof args[0]) args = brewer[args[0] as keyof typeof brewer]\r\n\t\t;(f as any)._init(\"function\" == typeof args[0] ? args[0] : args.map(a => chroma(a)))\r\n\t\t//f.setColors(args.length > 1 ? args : args[0])\r\n\t\treturn f\r\n\t}\r\n\texport interface Scale<T = Color> {\r\n\t\t/**\r\n\t\t * A color scale, created with chroma.scale, is a function that maps numeric values to a color palette.\r\n\t\t * @example chroma.scale('Purples')\r\n\t\t * @example chroma.scale('Purples')(0.4)\r\n\t\t */\r\n\t\t(val: number): T\r\n\t}\r\n\texport class Scale<T = Color> {\r\n\t\tprivate _colors!: Color[] | ((t: number) => Color)\r\n\t\tprivate _classes!: number[] | undefined\r\n\t\t/**\r\n\t\t * Color cache. undefined if the cache should not be used.\r\n\t\t */\r\n\t\tprivate _cache!: Map<number, Color> | undefined\r\n\t\tprivate _correctLightness!: boolean\r\n\t\tprivate _gamma!: number\r\n\t\tprivate _mode!: InterpolationMode\r\n\t\tprivate _out!: ColorFormat | undefined\r\n\t\tprivate _min!: number\r\n\t\tprivate _max!: number\r\n\t\tprivate _paddingLeft!: number\r\n\t\tprivate _paddingRight!: number\r\n\t\t// positions of the colors on the interval [0, 1]. guaranteed to have the same length as _colors\r\n\t\t// undefined when _colors is a function\r\n\t\tprivate _pos: number[] | undefined\r\n\r\n\t\t/**\r\n\t\t * Get the current scale classes.\r\n\t\t */\r\n\t\tpublic classes(): number[]\r\n\t\t/**\r\n\t\t * Make the scale return a number of distint color instead of a continuous gradient.\r\n\t\t * If you pass a number the scale will broken into equi-distant classes:\r\n\t\t *\r\n\t\t * @example chroma.scale('OrRd') // continous\r\n\t\t * @example chroma.scale('OrRd').classes(5) // equidistant classes\r\n\t\t * @example chroma.scale('OrRd').classes(8)\r\n\t\t *\r\n\t\t * @example chroma.scale('OrRd').classes([0, 6, 11, 17, 20]) // also sets domain\r\n\t\t */\r\n\t\tpublic classes(classes: number | number[]): this\r\n\t\tpublic classes(classes?: number | number[]) {\r\n\t\t\tif (undefined === classes) {\r\n\t\t\t\treturn this._classes\r\n\t\t\t}\r\n\t\t\tif (Array.isArray(classes)) {\r\n\t\t\t\tthis._classes = classes\r\n\t\t\t\tthis.domain(classes[0], classes[classes.length - 1])\r\n\t\t\t} else {\r\n\t\t\t\tif (classes % 1 != 0 || classes < 1) throw new Error(\"invalid classes param\")\r\n\t\t\t\t// const d = analyze(this.domain())\r\n\t\t\t\tthis._classes = limits(this.domain(), \"e\", classes)\r\n\t\t\t}\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the domain.\r\n\t\t * @return If _colors is a function, [this._min, this._max]. If _colors is an array of colors, an array with the\r\n\t\t * same length as the number of colors.\r\n\t\t * @example chroma.scale(\"red\", \"white\", \"blue\").domain(0, 20).domain() // == [0, 10, 20]\r\n\t\t */\r\n\t\tpublic domain(): number[]\r\n\t\t/**\r\n\t\t * Set the domain interval on which the scale is defined. Colors are distributed equidistantly along the\r\n\t\t * interval.\r\n\t\t * @param start\r\n\t\t * @param end\r\n\t\t * @return `this`\r\n\t\t * @example chroma.scale(\"red\", \"white\", \"blue\").domain(0, 100)(50) // == white\r\n\t\t * @example chroma.scale(\"red\", \"white\", \"blue\").domain(0, 0.25, 1).domain(0, 100).domain() // == [0, 25, 100]\r\n\t\t */\r\n\t\tpublic domain(start: number, end: number): this\r\n\t\t/**\r\n\t\t * Set the domain interval and the individual positions of the colors. The number of passed values must match\r\n\t\t * the number of colors which define the scale. Not valid if the scale is defined by a function.\r\n\t\t * @param domain The positions of all scale colors. Values must be in ascending order and should not have\r\n\t\t * duplicates.\r\n\t\t * @return `this`\r\n\t\t * @example scale = chroma.scale(\"red\", \"white\", \"blue\").domain(0, 25, 100)\r\n\t\t * @example scale(25) // == white\r\n\t\t * @example scale(100) // == blue\r\n\t\t * @example scale(50) // == #aaaaff\r\n\t\t */\r\n\t\tpublic domain(...domain: number[]): this\r\n\t\tpublic domain(...domain: number[]): number[] | this {\r\n\t\t\tif (undefined === domain[0]) {\r\n\t\t\t\treturn \"function\" !== typeof this._colors\r\n\t\t\t\t\t? this._pos!.map(p => lerp(this._min, this._max, p))\r\n\t\t\t\t\t: [this._min, this._max]\r\n\t\t\t}\r\n\t\t\tthis._min = domain[0]\r\n\t\t\tthis._max = domain[domain.length - 1]\r\n\t\t\tif (2 == domain.length) {\r\n\t\t\t\tif (\"function\" !== typeof this._colors) {\r\n\t\t\t\t\t// equidistant positions\r\n\t\t\t\t\tthis._pos = this._colors.map((_, c) => c / (this._colors.length - 1))\r\n\t\t\t\t}\r\n\t\t\t} else if (\"function\" !== typeof this._colors && domain.length == this._colors.length) {\r\n\t\t\t\tthis._pos = domain.map(d => lerpInv(this._min, this._max, d))\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(\"invalid domain \" + domain)\r\n\t\t\t}\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the interpolation mode used when calculating colors.\r\n\t\t */\r\n\t\tpublic mode(): InterpolationMode\r\n\t\t/**\r\n\t\t * Set the interpolation mode used when calculating colors. The defaut mode is \"rgb\".\r\n\t\t * See also {@link chroma#mix}\r\n\t\t * @param mode the mode to set.\r\n\t\t * @return `this`\r\n\t\t * @example chroma.scale(\"red\", \"green\").mode(\"lab\")\r\n\t\t * @example chroma.scale(\"red\", \"green\").mode(\"lrgb\")\r\n\t\t */\r\n\t\tpublic mode(mode: InterpolationMode): this\r\n\t\tpublic mode(mode?: InterpolationMode) {\r\n\t\t\tif (undefined === mode) {\r\n\t\t\t\treturn this._mode\r\n\t\t\t}\r\n\t\t\tthis._mode = mode\r\n\t\t\tthis._resetCache()\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Set the output format return by `this(x)` and `this.colors(n)`.\r\n\t\t * @param _o The color format to use. Pass `undefined` to return [Color] objects.\r\n\t\t * @return `this`\r\n\t\t * @example chroma.scale(\"red\", \"white\").out(\"hex\")(0) // == \"#ff0000\"\r\n\t\t * @example chroma.scale(\"red\", \"white\").out(\"num\").colors(2) // == [0xff0000, 0xffffff]\r\n\t\t */\r\n\t\tpublic out<M extends keyof ColorModes>(_o: M): Scale<M extends undefined ? Color : (ColorModes[M])> {\r\n\t\t\tthis._out = _o\r\n\t\t\treturn this as any\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * This makes sure the lightness range is spread evenly across a color scale. Especially useful when working\r\n\t\t * with [multi-hue color scales](https://www.vis4.net/blog/2013/09/mastering-multi-hued-color-scales/), where\r\n\t\t * simple gamma correction can't help you very much.\r\n\t\t *\r\n\t\t * @example chroma.scale('black','red','yellow','white')\r\n\t\t * @example chroma.scale('black','red','yellow','white').correctLightness()\r\n\t\t */\r\n\t\tpublic correctLightness(enableCorrectLightness = true) {\r\n\t\t\tif (this._correctLightness != enableCorrectLightness) {\r\n\t\t\t\tthis._resetCache()\r\n\t\t\t\tconst colors = this._colors\r\n\t\t\t\tif (enableCorrectLightness && \"function\" !== typeof colors) {\r\n\t\t\t\t\t// make sure that the colors have ascending or descending lightnesses\r\n\t\t\t\t\tlet sign = 0\r\n\t\t\t\t\tfor (let i = 1; i < colors.length; i++) {\r\n\t\t\t\t\t\tconst sign2 = colors[i].lab()[0] - colors[i - 1].lab()[0]\r\n\t\t\t\t\t\tif (0 == sign) {\r\n\t\t\t\t\t\t\tsign = sign2\r\n\t\t\t\t\t\t} else if (sign * sign2 < 0) {\r\n\t\t\t\t\t\t\tthrow new Error(\"scale color lightnesses must be monotonic\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._correctLightness = enableCorrectLightness\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the padding.\r\n\t\t * @returns [paddingLeft, paddingRight]\r\n\t\t */\r\n\t\tpublic padding(): [number, number]\r\n\t\t/**\r\n\t\t * Set the padding. Positive values will \"cut off\" the ends of gradient, while negative values will add a\r\n\t\t * section of constant color at the ends.\r\n\t\t * @example chroma.scale(\"red\", \"white\").padding(0.2)\r\n\t\t * @example chroma.scale(\"red\", \"white\").padding(0.1)(0) // == chroma('#ff1a1a'), instead of red\r\n\t\t * @example chroma.scale(\"red\", \"white\").padding(-0.1)(0) // == chroma('red')\r\n\t\t * @param paddingLeft padding on left side.(lower-valued end of the interval).\r\n\t\t * @param paddingRight padding on right (higher-valued end of the interval).\r\n\t\t * default=paddingLeft\r\n\t\t */\r\n\t\tpublic padding(paddingLeft: number, paddingRight?: number): this\r\n\t\tpublic padding(paddingLeft?: number, paddingRight: number | undefined = paddingLeft) {\r\n\t\t\tif (!paddingLeft) {\r\n\t\t\t\treturn [this._paddingLeft, this._paddingRight]\r\n\t\t\t}\r\n\t\t\tthis._paddingLeft = paddingLeft\r\n\t\t\tthis._paddingRight = paddingRight!\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get a number of equidistant colors.\r\n\t\t * @param numColors The number of colors to return.\r\n\t\t * @param format Output format. Defaults to `\"hex\"`. Pass `false` to get {@link Color} objects.\r\n\t\t * @returns If `numColors` is `undefined`, the colors which define this [Scale]. If `numColors` is 1,\r\n\t\t * `[this((min + max) / 2)]`. Otherwise, an array where the first element is `this(min)`, the last one is\r\n\t\t * `this(max)` and the rest are equidistant samples between min and max.\r\n\t\t * @example chroma.scale('OrRd').colors(5)\r\n\t\t * @example chroma.scale(['white', 'black']).colors(12)\r\n\t\t */\r\n\t\tpublic colors(numColors?: number, format: ColorFormat | false = \"hex\") {\r\n\t\t\tlet result: Color[]\r\n\t\t\tif (undefined === numColors) {\r\n\t\t\t\tresult = (this._colors as Color[]).slice()\r\n\t\t\t} else if (numColors == 1) {\r\n\t\t\t\tresult = [this._color((this._min + this._max) / 2)]\r\n\t\t\t} else if (numColors > 1) {\r\n\t\t\t\tresult = Array.from({ length: numColors }, (_, i) =>\r\n\t\t\t\t\tthis._color(lerp(this._min, this._max, i / (numColors - 1))),\r\n\t\t\t\t)\r\n\t\t\t} else {\r\n\t\t\t\t// returns all colors based on the defined classes\r\n\t\t\t\tlet samples\r\n\t\t\t\tif (this._classes && this._classes.length > 2) {\r\n\t\t\t\t\tsamples = Array.from(\r\n\t\t\t\t\t\t{ length: this._classes.length - 1 },\r\n\t\t\t\t\t\t(_, i) => (this._classes![i] + this._classes![i + 1]) * 0.5,\r\n\t\t\t\t\t)\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsamples = this.domain() // TODO?!\r\n\t\t\t\t}\r\n\t\t\t\tresult = samples.map(s => this._color(s))\r\n\t\t\t}\r\n\r\n\t\t\treturn format ? result.map(c => c[format]()) : result\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get whether the cache is enabled. Defaults to true.\r\n\t\t */\r\n\t\tpublic cache(): boolean\r\n\t\t/**\r\n\t\t * Enable or disable the cache.\r\n\t\t * @param enableCache Whether the cache should be enabled.\r\n\t\t */\r\n\t\tpublic cache(enableCache: boolean): this\r\n\t\tpublic cache(enableCache?: boolean) {\r\n\t\t\tif (undefined === enableCache) {\r\n\t\t\t\treturn !!this._cache\r\n\t\t\t}\r\n\t\t\tthis._cache = enableCache ? this._cache || new Map() : undefined\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the current gamma value. Defaults to 1.\r\n\t\t */\r\n\t\tpublic gamma(): number\r\n\t\t/**\r\n\t\t * Set the gamma value. Gamma-correction can be used to \"shift\" a scale's center more the the beginning (gamma <\r\n\t\t * 1) or end (gamma > 1), typically used to \"even\" the lightness gradient. Default is 1.\r\n\t\t * @example chroma.scale('YlGn').gamma(0.5)\r\n\t\t * @example chroma.scale('YlGn').gamma(1)\r\n\t\t * @example chroma.scale('YlGn').gamma(2)\r\n\t\t */\r\n\t\tpublic gamma(gamma: number): this\r\n\t\tpublic gamma(gamma?: number) {\r\n\t\t\tif (undefined === gamma) {\r\n\t\t\t\treturn this._gamma\r\n\t\t\t}\r\n\t\t\tthis._gamma = gamma\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\tprivate _at(t: number) {\r\n\t\t\tconst c = this._color(t)\r\n\t\t\treturn this._out ? c[this._out]() : c\r\n\t\t}\r\n\r\n\t\tprivate _init(colorsOrFunction: Color[] | ((t: number) => Color)) {\r\n\t\t\tthis._colors = colorsOrFunction\r\n\t\t\tif (\"function\" != typeof colorsOrFunction) {\r\n\t\t\t\tthis._pos = colorsOrFunction.map((_, i) => i / (colorsOrFunction.length - 1))\r\n\t\t\t}\r\n\t\t\tthis._mode = \"rgb\"\r\n\t\t\tthis.domain(0, 1)\r\n\t\t\tthis._paddingLeft = 0\r\n\t\t\tthis._paddingRight = 0\r\n\t\t\tthis._correctLightness = false\r\n\t\t\tthis._cache = new Map()\r\n\t\t\tthis._gamma = 1\r\n\t\t}\r\n\r\n\t\tprivate _getClass(value: number) {\r\n\t\t\treturn this._classes!.findIndex(cls => value <= cls) - 1\r\n\t\t}\r\n\r\n\t\tprivate _color(val: number, bypassMap = false) {\r\n\t\t\tlet t\r\n\t\t\tif (!bypassMap) {\r\n\t\t\t\tconst min = this._min,\r\n\t\t\t\t\tmax = this._max\r\n\t\t\t\tif (this._classes && this._classes.length > 2) {\r\n\t\t\t\t\tconst c = this._getClass(val)\r\n\t\t\t\t\tt = c / (this._classes.length - 2)\r\n\t\t\t\t} else if (max !== min) {\r\n\t\t\t\t\tt = (val - min) / (max - min)\r\n\t\t\t\t} else {\r\n\t\t\t\t\tt = 1\r\n\t\t\t\t}\r\n\t\t\t\tif (this._correctLightness) {\r\n\t\t\t\t\tt = this._tCorrectedLightness(t)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tt = val\r\n\t\t\t}\r\n\t\t\tt = t ** this._gamma\r\n\t\t\tt = (this._paddingLeft + t) / (1 + this._paddingLeft + this._paddingRight)\r\n\t\t\t//\tt = this._paddingLeft + t * (1 - this._paddingLeft - this._paddingRight)\r\n\t\t\tt = clamp(t, 0, 1)\r\n\t\t\tconst tHash = t\r\n\t\t\tconst cacheResult = this._cache && this._cache.get(tHash)\r\n\t\t\tif (cacheResult) {\r\n\t\t\t\treturn cacheResult\r\n\t\t\t} else {\r\n\t\t\t\tlet col: Color\r\n\t\t\t\tif (Array.isArray(this._colors)) {\r\n\t\t\t\t\tfor (let i = 0; i < this._pos!.length; i++) {\r\n\t\t\t\t\t\tconst p = this._pos![i]\r\n\t\t\t\t\t\tif (t <= p) {\r\n\t\t\t\t\t\t\tcol = this._colors[i]\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (t >= p && i == this._pos!.length - 1) {\r\n\t\t\t\t\t\t\tcol = this._colors[i]\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (t > p && t < this._pos![i + 1]) {\r\n\t\t\t\t\t\t\tt = (t - p) / (this._pos![i + 1] - p)\r\n\t\t\t\t\t\t\tcol = mix(this._colors[i], this._colors[i + 1], t, this._mode)\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcol = this._colors(t)\r\n\t\t\t\t}\r\n\t\t\t\tif (this._cache) {\r\n\t\t\t\t\t// tslint:disable-next-line\r\n\t\t\t\t\tthis._cache.set(tHash, col!)\r\n\t\t\t\t}\r\n\t\t\t\t// tslint:disable-next-line\r\n\t\t\t\treturn col!\r\n\t\t\t}\r\n\t\t}\r\n\t\tprivate _tCorrectedLightness(t0_1: number) {\r\n\t\t\tconst L0 = this._color(0, true).lab()[0]\r\n\t\t\tconst L1 = this._color(1, true).lab()[0]\r\n\t\t\tconst L_ideal = lerp(L0, L1, t0_1)\r\n\t\t\treturn newtonIterate1d(t => this._color(t, true).lab()[0] - L_ideal, t0_1, 8)\r\n\t\t}\r\n\t\tprivate _resetCache() {\r\n\t\t\tif (this._cache) this._cache.clear()\r\n\t\t}\r\n\t}\r\n\r\n\texport namespace scales {\r\n\t\t/**\r\n\t\t * @example chroma.scales.cool()\r\n\t\t */\r\n\t\texport function cool() {\r\n\t\t\treturn scale([hsl(180, 1, 0.9), hsl(250, 0.7, 0.4)])\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @example chroma.scales.hot()\r\n\t\t */\r\n\t\texport function hot() {\r\n\t\t\treturn scale([\"#000\", \"#f00\", \"#ff0\", \"#fff\"]).mode(\"rgb\")\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the WCAG contrast ratio between two colors. A minimum contrast of 4.5:1\r\n\t * [is recommended](http://www.w3.org/TR/WCAG20-TECHS/G18.html) to ensure that text is still readable against a\r\n\t * background color.\r\n\t *\r\n\t * @param a\r\n\t * @param b\r\n\t */\r\n\texport function contrast(a: Chromable, b: Chromable) {\r\n\t\tconst l1 = chroma(a).luminance()\r\n\t\tconst l2 = chroma(b).luminance()\r\n\t\tif (l1 > l2) {\r\n\t\t\treturn (l1 + 0.05) / (l2 + 0.05)\r\n\t\t} else {\r\n\t\t\treturn (l2 + 0.05) / (l1 + 0.05)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Compute the [euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance#Three_dimensions) between two colors.\r\n\t * @param a First color.\r\n\t * @param b Second color.\r\n\t * @param mode The color space in which to compute the distance. Defaults to \"lab\".\r\n\t * @example chroma.distance('#fff', '#ff0', 'rgb')\r\n\t * @example chroma.distance('#fff', '#f0f', 'rgb')\r\n\t * @example chroma.distance('#fff', '#ff0')\r\n\t * @example chroma.distance('#fff', '#f0f')\r\n\t */\r\n\texport function distance(a: Chromable, b: Chromable, mode: ColorMode = \"lab\") {\r\n\t\tconst l1 = chroma(a)[mode]()\r\n\t\tconst l2 = chroma(b)[mode]()\r\n\t\tconst channelDifferences = l1.map(\r\n\t\t\t(channelValue: number, channelIndex: number) => channelValue - l2[channelIndex],\r\n\t\t)\r\n\t\treturn hypot(...channelDifferences)\r\n\t}\r\n\r\n\t/**\r\n\t * Computes color difference as developed by the Colour Measurement Committee of the Society of Dyers and Colourists\r\n\t * (CMC) in 1984. The implementation is adapted from Bruce Lindbloom. The parameters L and C are weighting factors\r\n\t * for lightness and chromaticity.\r\n\t * @param reference\r\n\t * @param sample\r\n\t * @param L\r\n\t * @param C\r\n\t * @example [r = '#ededee', s = '#edeeed', chroma.deltaE(r, s)]\r\n\t * @example [r = '#ececee', s = '#eceeec', chroma.deltaE(r, s)]\r\n\t * @example [r = '#e9e9ee', s = '#e9eee9', chroma.deltaE(r, s)]\r\n\t * @example [r = '#e4e4ee', s = '#e4eee4', chroma.deltaE(r, s)]\r\n\t * @example [r = '#e0e0ee', s = '#e0eee0', chroma.deltaE(r, s)]\r\n\t */\r\n\texport function deltaE(reference: Chromable, sample: Chromable, L = 1, C = 1) {\r\n\t\tconst [L1, a1, b1] = chroma(reference).lab()\r\n\t\tconst [L2, a2, b2] = chroma(sample).lab()\r\n\t\tconst c1 = sqrt(a1 * a1 + b1 * b1)\r\n\t\tconst c2 = sqrt(a2 * a2 + b2 * b2)\r\n\t\tconst sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + 0.01765 * L1)\r\n\t\tconst sc = (0.0638 * c1) / (1.0 + 0.0131 * c1) + 0.638\r\n\t\tconst h1 = norm360(c1 < 0.000001 ? 0.0 : (atan2(b1, a1) * 180.0) / PI)\r\n\t\tconst t =\r\n\t\t\th1 >= 164.0 && h1 <= 345.0\r\n\t\t\t\t? 0.56 + abs(0.2 * cos((PI * (h1 + 168.0)) / 180.0))\r\n\t\t\t\t: 0.36 + abs(0.4 * cos((PI * (h1 + 35.0)) / 180.0))\r\n\t\tconst c4 = c1 * c1 * c1 * c1\r\n\t\tconst f = sqrt(c4 / (c4 + 1900.0))\r\n\t\tconst sh = sc * (f * t + 1.0 - f)\r\n\t\tconst delL = L1 - L2\r\n\t\tconst delC = c1 - c2\r\n\t\tconst delA = a1 - a2\r\n\t\tconst delB = b1 - b2\r\n\t\tconst dH2 = delA * delA + delB * delB - delC * delC\r\n\t\tconst v1 = delL / (L * sl)\r\n\t\tconst v2 = delC / (C * sc)\r\n\t\tconst v3 = sh\r\n\t\treturn sqrt(v1 * v1 + v2 * v2 + dH2 / (v3 * v3))\r\n\t}\r\n\ttype DataInfo = {\r\n\t\tmin: number\r\n\t\tmax: number\r\n\t\tsum: number\r\n\t\tvalues: number[]\r\n\t\tcount: number\r\n\t\tdomain: [number, number]\r\n\t\tlimits(mode: LimitsMode, num: number): number[]\r\n\t}\r\n\texport function analyze(data: number[]): DataInfo {\r\n\t\tconst r: DataInfo = {\r\n\t\t\tmin: Infinity,\r\n\t\t\tmax: -Infinity,\r\n\t\t\tsum: 0,\r\n\t\t\tvalues: [] as number[],\r\n\t\t\tcount: 0,\r\n\t\t} as DataInfo\r\n\t\tfunction add(val: number) {\r\n\t\t\tif (val != undefined && !isNaN(val)) {\r\n\t\t\t\tr.values.push(val)\r\n\t\t\t\tr.sum += val\r\n\t\t\t\tif (val < r.min) r.min = val\r\n\t\t\t\tif (val > r.max) r.max = val\r\n\t\t\t\tr.count += 1\r\n\t\t\t}\r\n\t\t}\r\n\t\tdata.forEach(val => add(val))\r\n\t\tr.domain = [r.min, r.max]\r\n\t\tr.limits = function(mode, num) {\r\n\t\t\treturn limits(this, mode, num)\r\n\t\t}\r\n\t\treturn r\r\n\t}\r\n\r\n\ttype LimitsMode = \"e\" | \"q\" | \"l\" | \"k\"\r\n\texport function limits(data: number[] | DataInfo, mode: LimitsMode = \"e\", num = 7): number[] {\r\n\t\tconst info = Array.isArray(data) ? analyze(data) : data\r\n\t\tconst { min, max, values } = info\r\n\t\tvalues.sort((a, b) => a - b)\r\n\t\tif (num == 1) {\r\n\t\t\treturn [min, max]\r\n\t\t}\r\n\t\tif (mode.startsWith(\"c\")) {\r\n\t\t\treturn [min, max]\r\n\t\t} else if (mode.startsWith(\"e\")) {\r\n\t\t\treturn Array.from({ length: num + 1 }, (_, i) => lerp(min, max, i / num))\r\n\t\t} else if (mode.startsWith(\"l\")) {\r\n\t\t\tif (min <= 0) {\r\n\t\t\t\tthrow new Error(\"Logarithmic scales are only possible for values > 0\")\r\n\t\t\t}\r\n\t\t\tconst min_log = Math.LOG10E * log(min)\r\n\t\t\tconst max_log = Math.LOG10E * log(max)\r\n\t\t\treturn Array.from({ length: num + 1 }, (_, i) => 10 ** lerp(min_log, max_log, i / num))\r\n\t\t} else if (mode.startsWith(\"q\")) {\r\n\t\t\treturn Array.from({ length: num + 1 }, (_, i) => {\r\n\t\t\t\tconst p = ((values.length - 1) * i) / num\r\n\t\t\t\tconst pb = floor(p)\r\n\t\t\t\treturn pb == p ? values[pb] : lerp(values[pb], values[pb + 1], p - pb)\r\n\t\t\t})\r\n\t\t} else if (mode.startsWith(\"k\")) {\r\n\t\t\t// implementation based on\r\n\t\t\t// http://code.google.com/p/figue/source/browse/trunk/figue.js#336\r\n\t\t\t// simplified for 1-d input values\r\n\t\t\tconst n = values.length\r\n\t\t\tconst assignments = new Array(n)\r\n\t\t\tconst clusterSizes = new Array(num)\r\n\t\t\tlet repeat = true\r\n\t\t\tlet nb_iters = 0\r\n\t\t\tlet centroids = Array.from({ length: num + 1 }, (_, i) => lerp(min, max, i / num))\r\n\t\t\tdo {\r\n\t\t\t\t// assignment step\r\n\t\t\t\tclusterSizes.fill(0)\r\n\t\t\t\tfor (let i = 0; i < values.length; i++) {\r\n\t\t\t\t\tconst value = values[i]\r\n\t\t\t\t\tconst minDistIndex = indexOfMax(centroids, c => -abs(c - value))\r\n\t\t\t\t\tclusterSizes[minDistIndex]++\r\n\t\t\t\t\tassignments[i] = minDistIndex\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// update centroids step\r\n\t\t\t\tconst newCentroids = new Array(num).fill(0)\r\n\t\t\t\tfor (let i = 0; i < assignments.length; i++) {\r\n\t\t\t\t\tconst cluster = assignments[i]\r\n\t\t\t\t\tnewCentroids[cluster] += values[i]\r\n\t\t\t\t}\r\n\t\t\t\tfor (let j = 0; j < newCentroids.length; j++) {\r\n\t\t\t\t\tnewCentroids[j] /= clusterSizes[j]\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// check convergence\r\n\t\t\t\trepeat = newCentroids.some((nc, j) => nc != centroids[j])\r\n\t\t\t\tcentroids = newCentroids\r\n\t\t\t} while (nb_iters++ < 200 && repeat)\r\n\r\n\t\t\t// finished k-means clustering\r\n\t\t\t// the next part is borrowed from gabrielflor.it\r\n\t\t\tconst kClusters: number[][] = Array.from({ length: num }, () => [])\r\n\t\t\tfor (let i = 0; i < assignments.length; i++) {\r\n\t\t\t\tconst cluster = assignments[i]\r\n\t\t\t\tkClusters[cluster].push(values[i])\r\n\t\t\t}\r\n\t\t\tconst tmpKMeansBreaks = []\r\n\t\t\tfor (const kCluster of kClusters) {\r\n\t\t\t\ttmpKMeansBreaks.push(kCluster[0], kCluster[kCluster.length - 1])\r\n\t\t\t}\r\n\t\t\ttmpKMeansBreaks.sort((a, b) => a - b)\r\n\r\n\t\t\tconst limits = []\r\n\t\t\tlimits.push(tmpKMeansBreaks[0])\r\n\t\t\tfor (let i = 1; i < tmpKMeansBreaks.length; i += 2) {\r\n\t\t\t\tconst v = tmpKMeansBreaks[i]\r\n\t\t\t\tif (!isNaN(v) && limits.indexOf(v) == -1) {\r\n\t\t\t\t\tlimits.push(v)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn limits\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"unknown mode\")\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst interpolators: {\r\n\t[K in InterpolationMode]?: (color1: chroma.Color, color2: chroma.Color, f: number, mode: K) => chroma.Color\r\n} = {}\r\n\r\n// const _guess_formats: { p: number; test: (args: any[]) => ColorFormat | undefined }[] = []\r\nconst _input: {\r\n\t[mode: string]: (...args: any[]) => RGB | RGBA\r\n} = {}\r\n\r\nfunction linear_interpolator(col1: chroma.Color, col2: chroma.Color, f: number, m: ColorMode) {\r\n\tconst xyz1 = col1[m]()\r\n\tconst xyz2 = col2[m]()\r\n\treturn guess(\r\n\t\t[\r\n\t\t\tlerp(xyz1[0], xyz2[0], f),\r\n\t\t\tlerp(xyz1[1], xyz2[1], f),\r\n\t\t\tlerp(xyz1[2], xyz2[2], f),\r\n\t\t\tlerp(col1.alpha(), col2.alpha(), f),\r\n\t\t],\r\n\t\tm,\r\n\t)\r\n}\r\ninterpolators.xyz = interpolators.rgb = interpolators.lab = linear_interpolator\r\n\r\ninterpolators.num = function(col1, col2, f) {\r\n\tconst n1 = col1.num()\r\n\tconst n2 = col2.num()\r\n\treturn chroma.num(lerp(n1, n2, f))\r\n}\r\n\r\ninterpolators.lrgb = function(col1, col2, f) {\r\n\tconst [r1, g1, b1, a1] = col1.rgba(false, false)\r\n\tconst [r2, g2, b2, a2] = col2.rgba(false, false)\r\n\treturn new chroma.Color(\r\n\t\tsqrt(r1 ** 2 * (1 - f) + r2 ** 2 * f),\r\n\t\tsqrt(g1 ** 2 * (1 - f) + g2 ** 2 * f),\r\n\t\tsqrt(b1 ** 2 * (1 - f) + b2 ** 2 * f),\r\n\t\tlerp(a1, a2, f),\r\n\t)\r\n}\r\n\r\nfunction _bezier(chromables: chroma.Chromable[]): (t: number) => chroma.Color {\r\n\tconst colors = chromables.map(c => chroma(c))\r\n\tconst [lab0, lab1, lab2, lab3] = colors.map(c => c.lab())\r\n\tif (2 == chromables.length) {\r\n\t\t// linear interpolation\r\n\t\treturn t => {\r\n\t\t\treturn chroma.lab([0, 1, 2].map(i => lerp(lab0[i], lab1[i], t)) as LAB)\r\n\t\t}\r\n\t} else if (3 == chromables.length) {\r\n\t\t// quadratic bezier interpolation\r\n\t\tconst bezier2 = (p0: number, p1: number, p2: number, t: number) =>\r\n\t\t\t(1 - t) ** 2 * p0 + 2 * (1 - t) * t * p1 + t ** 2 * p2\r\n\t\treturn t => chroma.lab([0, 1, 2].map(i => bezier2(lab0[i], lab1[i], lab2[i], t)) as LAB)\r\n\t} else if (4 == chromables.length) {\r\n\t\t// cubic bezier interpolation\r\n\t\tconst bezier3 = (p0: number, p1: number, p2: number, p3: number, t: number) =>\r\n\t\t\t(1 - t) ** 3 * p0 + 3 * (1 - t) ** 2 * t * p1 + 3 * (1 - t) * t ** 2 * p2 + t ** 3 * p3\r\n\t\treturn t => chroma.lab([0, 1, 2].map(i => bezier3(lab0[i], lab1[i], lab2[i], lab3[i], t)) as LAB)\r\n\t} else if (5 == chromables.length) {\r\n\t\tconst I0 = _bezier(colors.slice(0, 3))\r\n\t\tconst I1 = _bezier(colors.slice(2, 5))\r\n\t\treturn t => (t < 0.5 ? I0(t * 2) : I1((t - 0.5) * 2))\r\n\t} else throw new Error()\r\n}\r\n\r\nfunction guess(args: any[], mode?: ColorFormat): chroma.Color {\r\n\tif (Array.isArray(args[0])) args = args[0]\r\n\tif (!mode) {\r\n\t\tif (args.length == 1 && args[0] in chroma.w3cx11) {\r\n\t\t\tmode = \"name\"\r\n\t\t} else if (args.length == 1 && \"string\" == typeof args[0]) {\r\n\t\t\tmode = \"css\"\r\n\t\t} else if (args.length == 3) {\r\n\t\t\tmode = \"rgb\"\r\n\t\t} else if (args.length == 4 && \"number\" == typeof args[3] && args[3] >= 0 && args[3] <= 1) {\r\n\t\t\tmode = \"rgb\"\r\n\t\t} else if (args.length == 1 && \"number\" == typeof args[0] && args[0] >= 0 && args[0] <= 0xffffff) {\r\n\t\t\tmode = \"num\"\r\n\t\t} else throw new Error(\"could not guess mode. args \" + JSON.stringify(args))\r\n\t}\r\n\tconst [r, g, b, a] = _input[mode](...args)\r\n\treturn new chroma.Color(r, g, b, a)\r\n}\r\n\r\nfunction _average_lrgb(colors: chroma.Color[]) {\r\n\tlet rSquareSum = 0,\r\n\t\tgSquareSum = 0,\r\n\t\tbSquareSum = 0,\r\n\t\talphaSum = 0\r\n\tfor (const col of colors) {\r\n\t\tconst [r, g, b, alpha] = col.rgba(false, false)\r\n\t\trSquareSum += r ** 2\r\n\t\tgSquareSum += g ** 2\r\n\t\tbSquareSum += b ** 2\r\n\t\talphaSum += alpha\r\n\t}\r\n\treturn new chroma.Color(\r\n\t\tsqrt(rSquareSum) / colors.length,\r\n\t\tsqrt(gSquareSum) / colors.length,\r\n\t\tsqrt(bSquareSum) / colors.length,\r\n\t\talphaSum / colors.length,\r\n\t)\r\n}\r\n\r\nfunction hex2rgb(hex: string): RGBA | RGB {\r\n\tlet m\r\n\tif ((m = hex.match(/^#?([A-F\\d]{2})([A-F\\d]{2})([A-F\\d]{2})([A-F\\d]{2})?$/i))) {\r\n\t\treturn [parseInt(m[1], 16), parseInt(m[2], 16), parseInt(m[3], 16), m[4] ? parseInt(m[4], 16) / 255 : 1]\r\n\t} else if ((m = hex.match(/^#?([A-F\\d])([A-F\\d])([A-F\\d])([A-F\\d])?$/i))) {\r\n\t\treturn [\r\n\t\t\tparseInt(m[1], 16) * 0x11,\r\n\t\t\tparseInt(m[2], 16) * 0x11,\r\n\t\t\tparseInt(m[3], 16) * 0x11,\r\n\t\t\tm[4] ? (parseInt(m[4], 16) * 0x11) / 255 : 1,\r\n\t\t]\r\n\t}\r\n\tthrow new Error(\"invalid hex color: \" + hex)\r\n}\r\n// color mode, i.e. representation as array of number\r\nexport type ColorMode = \"rgb\" | \"cmyk\" | \"lab\" | \"hsv\" | \"hsi\" | \"hcg\" | \"hsl\" | \"gl\" | \"lch\" | \"xyz\"\r\nexport type InterpolationMode = \"rgb\" | \"lab\" | \"hsv\" | \"hsi\" | \"hcg\" | \"hsl\" | \"lch\" | \"xyz\" | \"lrgb\" | \"num\"\r\nexport type ColorFormat = ColorMode | \"hex\" | \"num\" | \"name\" | \"kelvin\" | \"css\"\r\n/**\r\n * CMYK color space\r\n * @see https://en.wikipedia.org/wiki/cmyk_color_model\r\n * [cyan, magenta, yellow, alpha1]\r\n */\r\ntype CMYK = [number, number, number, number]\r\n/**\r\n * WebGL colors. Like RGB, but floats in [0; 1] instead of 0-255.\r\n * [red255, green255, blue255, alpha1]\r\n */\r\ntype GL = [number, number, number, number]\r\n/**\r\n * Red, green, blue ranging from 0-255.\r\n * Can be floats and outside the above range internally.\r\n */\r\ntype RGB = [number, number, number]\r\n/**\r\n * RGB plus alpha ranging from 0-1\r\n * [red255, green255, blue255, alpha1]\r\n */\r\ntype RGBA = [number, number, number, number]\r\n/**\r\n * CIELAB color space\r\n * [lightness, A*, B*]\r\n * @see https://en.wikipedia.org/wiki/CIELAB_color_space\r\n */\r\ntype LAB = [number, number, number]\r\n/**\r\n * Cylindrical representation of CIELAB\r\n * @see https://en.wikipedia.org/wiki/CIELAB_color_space#Cylindrical_representation:_CIELCh_or_CIEHLC\r\n *\r\n */\r\ntype LCH = [number, number, number]\r\n/**\r\n * @see https://en.wikipedia.org/wiki/HSL_and_HSV\r\n * [hueDegrees, saturation1, lightness1]\r\n */\r\ntype HSL = [number, number, number]\r\n/**\r\n * @see https://en.wikipedia.org/wiki/HSL_and_HSV\r\n * [hueDegrees, saturation1, value1]\r\n */\r\ntype HSV = [number, number, number]\r\n/**\r\n * @see https://en.wikipedia.org/w/index.php?title=HSI_color_space&redirect=no\r\n * [hueDegrees, saturation1, intensity1]\r\n */\r\ntype HSI = [number, number, number]\r\ntype XYZ = [number, number, number]\r\n/**\r\n * HCG Color Model\r\n * See https://github.com/acterhd/hcg-color\r\n * A color value in the HCG format is an array of three numbers [h, c, g], where\r\n * `h` is the hue as an angle in degrees [0; 360)\r\n * `c` is the chroma value in [0; 1]\r\n * `g` is the gray value in [0; 1]\r\n */\r\ntype HCG = [number, number, number]\r\n\r\ninterface ColorModes {\r\n\tcmyk: CMYK\r\n\tgl: GL\r\n\trgb: RGB\r\n\trgba: RGBA\r\n\tlab: LAB\r\n\thsl: HSL\r\n\thsv: HSV\r\n\thsi: HSI\r\n\txyz: XYZ\r\n\thcg: HCG\r\n\tlch: LCH\r\n\thex: string\r\n\tnum: number\r\n\tname: string\r\n\tkelvin: number\r\n\tcss: string\r\n}\r\nfunction rgb2hex(r255: number, g255: number, b255: number, a1: number, mode: \"rgb\" | \"rgba\" | \"argb\" = \"rgb\") {\r\n\tr255 = clamp(round(r255), 0, 255)\r\n\tg255 = clamp(round(g255), 0, 255)\r\n\tb255 = clamp(round(b255), 0, 255)\r\n\tconst rgb = (r255 << 16) | (g255 << 8) | b255\r\n\tconst rgbString = rgb.toString(16).padStart(6, \"0\")\r\n\tconst alphaString = round(clamp(a1) * 255)\r\n\t\t.toString(16)\r\n\t\t.padStart(2, \"0\")\r\n\treturn \"#\" + (\"argb\" == mode ? alphaString + rgbString : \"rgba\" == mode ? rgbString + alphaString : rgbString)\r\n}\r\n\r\n_input.lrgb = _input.rgb\r\n\r\n_input.hex = hex2rgb\r\n_input.hsl = hsl2rgb\r\nfunction norm360(degrees: number) {\r\n\treturn ((degrees % 360) + 360) % 360\r\n}\r\n\r\n_input.hsv = hsv2rgb\r\n\r\nfunction num2rgb(num: number): RGBA {\r\n\tif (!(\"number\" == typeof num && num >= 0 && num <= 0xffffff)) {\r\n\t\tthrow new Error(\"unknown num color: \" + num)\r\n\t}\r\n\tconst r = num >> 16\r\n\tconst g = (num >> 8) & 0xff\r\n\tconst b = num & 0xff\r\n\treturn [r, g, b, 1]\r\n}\r\n\r\nfunction rgb2num(r255: number, g255: number, b255: number, a1: number = 1, mode: \"rgb\" | \"rgba\" | \"argb\" = \"rgb\") {\r\n\tconst rgbNum = (round(r255) << 16) | (round(g255) << 8) | round(b255)\r\n\tif (\"rgb\" === mode) {\r\n\t\treturn rgbNum\r\n\t} else if (\"rgba\" === mode) {\r\n\t\treturn (rgbNum << 8) | (round(a1 * 255) << 24)\r\n\t} else {\r\n\t\treturn (round(a1 * 255) << 24) | rgbNum\r\n\t}\r\n}\r\n\r\n_input.num = num2rgb\r\n\r\nconst WS = \"\\\\s*\"\r\nconst FLOAT = \"([+-]?(?:\\\\d*\\\\.?)?\\\\d+(?:[eE][+-]?\\\\d+)?)\"\r\nconst CSS_RGB_REGEX = new RegExp(\r\n\t[\"^rgba?\\\\(\", FLOAT, \",\", FLOAT, \",\", FLOAT, \"(?:,\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS),\r\n\t\"i\",\r\n)\r\nconst CSS_RGB_WS_REGEX = new RegExp([\"^rgba?\\\\(\", FLOAT, FLOAT, FLOAT, \"(?:/\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS), \"i\")\r\nconst CSS_RGB_PERCENT_REGEX = new RegExp(\r\n\t[\"^rgba?\\\\(\", FLOAT + \"%\", \",\", FLOAT + \"%\", \",\", FLOAT + \"%\", \"(?:,\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS),\r\n\t\"i\",\r\n)\r\nconst CSS_RGB_WS_PERCENT_REGEX = new RegExp(\r\n\t[\"^rgba?\\\\(\", FLOAT + \"%\", FLOAT + \"%\", FLOAT + \"%\", \"(?:/\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS),\r\n\t\"i\",\r\n)\r\nconst CSS_HSL_REGEX = new RegExp(\r\n\t[\"^hsla?\\\\(\", FLOAT + \"(deg|rad|turn)?\", \",\", FLOAT + \"%\", \",\", FLOAT + \"%\", \"(?:,\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(\r\n\t\tWS,\r\n\t),\r\n\t\"i\",\r\n)\r\nconst CSS_HSL_WS_REGEX = new RegExp(\r\n\t[\"^hsla?\\\\(\", FLOAT + \"(deg|rad|turn)?\\\\s+\" + FLOAT + \"%\", FLOAT + \"%\", \"(?:/\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS),\r\n\t\"i\",\r\n)\r\nfunction css2rgb(css: string): RGBA | RGB {\r\n\tif (chroma.w3cx11 && (chroma.w3cx11 as any)[css.toLowerCase()]) {\r\n\t\treturn num2rgb((chroma.w3cx11 as any)[css.toLowerCase()])\r\n\t}\r\n\tlet m\r\n\tif ((m = css.match(CSS_RGB_REGEX) || css.match(CSS_RGB_WS_REGEX))) {\r\n\t\treturn [\r\n\t\t\tclamp(+m[1], 0, 255),\r\n\t\t\tclamp(+m[2], 0, 255),\r\n\t\t\tclamp(+m[3], 0, 255),\r\n\t\t\tm[4] ? clamp(m[5] ? +m[4] / 100 : +m[4]) : 1,\r\n\t\t]\r\n\t} else if ((m = css.match(CSS_RGB_PERCENT_REGEX) || css.match(CSS_RGB_WS_PERCENT_REGEX))) {\r\n\t\treturn [\r\n\t\t\tclamp(+m[1] / 100) * 255,\r\n\t\t\tclamp(+m[2] / 100) * 255,\r\n\t\t\tclamp(+m[3] / 100) * 255,\r\n\t\t\tm[4] ? clamp(m[5] ? +m[4] / 100 : +m[4]) : 1,\r\n\t\t]\r\n\t} else if ((m = css.match(CSS_HSL_REGEX) || css.match(CSS_HSL_WS_REGEX))) {\r\n\t\tconst CONVERSION = { deg: 1, rad: RAD2DEG, turn: 360 }\r\n\t\tconst angleUnit = (m[2] ? m[2].toLowerCase() : \"deg\") as \"deg\" | \"rad\" | \"turn\"\r\n\t\treturn hsl2rgb(\r\n\t\t\t(((+m[1] * CONVERSION[angleUnit]) % 360) + 360) % 360,\r\n\t\t\tclamp(+m[3] / 100),\r\n\t\t\tclamp(+m[4] / 100),\r\n\t\t\tm[5] ? clamp(m[6] ? +m[5] / 100 : +m[5]) : 1,\r\n\t\t)\r\n\t} else {\r\n\t\treturn hex2rgb(css)\r\n\t}\r\n}\r\n\r\nfunction rgb2css(r: number, g: number, b: number, a = 1) {\r\n\tif (a >= 1) {\r\n\t\treturn \"rgb(\" + [r, g, b].map(round).join(\",\") + \")\"\r\n\t} else {\r\n\t\treturn \"rgba(\" + [r, g, b].map(round).join(\",\") + \",\" + a + \")\"\r\n\t}\r\n}\r\n\r\nfunction rnd(a: any) {\r\n\treturn round(a * 100) / 100\r\n}\r\n\r\nfunction hsl2css([h, s, l]: HSL, alpha: number) {\r\n\tconst mode = alpha < 1 ? \"hsla\" : \"hsl\"\r\n\treturn (\r\n\t\tmode +\r\n\t\t\"(\" +\r\n\t\trnd(h) +\r\n\t\t\",\" +\r\n\t\trnd(s * 100) +\r\n\t\t\"%\" +\r\n\t\t\",\" +\r\n\t\trnd(l * 100) +\r\n\t\t\"%\" +\r\n\t\t(\"hsla\" == mode ? \",\" + rnd(alpha) : \"\") +\r\n\t\t\")\"\r\n\t)\r\n}\r\n\r\n_input.css = css2rgb\r\n\r\n_input.name = function(name) {\r\n\treturn num2rgb((chroma.w3cx11 as any)[name])\r\n}\r\n\r\nfunction lch2lab(l: number, c: number, hueDegrees: number): LAB {\r\n\t/*\r\n    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\r\n    These formulas were invented by David Dalrymple to obtain maximum contrast without going\r\n    out of gamut if the parameters are in the range 0-1.\r\n\r\n    A saturation multiplier was added by Gregor Aisch\r\n     */\r\n\treturn [l, cos(hueDegrees * DEG2RAD) * c, sin(hueDegrees * DEG2RAD) * c]\r\n}\r\n\r\nfunction lch2rgb(l: number, c: number, hDegrees: number, alpha1 = 1): RGBA {\r\n\tconst [, a, b] = lch2lab(l, c, hDegrees)\r\n\treturn cielab2rgb(l, a, b, alpha1)\r\n}\r\n\r\nfunction lab2lch(l: number, a: number, b: number): LCH {\r\n\tconst c = hypot(a, b)\r\n\tconst h = (atan2(b, a) * RAD2DEG + 360) % 360\r\n\treturn [l, c, h]\r\n}\r\n\r\nfunction rgb2lch(r255: number, g255: number, b255: number) {\r\n\tconst [l, a, b2] = rgb2lab(r255, g255, b255)\r\n\treturn lab2lch(l, a, b2)\r\n}\r\n\r\n_input.lch = lch2rgb\r\n\r\nfunction rgb2cmyk(r255: number, g255: number, b255: number): CMYK {\r\n\tr255 /= 255\r\n\tg255 /= 255\r\n\tb255 /= 255\r\n\tconst k = 1 - max(r255, g255, b255)\r\n\tif (1 == k) return [0, 0, 0, 1]\r\n\tconst c = (1 - r255 - k) / (1 - k)\r\n\tconst m = (1 - g255 - k) / (1 - k)\r\n\tconst y = (1 - b255 - k) / (1 - k)\r\n\treturn [c, m, y, k]\r\n}\r\n\r\nfunction cmyk2rgb(c1: number, m1: number, y1: number, k1: number, alpha1 = 1): RGBA {\r\n\tif (k1 == 1) {\r\n\t\treturn [0, 0, 0, alpha1]\r\n\t}\r\n\tconst r255 = 255 * (1 - c1) * (1 - k1)\r\n\tconst g255 = 255 * (1 - m1) * (1 - k1)\r\n\tconst b255 = 255 * (1 - y1) * (1 - k1)\r\n\treturn [r255, g255, b255, alpha1]\r\n}\r\n\r\n_input.cmyk = cmyk2rgb\r\n\r\n_input.gl = function(r: number, g: number, b: number, a: number = 1): RGBA {\r\n\treturn [r * 255, g * 255, b * 255, a]\r\n}\r\n\r\n//function rgb2luminance(r: number, g: number, b: number) {\r\n//\t// https://en.wikipedia.org/wiki/Relative_luminance\r\n//\tconst [, Y] = rgb2xyz(r, g, b)\r\n//\treturn Y\r\n//}\r\n\r\nfunction rgbChannel2RgbLinear(x255: number) {\r\n\tconst x1 = x255 / 255\r\n\t// http://entropymine.com/imageworsener/srgbformula/\r\n\tif (x1 <= 0.04045) {\r\n\t\treturn x1 / 12.92\r\n\t} else {\r\n\t\treturn ((x1 + 0.055) / 1.055) ** 2.4\r\n\t}\r\n}\r\nfunction rgbLinearChannel2Rgb(xLinear1: number) {\r\n\tif (xLinear1 <= 0.0031308) {\r\n\t\treturn 255 * (12.92 * xLinear1)\r\n\t} else {\r\n\t\treturn 255 * ((1 + 0.055) * xLinear1 ** (1 / 2.4) - 0.055)\r\n\t}\r\n}\r\n\r\nfunction kelvin2rgb(kelvin: number): RGB {\r\n\tconst t = kelvin / 100\r\n\tlet r, g, b\r\n\tif (t < 66) {\r\n\t\tr = 255\r\n\t\tg = -155.25485562709179 - 0.44596950469579133 * (t - 2) + 104.49216199393888 * log(t - 2)\r\n\t\tb = t < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (t - 10) + 115.67994401066147 * log(t - 10)\r\n\t} else {\r\n\t\tr = 351.97690566805693 + 0.114206453784165 * (t - 55) - 40.25366309332127 * log(t - 55)\r\n\t\tg = 325.4494125711974 + 0.07943456536662342 * (t - 50) - 28.0852963507957 * log(t - 50)\r\n\t\tb = 255\r\n\t}\r\n\treturn [r, g, b]\r\n}\r\n\r\n_input.rgb = (...args: number[]) => args as RGB\r\n\r\nfunction rgb2kelvin(r255: number, g255: number, b255: number) {\r\n\tconsole.log(b255 - r255)\r\n\tif (g255 + b255 < 158.61) {\r\n\t\tconsole.log(\"0 < t < 20\")\r\n\t\t// calc from green\r\n\t\treturn round(\r\n\t\t\tnewtonIterate1d(\r\n\t\t\t\tt => g255 - (-155.25485562709179 - 0.44596950469579133 * (t - 2) + 104.49216199393888 * log(t - 2)),\r\n\t\t\t\t15,\r\n\t\t\t\t4,\r\n\t\t\t) * 100,\r\n\t\t)\r\n\t\treturn (Math.E ** ((g255 + 155.25485562709179 + 0.44596950469579133 * (15 - 2)) / 104.49216199393888) + 2) * 100\r\n\t} else if (b255 - r255 < 0) {\r\n\t\tconsole.log(\"20 < t < 66\")\r\n\t\treturn round(\r\n\t\t\tnewtonIterate1d(\r\n\t\t\t\tt => b255 - (-254.76935184120902 + 0.8274096064007395 * (t - 10) + 115.67994401066147 * log(t - 10)),\r\n\t\t\t\t43,\r\n\t\t\t\t4,\r\n\t\t\t) * 100,\r\n\t\t)\r\n\t\treturn (\r\n\t\t\t(Math.E ** ((b255 + 254.76935184120902 - 0.8274096064007395 * (43 - 10)) / 115.67994401066147) + 10) * 100\r\n\t\t)\r\n\t} else {\r\n\t\tconsole.log(\"0 < t < 400, start= \" + (-1.4 * (r255 + g255) + 755))\r\n\t\treturn round(\r\n\t\t\tnewtonIterate1d(\r\n\t\t\t\tt => r255 - (351.97690566805693 + 0.114206453784165 * (t - 55) - 40.25366309332127 * log(t - 55)),\r\n\t\t\t\t-1.4 * (r255 + g255) + 755,\r\n\t\t\t\t8,\r\n\t\t\t) * 100,\r\n\t\t)\r\n\t\treturn ((r255 / 329.698727446) ** (1 / -0.1332047592) + 60) * 100\r\n\t}\r\n\treturn newtonIterate1d(\r\n\t\tk => {\r\n\t\t\tconst eps = 1e-9\r\n\t\t\tconst [kr, kg, kb] = kelvin2rgb(k)\r\n\t\t\tconst [kr2, kg2, kb2] = kelvin2rgb(k + eps)\r\n\t\t\tconst dkr = (kr2 - kr) / eps,\r\n\t\t\t\tdkg = (kg2 - kg) / eps,\r\n\t\t\t\tdkb = (kb2 - kb) / eps\r\n\t\t\treturn dkr * (kr - r255) + dkg * (kg - g255) + dkb * (kb - b255)\r\n\r\n\t\t\treturn kb / kr - b255 / r255\r\n\t\t},\r\n\t\t//1000,\r\n\t\t//40000,\r\n\t\tMath.E ** ((b255 / r255 + 2.5) / 0.4),\r\n\t\t20,\r\n\t\t//1e-6,\r\n\t)\r\n\tlet maxTemp = 40000\r\n\tlet minTemp = 1000\r\n\tconst eps = 0.4\r\n\tlet temp: number = 0\r\n\tlet rgb\r\n\twhile (maxTemp - minTemp > eps) {\r\n\t\ttemp = (maxTemp + minTemp) * 0.5\r\n\t\trgb = kelvin2rgb(temp)\r\n\t\tif (rgb[2] / rgb[0] >= b255 / r255) {\r\n\t\t\tmaxTemp = temp\r\n\t\t} else {\r\n\t\t\tminTemp = temp\r\n\t\t}\r\n\t}\r\n\treturn round(temp)\r\n}\r\n\r\n_input.temperature = _input.kelvin = _input.K = kelvin2rgb\r\n\r\nfunction blend_f(f: (c1: RGB, c2: RGB) => RGB) {\r\n\treturn function(bottom: chroma.Chromable, top: chroma.Chromable) {\r\n\t\tconst [r, g, b] = f(chroma(top).rgb(), chroma(bottom).rgb())\r\n\t\treturn chroma.rgb(r, g, b)\r\n\t}\r\n}\r\n\r\nfunction each(f: (a: number, b: number) => number) {\r\n\treturn function(c1: RGB, c2: RGB): RGB {\r\n\t\treturn c1.map((e, i) => f(e, c2[i])) as RGB\r\n\t}\r\n}\r\n\r\nfunction _screen(a: number, b: number) {\r\n\treturn 255 * (1 - (1 - a / 255) * (1 - b / 255))\r\n}\r\n\r\nfunction _overlay(a: number, b: number) {\r\n\tif (b < 128) {\r\n\t\treturn (2 * a * b) / 255\r\n\t} else {\r\n\t\treturn 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255))\r\n\t}\r\n}\r\n\r\nfunction _burn(a: number, b: number) {\r\n\treturn 255 * (1 - (1 - b / 255) / (a / 255))\r\n}\r\n\r\nfunction _dodge(a: number, b: number) {\r\n\tif (a == 255) {\r\n\t\treturn 255\r\n\t}\r\n\treturn 255 * min(1, b / 255 / (1 - a / 255))\r\n}\r\n\r\n/**\r\n * r, g, b can be in any interval (0-1 or 0-255)\r\n * @param r\r\n * @param g\r\n * @param b\r\n */\r\nfunction rgb2hexhue(r: number, g: number, b: number) {\r\n\tconst m = min(r, g, b)\r\n\tconst M = max(r, g, b)\r\n\tconst delta = M - m\r\n\tlet hueTurnX6 // angle as value between 0 and 6\r\n\tif (0 == delta) {\r\n\t\thueTurnX6 = 0\r\n\t} else if (r == M) {\r\n\t\t// second term to make sure the value is > 0\r\n\t\thueTurnX6 = (g - b) / delta + (g < b ? 6 : 0)\r\n\t} else if (g == M) {\r\n\t\thueTurnX6 = 2 + (b - r) / delta\r\n\t} else {\r\n\t\thueTurnX6 = 4 + (r - g) / delta\r\n\t}\r\n\treturn [hueTurnX6 * 60, m, M]\r\n}\r\nfunction hcxm2rgb(hueDegrees: number, c1: number, x1: number, m1: number, alpha1: number): RGBA {\r\n\tconst m255 = m1 * 255\r\n\tconst cm255 = c1 * 255 + m255\r\n\tconst xm255 = x1 * 255 + m255\r\n\tif (hueDegrees < 60) {\r\n\t\treturn [cm255, xm255, m255, alpha1]\r\n\t} else if (hueDegrees < 120) {\r\n\t\treturn [xm255, cm255, m255, alpha1]\r\n\t} else if (hueDegrees < 180) {\r\n\t\treturn [m255, cm255, xm255, alpha1]\r\n\t} else if (hueDegrees < 240) {\r\n\t\treturn [m255, xm255, cm255, alpha1]\r\n\t} else if (hueDegrees < 300) {\r\n\t\treturn [xm255, m255, cm255, alpha1]\r\n\t} else {\r\n\t\treturn [cm255, m255, xm255, alpha1]\r\n\t}\r\n}\r\n\r\n/**\r\n * https://en.wikipedia.org/w/index.php?title=HSL_and_HSV&oldid=856714654#From_HSL\r\n */\r\nfunction hsl2rgb(hueDegrees: number, s1: number, l1: number, alpha1 = 1): RGBA {\r\n\thueDegrees = norm360(hueDegrees)\r\n\tconst c1 = (1 - abs(2 * l1 - 1)) * s1\r\n\treturn hcxm2rgb(hueDegrees, c1, c1 * (1 - abs(((hueDegrees / 60) % 2) - 1)), l1 - c1 / 2, alpha1)\r\n}\r\nfunction rgb2hsl(r255: number, g255: number, b255: number): HSL {\r\n\tconst [hue, min1, max1] = rgb2hexhue(r255 / 255, g255 / 255, b255 / 255)\r\n\tconst l1 = (max1 + min1) / 2\r\n\tlet s1: number\r\n\tif (max1 == min1) {\r\n\t\ts1 = 0\r\n\t} else {\r\n\t\ts1 = l1 < 0.5 ? (max1 - min1) / (max1 + min1) : (max1 - min1) / (2 - max1 - min1)\r\n\t}\r\n\treturn [hue, s1, l1]\r\n}\r\n\r\nfunction hsv2rgb(hueDegrees: number, s1: number, v1: number, alpha1: number = 1): RGBA {\r\n\thueDegrees = norm360(hueDegrees)\r\n\tconst c1 = v1 * s1\r\n\treturn hcxm2rgb(hueDegrees, c1, c1 * (1 - abs(((hueDegrees / 60) % 2) - 1)), v1 - c1, alpha1)\r\n}\r\n\r\nfunction rgb2hsv(r255: number, g255: number, b255: number): HSV {\r\n\tconst [hue, min255, max255] = rgb2hexhue(r255, g255, b255)\r\n\tconst delta255 = max255 - min255\r\n\tconst v1 = max255 / 255.0\r\n\tconst s1 = max255 == 0 ? 0 : delta255 / max255\r\n\treturn [hue, s1, v1]\r\n}\r\n\r\nfunction hcg2rgb(hueDegrees: number, c1: number, g1: number, alpha1 = 1): RGBA {\r\n\thueDegrees = norm360(hueDegrees)\r\n\tconst p = g1 * (1 - c1)\r\n\treturn hcxm2rgb(hueDegrees, c1, c1 * (1 - abs(((hueDegrees / 60) % 2) - 1)), p, alpha1)\r\n}\r\n\r\nfunction rgb2hcg(r255: number, g255: number, b255: number): HCG {\r\n\tconst [hue, min255, max255] = rgb2hexhue(r255, g255, b255)\r\n\tconst c1 = (max255 - min255) / 255\r\n\tconst _g1 = c1 < 1 ? min255 / 255 / (1 - c1) : 0\r\n\treturn [hue, c1, _g1]\r\n}\r\n\r\n_input.hcg = hcg2rgb\r\n\r\nfunction cielab2rgb(LStar100: number, aStar: number, bStar: number, alpha = 1): RGBA {\r\n\tconst [x, y, z] = cielab2xyz(LStar100, aStar, bStar)\r\n\treturn xyz2rgb(x, y, z, alpha)\r\n}\r\n\r\nfunction cielab2xyz(LStar100: number, aStar: number, bStar: number) {\r\n\tfunction fInv(t: number) {\r\n\t\tif (t > LAB_delta) {\r\n\t\t\treturn t ** 3\r\n\t\t} else {\r\n\t\t\treturn LAB_3DeltaPow2 * (t - 4 / 29)\r\n\t\t}\r\n\t}\r\n\treturn [\r\n\t\tLAB_Xn * fInv((LStar100 + 16) / 116 + aStar / 500),\r\n\t\tLAB_Yn * fInv((LStar100 + 16) / 116),\r\n\t\tLAB_Zn * fInv((LStar100 + 16) / 116 - bStar / 200),\r\n\t]\r\n}\r\nfunction xyz2cielab(x: number, y: number, z: number): LAB {\r\n\t// https://en.wikipedia.org/w/index.php?title=CIELAB_color_space&oldid=849576085#Forward_transformation\r\n\tfunction f(t: number) {\r\n\t\tif (t > LAB_deltaPow3) {\r\n\t\t\treturn cbrt(t)\r\n\t\t} else {\r\n\t\t\treturn t / LAB_3DeltaPow2 + 4 / 29\r\n\t\t}\r\n\t}\r\n\treturn [116 * f(y / LAB_Yn) - 16, 500 * (f(x / LAB_Xn) - f(y / LAB_Yn)), 200 * (f(y / LAB_Yn) - f(z / LAB_Zn))]\r\n}\r\n\r\n// const LAB_CONSTANTS = {\r\nconst LAB_Kn = 18\r\nconst LAB_Xn = 0.95047\r\nconst LAB_Yn = 1\r\nconst LAB_Zn = 1.08883\r\nconst LAB_delta = 0.206896552 // delta = 6 / 29\r\nconst LAB_3DeltaPow2 = 0.12841855 // 3 * delta ** 2\r\nconst LAB_deltaPow3 = 0.008856452 // delta ** 3\r\n// }\r\n\r\nfunction rgb2lab(r255: number, g255: number, b255: number): RGB {\r\n\tconst [x, y, z] = rgb2xyz(r255, g255, b255)\r\n\treturn xyz2cielab(x, y, z)\r\n}\r\n\r\nfunction rgb2xyz(r255: number, g255: number, b255: number): XYZ {\r\n\t// https://en.wikipedia.org/wiki/SRGB#The_reverse_transformation\r\n\tconst r1Linear = rgbChannel2RgbLinear(r255)\r\n\tconst g1Linear = rgbChannel2RgbLinear(g255)\r\n\tconst b1Linear = rgbChannel2RgbLinear(b255)\r\n\tconst X = 0.4124564 * r1Linear + 0.3575761 * g1Linear + 0.1804375 * b1Linear\r\n\tconst Y = 0.2126729 * r1Linear + 0.7151522 * g1Linear + 0.072175 * b1Linear\r\n\tconst Z = 0.0193339 * r1Linear + 0.119192 * g1Linear + 0.9503041 * b1Linear\r\n\treturn [X, Y, Z]\r\n}\r\nfunction xyz2rgb(X1: number, Y1: number, Z1: number, alpha1 = 1): RGBA {\r\n\t// https://en.wikipedia.org/wiki/SRGB#The_forward_transformation_(CIE_XYZ_to_sRGB)\r\n\tconst r1Linear = 3.2404542 * X1 - 1.5371385 * Y1 - 0.4985314 * Z1\r\n\tconst g1Linear = -0.969266 * X1 + 1.8760108 * Y1 + 0.041556 * Z1\r\n\tconst b1Linear = 0.0556434 * X1 - 0.2040259 * Y1 + 1.0572252 * Z1\r\n\treturn [rgbLinearChannel2Rgb(r1Linear), rgbLinearChannel2Rgb(g1Linear), rgbLinearChannel2Rgb(b1Linear), alpha1]\r\n}\r\n\r\n_input.xyz = xyz2rgb\r\n_input.lab = cielab2rgb\r\n\r\nfunction hsi2rgb(hueDegrees: number, s1: number, i1: number, alpha1 = 1): RGBA {\r\n\t/*\r\n    borrowed from here:\r\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\r\n     */\r\n\tlet r, g, b\r\n\tlet hRad = hueDegrees * DEG2RAD\r\n\tif (hRad < (2 * PI) / 3) {\r\n\t\tb = (1 - s1) / 3\r\n\t\tr = (1 + (s1 * cos(hRad)) / cos(PI / 3 - hRad)) / 3\r\n\t\tg = 1 - (b + r)\r\n\t} else if (hRad < (4 * PI) / 3) {\r\n\t\thRad -= (2 * PI) / 3\r\n\t\tr = (1 - s1) / 3\r\n\t\tg = (1 + (s1 * cos(hRad)) / cos(PI / 3 - hRad)) / 3\r\n\t\tb = 1 - (r + g)\r\n\t} else {\r\n\t\thRad -= (4 * PI) / 3\r\n\t\tg = (1 - s1) / 3\r\n\t\tb = (1 + (s1 * cos(hRad)) / cos(PI / 3 - hRad)) / 3\r\n\t\tr = 1 - (g + b)\r\n\t}\r\n\treturn [3 * i1 * r * 255, 3 * i1 * g * 255, 3 * i1 * b * 255, alpha1]\r\n}\r\n\r\n/**\r\n * For HSI, we use the direct angle calculation. I.e. atan2(beta, alpha). See wikipedia link.\r\n */\r\nfunction rgb2hsi(r255: number, g255: number, b255: number): HSI {\r\n\t// See https://en.wikipedia.org/wiki/HSL_and_HSV#Hue_and_chroma\r\n\t// See https://en.wikipedia.org/wiki/HSL_and_HSV#Lightness\r\n\tconst r1 = r255 / 255\r\n\tconst g1 = g255 / 255\r\n\tconst b1 = b255 / 255\r\n\tconst i1 = (r1 + g1 + b1) / 3\r\n\tif (r1 == g1 && g1 == b1) {\r\n\t\treturn [0, 0, i1]\r\n\t} else {\r\n\t\tconst alpha = (1 / 2) * (2 * r1 - g1 - b1)\r\n\t\tconst beta = (sqrt(3) / 2) * (g1 - b1)\r\n\t\tconst hRad = atan2(beta, alpha)\r\n\t\tconst min1 = min(r1, g1, b1)\r\n\t\tconst s1 = 1 - min1 / i1\r\n\t\treturn [(hRad < 0 ? 2 * PI + hRad : hRad) * RAD2DEG, s1, i1]\r\n\t}\r\n}\r\n\r\n_input.hsi = hsi2rgb\r\n\r\ninterpolators.hsv = interpolators.hsl = interpolators.hsi = interpolators.lch = interpolators.hcg = function interpolate_hsx(\r\n\tcolor1: chroma.Color,\r\n\tcolor2: chroma.Color,\r\n\tf: number,\r\n\tm: \"hsv\" | \"hsl\" | \"hsi\" | \"lch\" | \"hcg\",\r\n) {\r\n\tconst [a1, b1, c1] = color1[m]()\r\n\tconst [a2, b2, c2] = color2[m]()\r\n\tfunction lerpHue(hue1: number, hue2: number, f: number) {\r\n\t\tconst dh = norm360(hue2 - hue1 + 180) - 180\r\n\t\treturn hue1 + f * dh\r\n\t}\r\n\treturn chroma[m](\r\n\t\t(\"h\" == m.charAt(0) ? lerpHue : lerp)(a1, a2, f),\r\n\t\tlerp(b1, b2, f),\r\n\t\t(\"h\" == m.charAt(2) ? lerpHue : lerp)(c1, c2, f),\r\n\t)\r\n}\r\n\r\nfunction indexOfMax<T>(arr: ArrayLike<T>, f: (el: T) => number) {\r\n\tlet maxValue = -Infinity,\r\n\t\tmaxValueIndex = -1\r\n\tfor (let i = 0; i < arr.length; i++) {\r\n\t\tconst value = f(arr[i])\r\n\t\tif (value > maxValue) {\r\n\t\t\tmaxValue = value\r\n\t\t\tmaxValueIndex = i\r\n\t\t}\r\n\t}\r\n\treturn maxValueIndex\r\n}\r\nfunction withMax<T>(arr: ArrayLike<T>, f: (el: T) => number): T {\r\n\treturn arr[indexOfMax(arr, f)]\r\n}\r\n"],"names":[],"mappings":"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"}