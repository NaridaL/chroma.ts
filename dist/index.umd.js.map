{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * @license\n *\n * chroma.js - JavaScript library for color conversions\n *\n * Copyright (c) 2011-2017, Gregor Aisch\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. The name Gregor Aisch may not be used to endorse or promote products\n *    derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// tslint:disable:no-unnecessary-qualifier\n\nconst { abs, atan2, cos, floor, log, min, max, round, sign, sin, sqrt, cbrt, PI, hypot } = Math\n\nfunction lerp(a: number, b: number, f: number) {\n\treturn a + (b - a) * f\n}\nfunction lerpInv(a: number, b: number, f: number) {\n\treturn (f - a) / (b - a)\n}\nfunction clamp(x: number, min = 0, max = 1) {\n\treturn x < min ? min : x > max ? max : x\n}\n\nfunction newtonIterate1d(f: (x: number) => number, xStart: number, max_steps: number, eps: number = 1e-8): number {\n\tlet x = xStart,\n\t\tfx\n\twhile (max_steps-- && abs((fx = f(x))) > eps) {\n\t\tconst dfdx = (f(x + eps) - fx) / eps\n\t\tconsole.log(\"fx / dfdx\", fx / dfdx, \"fx\", fx, \"x\", x)\n\t\tx = x - fx / dfdx\n\t}\n\treturn x\n}\nfunction bisect(f: (x: number) => number, a: number, b: number, steps: number) {\n\t//assert(a < b)\n\tlet fA = f(a)\n\t// let fB = f(b)\n\t//assert(fA * fB < 0)\n\twhile (steps--) {\n\t\tconst c = (a + b) / 2\n\t\tconst fC = f(c)\n\t\t// console.log(\"fC\", fC, \"c\", c)\n\t\tif (sign(fA) == sign(fC)) {\n\t\t\ta = c\n\t\t\tfA = fC\n\t\t} else {\n\t\t\tb = c\n\t\t\t// fB = fC\n\t\t}\n\t}\n\t//assert(a <= (b + a) / 2)\n\t//assert(b >= (b + a) / 2)\n\treturn (a + b) / 2\n}\n\nconst TWOPI = 2 * PI\n\nconst DEG2RAD = PI / 180\n\nconst RAD2DEG = 180 / PI\n/**\n * @param alpha1 default=1\n * @example chroma(99, 99, 44, 0.7)\n */\nfunction chroma(red255: number, green255: number, blue255: number, alpha1?: number): chroma.Color\n/**\n * @example chroma('mediumorchid') // a css string\n * @example chroma([56, 203, 30]) // a RGB triple\n * @example chroma(0x4b0082) // a hex num\n * @example chroma([30, 0.8, 0.3], 'hsl') // explicit format\n */\nfunction chroma(x: chroma.Chromable, format?: ColorFormat): chroma.Color\n/**\n * This overload allows VS Code to suggest color names when you type `chroma('`.\n */\nfunction chroma(colorname: keyof typeof chroma.w3cx11, format?: \"name\"): chroma.Color\n/** @example chroma(30, 0.8, 0.3, 'hsl') */\nfunction chroma(channel0: number, channel1: chroma.Color, channel2: number, format: ColorFormat): chroma.Color\n/** @example chroma(0.3, 0.8, 0.3, 1, 'gl') */\nfunction chroma(\n\tchannel0: number,\n\tchannel1: chroma.Color,\n\tchannel2: number,\n\tchannel3: number,\n\tformat: ColorFormat,\n): chroma.Color\nfunction chroma(...args: any[]) {\n\tif (args[0] instanceof chroma.Color) {\n\t\treturn args[0]\n\t}\n\tif (args.length > 1 && \"string\" == typeof args[args.length - 1]) {\n\t\treturn guess(args.slice(0, args.length - 1), args[args.length - 1])\n\t} else if (Array.isArray(args[0])) {\n\t\treturn guess(args[0])\n\t} else {\n\t\treturn guess(args)\n\t}\n}\nexport default chroma\nexport { chroma }\nnamespace chroma {\n\t/**\n\t * A Chromable is any value which can be converted to a color. For ease of use, most functions accept these instead of\n\t * only Color values.\n\t */\n\texport type Chromable = number | string | Color | number[]\n\n\texport class Color {\n\t\t/** @internal */\n\t\tconstructor(\n\t\t\tprivate readonly r: number,\n\t\t\tprivate readonly g: number,\n\t\t\tprivate readonly b: number,\n\t\t\tprivate readonly a = 1,\n\t\t) {}\n\n\t\t// public shade() {\n\t\t// \tconst shades: [string, string, number][] = [\n\t\t// \t\t[\"ff0000\", \"red\"],\n\t\t// \t\t[\"ffa500\", \"orange\"],\n\t\t// \t\t[\"ffff00\", \"yellow\"],\n\t\t// \t\t[\"008000\", \"green\"],\n\t\t// \t\t[\"0000ff\", \"blue\"],\n\t\t// \t\t[\"ee82ee\", \"violet\"],\n\t\t// \t\t[\"a52a2a\", \"brown\"],\n\t\t// \t\t[\"000000\", \"black\"],\n\t\t// \t\t[\"808080\", \"grey\"],\n\t\t// \t\t[\"ffffff\", \"white\"],\n\t\t// \t] as any\n\t\t// \tfunction angleDiff(a: number, b: number) {\n\t\t// \t\tconst d = (a - b) % 360\n\t\t// \t\tif (d > 180) return d - 360\n\t\t// \t\tif (d < -180) return d + 360\n\t\t// \t\treturn d\n\t\t// \t}\n\t\t// \tshades.forEach(arr => arr.push(chroma(arr[0]).hsl()[0]))\n\t\t// \tconst [h, s, l] = this.hsl()\n\t\t// \tif (l > 0.9) return \"white\"\n\t\t// \tif (l > 0.8 && s < 0.2) return \"white\"\n\t\t// \tif (s < 0.1) return \"grey\"\n\t\t// \tif (s < 0.4 && h > 0 && h < 48) return \"brown\"\n\n\t\t// \tconst distanceInXYZ: { [hue: number]: number } = { 0: 0 }\n\t\t// \tfor (let i = 60; i <= 360; i += 60) {\n\t\t// \t\tdistanceInXYZ[i] =\n\t\t// \t\t\tdistanceInXYZ[i - 60] + chroma.distance(chroma.hsl(i - 60, 1, 0.5), chroma.hsl(i, 1, 0.5), \"xyz\")\n\t\t// \t}\n\t\t// \t// console.log(distanceInXYZ)\n\n\t\t// \tconst shadeEnds: { [hue: number]: number } = {\n\t\t// \t\t0: 9,\n\t\t// \t\t38: 48,\n\t\t// \t\t60: 65,\n\t\t// \t\t120: 165,\n\t\t// \t\t240: 245,\n\t\t// \t\t300: 338,\n\t\t// \t\t360: 369,\n\t\t// \t}\n\n\t\t// \tconst getColorDistanceAlongXYZHue = (hueDegrees: number) => {\n\t\t// \t\tconst base = hueDegrees - (hueDegrees % 60)\n\t\t// \t\treturn (\n\t\t// \t\t\tdistanceInXYZ[base] + chroma.distance(chroma.hsl(base, 1, 0.5), chroma.hsl(hueDegrees, 1, 0.5), \"xyz\")\n\t\t// \t\t)\n\t\t// \t}\n\t\t// \tconst colorXYZD = getColorDistanceAlongXYZHue(this.hsl()[0])\n\t\t// \tconst md = distanceInXYZ[360]\n\t\t// \tconst shadeHue =\n\t\t// \t\t(Object.keys(shadeEnds) as any[]).find(shadeHue => shadeEnds[shadeHue | 0] >= this.hsl()[0])! % 360\n\t\t// \treturn shades.find(([_hex, _name, _hue]) => (_hue | 0) === shadeHue)![1]\n\t\t// \t// process.exit()\n\t\t// \treturn withMax(shades, ([_hex, _name, _hue]) => {\n\t\t// \t\treturn -abs(angleDiff(this.hsl()[0], _hue))\n\t\t// \t})[1]\n\t\t// \treturn withMax(shades, ([_hex, _name, _hue]) => {\n\t\t// \t\tconst [thisL, thisA, thisB] = this.lab()\n\t\t// \t\tconst [L, A, B] = chroma(_hex).lab()\n\t\t// \t\treturn -hypot(thisL - L, thisA - A, thisB - B)\n\t\t// \t})[1]\n\t\t// }\n\n\t\t/**\n\t\t * @see [[chroma.mix]]\n\t\t */\n\t\tpublic mix(col2: Chromable, f: number, m: InterpolationMode = \"rgb\") {\n\t\t\treturn chroma.mix(this, col2, f, m)\n\t\t}\n\t\tpublic rgb(doRound = true, clamp_ = true): RGB {\n\t\t\tconst f = (t: number) => {\n\t\t\t\tif (doRound) t = round(t)\n\t\t\t\tif (clamp_) t = clamp(t, 0, 255)\n\t\t\t\treturn t\n\t\t\t}\n\t\t\tconst { r, g, b } = this\n\t\t\treturn [f(r), f(g), f(b)]\n\t\t}\n\t\tpublic rgba(doRound = true, clamp_ = true): RGBA {\n\t\t\tconst f = (t: number) => {\n\t\t\t\tif (doRound) t = round(t)\n\t\t\t\tif (clamp_) t = clamp(t, 0, 255)\n\t\t\t\treturn t\n\t\t\t}\n\t\t\tconst { r, g, b, a } = this\n\t\t\treturn [f(r), f(g), f(b), a]\n\t\t}\n\n\t\t/**\n\t\t * Return a hex-string representation of this color.\n\t\t *\n\t\t * @param mode\n\t\t * @see #num for a hex-number representation.\n\t\t * @example chroma('yellow').alpha(0.7).hex()\n\t\t * @example chroma('yellow').alpha(0.7).hex('rgba')\n\t\t * @example chroma('yellow').alpha(0.7).hex('argb')\n\t\t */\n\t\tpublic hex(mode: \"rgb\" | \"rgba\" | \"argb\" = \"rgb\") {\n\t\t\tconst { r, g, b, a } = this\n\t\t\treturn rgb2hex(r, g, b, a, mode)\n\t\t}\n\n\t\t/**\n\t\t * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.\n\t\t *\n\t\t * @example chroma('purple').hsl()\n\t\t */\n\t\tpublic hsl(): HSL {\n\t\t\tconst { r, g, b } = this\n\t\t\treturn rgb2hsl(r, g, b)\n\t\t}\n\n\t\t/**\n\t\t * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.\n\t\t *\n\t\t * @example chroma('purple').hsv()\n\t\t */\n\t\tpublic hsv() {\n\t\t\tconst { r, g, b } = this\n\t\t\treturn rgb2hsv(r, g, b)\n\t\t}\n\n\t\t/**\n\t\t * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.\n\t\t *\n\t\t * @example chroma('purple').hcg()\n\t\t */\n\t\tpublic hcg() {\n\t\t\tconst { r, g, b } = this\n\t\t\treturn rgb2hcg(r, g, b)\n\t\t}\n\n\t\t/**\n\t\t * Returns a CSS `rgb(...)` or `hsl(...)` string representation that can be used as CSS-color definition. The alpha\n\t\t * value is not output if it 1.\n\t\t * @example chroma('teal').css() // == \"rgb(0,128,128)\"\n\t\t * @example chroma('teal').alpha(0.5).css() // == \"rgba(0,128,128,0.5)\"\n\t\t * @example chroma('teal').css('hsl') // == \"hsl(180,100%,25.1%)\"\n\t\t */\n\t\tpublic css(mode: \"rgb\" | \"hsl\" = \"rgb\") {\n\t\t\tif (\"rgb\" == mode) {\n\t\t\t\tconst { r, g, b, a } = this\n\t\t\t\treturn rgb2css(r, g, b, a)\n\t\t\t} else if (\"hsl\" == mode) {\n\t\t\t\treturn hsl2css(this.hsl(), this.alpha())\n\t\t\t} else {\n\t\t\t\tthrow new Error()\n\t\t\t}\n\t\t}\n\n\t\tpublic name(closest: true): string\n\t\t/**\n\t\t * Get the name of a color. By default, this method will try to match the color exactly (comparing rounded RGB\n\t\t * values). Pass `true` to return the name of the color which is closest to `this` in CIELAB color space. CIELAB is\n\t\t * used as it is perceptually uniform.\n\t\t * @param closest Whether this should find the closest color name. default=false\n\t\t * @return If `closest == false`, the name of this color or `undefined` if there is no match. Otherwise, will always\n\t\t * return a color name.\n\t\t * @example chroma('#ff0000').name() // == \"red\"\n\t\t * @example chroma('#ff0001').name() // == undefined\n\t\t * @example chroma('#ff0001').name(true) // == \"red\"\n\t\t */\n\t\tpublic name(closest?: boolean): string | undefined\n\t\tpublic name(closest: boolean = false): string | undefined {\n\t\t\tconst num = this.num()\n\t\t\tconst name = Object.keys(chroma.w3cx11).find(name => (chroma.w3cx11 as any)[name] == num)\n\t\t\tif (!name && closest) {\n\t\t\t\tconst [thisLStar, thisAStar, thisBStar] = this.lab()\n\t\t\t\treturn withMax(Object.keys(chroma.w3cx11) as (keyof typeof chroma.w3cx11)[], name => {\n\t\t\t\t\tconst [lStar, aStar, bStar] = chroma.num(chroma.w3cx11[name]).lab()\n\t\t\t\t\treturn -hypot(thisLStar - lStar, thisAStar - aStar, thisBStar - bStar)\n\t\t\t\t})\n\t\t\t}\n\t\t\treturn name\n\t\t}\n\n\t\t/**\n\t\t * Get the [CMYK](#chroma.CMYK) representation of this color.\n\t\t *\n\t\t * @example chroma('red').cmyk()\n\t\t */\n\t\tpublic cmyk() {\n\t\t\tconst { r, g, b } = this\n\t\t\treturn rgb2cmyk(r, g, b)\n\t\t}\n\n\t\t/**\n\t\t * Returns the [GL] representation of this color.\n\t\t * @example chroma('33cc00').gl()\n\t\t */\n\t\tpublic gl(): GL {\n\t\t\tconst { r, g, b, a } = this\n\t\t\treturn [r / 255, g / 255, b / 255, a]\n\t\t}\n\n\t\t/**\n\t\t * Get luminance of the color. This is equal to the Y channel of the XYZ color space.\n\t\t * @example chroma('black').luminance() // == 0\n\t\t * @example chroma('white').luminance() // == 1\n\t\t * @example chroma('red').luminance() // == ~0.21\n\t\t * @see https://en.wikipedia.org/wiki/Relative_luminance\n\t\t */\n\t\tpublic luminance(): number\n\t\t/**\n\t\t * Return a new [Color] with `lum1` by linearly interpolating `this` with white (when increasing the luminance) or\n\t\t * black (otherwise) in the [XYZ] color space.\n\t\t * @see https://en.wikipedia.org/wiki/Relative_luminance\n\t\t * @example // Approximately doubling the luminance of red\n\t\t * @example chroma('red').luminance(0.4) // == #ff8686 // \"Vivid Tangerine\"\n\t\t * @param lum1 The desired luminance.\n\t\t */\n\t\tpublic luminance(lum1: number): this\n\t\tpublic luminance(lum1?: number) {\n\t\t\tconst { r, g, b, a } = this\n\t\t\tconst [, Y] = rgb2xyz(r, g, b)\n\t\t\tif (undefined === lum1) {\n\t\t\t\treturn Y\n\t\t\t}\n\t\t\tconst inverseLerp = (a: number, b: number, val: number) => (val - a) / (b - a)\n\t\t\tif (lum1 > Y) {\n\t\t\t\t// lerp to white\n\t\t\t\treturn chroma.mix(this, chroma(\"white\"), inverseLerp(Y, 1, lum1), \"xyz\").alpha(a)\n\t\t\t} else {\n\t\t\t\t// lerp to black\n\t\t\t\treturn chroma.mix(chroma(\"black\"), this, inverseLerp(0, Y, lum1), \"xyz\").alpha(a)\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Get color temperature of this color in Kelvin. This only makes sense for colors close to those output by\n\t\t * chroma.kelvin\n\t\t *\n\t\t * @example [c = chroma('#ff3300'), c.temperature()]\n\t\t * @example [c = chroma('#ffe3cd'), c.temperature()]\n\t\t * @example [c = chroma('#b3ccff'), c.temperature()]\n\t\t */\n\t\tpublic temperature() {\n\t\t\tconst { r, g, b } = this\n\t\t\treturn rgb2kelvin(r, g, b)\n\t\t}\n\n\t\t/**\n\t\t * Returns a new [Color] with a channel changed.\n\t\t * @example chroma('skyblue').set('hsl.h', 0) // change hue to 0 deg (=red)\n\t\t * @example chroma('hotpink').set('lch.c', 30) // set chromaticity to 30\n\t\t * @example chroma('orangered').set('lab.l', x => x / 2) // half Lab lightness\n\t\t * @example chroma('darkseagreen').set('lch.c', x => x * 2) // double Lch saturation\n\t\t */\n\t\tpublic set(modeAndChannel: string, value: number | ((channel: number) => number)) {\n\t\t\tconst [mode, channel] = modeAndChannel.split(\".\") as [ColorMode, string]\n\t\t\tconst src = this[mode]()\n\t\t\tconst i = mode.indexOf(channel)\n\t\t\tif (-1 == i) throw new Error(\"invalid channel\")\n\t\t\tsrc[i] = \"number\" == typeof value ? value : value(src[i])\n\t\t\treturn chroma(src, mode).alpha(this.a)\n\t\t}\n\n\t\t/**\n\t\t * Returns whether this color is outside the RGB color cube and will be clipped/clamped when calling .rgb()\n\t\t *\n\t\t * @example [c = chroma.lch( 20, 40, 50), c.clipped()]\n\t\t * @example [c = chroma.lch( 40, 40, 50), c.clipped()]\n\t\t * @example [c = chroma.lch( 60, 40, 50), c.clipped()]\n\t\t * @example [c = chroma.lch( 80, 40, 50), c.clipped()]\n\t\t * @example [c = chroma.lch(100, 40, 50), c.clipped()]\n\t\t */\n\t\tpublic clipped() {\n\t\t\tconst { r, g, b } = this\n\t\t\treturn !(0 <= r && r <= 255 && (0 <= g && g <= 255) && (0 <= b && b <= 255))\n\t\t}\n\n\t\t/**\n\t\t * Returns black or white, whichever has the highest contrast to `this`.\n\t\t * In the readme you should see the result of this.\n\t\t *\n\t\t * @example chroma('red')\n\t\t * @example chroma('yellow')\n\t\t */\n\t\tpublic textColor() {\n\t\t\treturn this.luminance() > 0.5 ? chroma.black : chroma.white\n\t\t}\n\n\t\t/**\n\t\t * Get alpha value of color.\n\t\t * @example chroma.rgb(0, 0, 255, 0.5).alpha() // == 0.5\n\t\t */\n\t\tpublic alpha(): number\n\t\t/**\n\t\t * Return new [Color] with given alpha value.\n\t\t * @example chroma('green').alpha(0.3)\n\t\t * @example chroma('green').alpha(0.3).hex('rgba') // == \"#00ff004d\"\n\t\t * @param alpha1 The desired alpha value.\n\t\t */\n\t\tpublic alpha(alpha1: number): Color\n\t\tpublic alpha(alpha1?: number): number | Color {\n\t\t\tif (undefined === alpha1) {\n\t\t\t\treturn this.a\n\t\t\t}\n\t\t\tconst { r, g, b } = this\n\t\t\treturn chroma.rgb(r, g, b, alpha1)\n\t\t}\n\n\t\tpublic darker(amount = 1) {\n\t\t\tconst [l, a, b] = this.lab()\n\t\t\treturn chroma.lab(l - LAB_Kn * amount, a, b, this.alpha())\n\t\t}\n\n\t\t/**\n\t\t *\n\t\t * @param amount\n\t\t * @example chroma('hotpink')\n\t\t * @example chroma('hotpink').brighter()\n\t\t * @example chroma('hotpink').brighter(2)\n\t\t * @example chroma('hotpink').brighter(3)\n\t\t */\n\t\tpublic brighter(amount = 1) {\n\t\t\treturn this.darker(-amount)\n\t\t}\n\n\t\t/**\n\t\t * Returns a new [Color] with increased saturation.\n\t\t * @param amount How much.\n\t\t * @example chroma('slategray')\n\t\t * @example chroma('slategray').saturate()\n\t\t * @example chroma('slategray').saturate(2)\n\t\t * @example chroma('slategray').saturate(3)\n\t\t */\n\t\tpublic saturate(amount = 1) {\n\t\t\tconst [l, c, h] = this.lch()\n\t\t\treturn chroma.lch(l, max(0, c + amount * LAB_Kn), h, this.alpha())\n\t\t}\n\n\t\t/**\n\t\t * Equivalent to `saturate(-amount)`.\n\t\t * @see #saturate\n\t\t */\n\t\tpublic desaturate(amount = 1) {\n\t\t\treturn this.saturate(-amount)\n\t\t}\n\n\t\tpublic premultiplied() {\n\t\t\tconst { r, g, b, a } = this\n\t\t\treturn chroma.rgb(r * a, g * a, b * a, a)\n\t\t}\n\n\t\t/**\n\t\t * Returns the [HSI] representation of this color. hue will always be in [0; 360). Values are never NaN.\n\t\t *\n\t\t * @example chroma('purple').hsi()\n\t\t */\n\t\tpublic hsi() {\n\t\t\tconst { r, g, b } = this\n\t\t\treturn rgb2hsi(r, g, b)\n\t\t}\n\n\t\t/**\n\t\t * Returns the [LAB] representation of this color.\n\t\t *\n\t\t * @example chroma('purple').lab()\n\t\t */\n\t\tpublic lab() {\n\t\t\tconst { r, g, b } = this\n\t\t\treturn rgb2lab(r, g, b)\n\t\t}\n\n\t\t/**\n\t\t * Return a hex-num of this color.\n\t\t *\n\t\t * @param mode\n\t\t * @see #num for a hex-number representation.\n\t\t * @example chroma('yellow').alpha(0.7).hex()\n\t\t * @example chroma('yellow').alpha(0.7).hex('rgba')\n\t\t * @example chroma('yellow').alpha(0.7).hex('argb')\n\t\t */\n\t\tpublic num(mode: \"rgb\" | \"rgba\" | \"argb\" = \"rgb\") {\n\t\t\tconst { r, g, b, a } = this\n\t\t\treturn rgb2num(r, g, b, a, mode)\n\t\t}\n\n\t\t/**\n\t\t * Returns the [LCH] representation of this color. hue will always be in [0; 360). Values are never NaN.\n\t\t *\n\t\t * @example chroma('purple').lch()\n\t\t */\n\t\tpublic lch() {\n\t\t\tconst { r, g, b } = this\n\t\t\treturn rgb2lch(r, g, b)\n\t\t}\n\n\t\t/**\n\t\t * Returns the [XYZ] representation of this color. hue will always be in [0; 360). Values are never NaN.\n\t\t *\n\t\t * @example chroma('purple').xyz()\n\t\t */\n\t\tpublic xyz() {\n\t\t\tconst { r, g, b } = this\n\t\t\treturn rgb2xyz(r, g, b)\n\t\t}\n\n\t\t/**\n\t\t * Whether this [Color](#chroma.Color) is identical (strict equality of r, g, b, a) to `color`.\n\t\t */\n\t\tpublic equals(color: Color) {\n\t\t\tconst { r, g, b, a } = this\n\t\t\tconst { r: r2, g: g2, b: b2, a: a2 } = color\n\t\t\treturn r == r2 && g == g2 && b == b2 && a == a2\n\t\t}\n\n\t\tpublic hashCode() {\n\t\t\treturn this.num(\"rgba\")\n\t\t}\n\n\t\t/**\n\t\t * @example chroma('red').toSource() // == \"chroma.rgb(255, 0, 0)\"\n\t\t * @example chroma.rgb(-2, 100.02, 200, 0.5).toSource() // == \"chroma.rgb(-2, 100.02, 200, 0.5)\"\n\t\t */\n\t\tpublic toSource() {\n\t\t\tconst { r, g, b, a } = this\n\t\t\treturn \"chroma.rgb(\" + r + \", \" + g + \", \" + b + (a === 1 ? \")\" : \", \" + a + \")\")\n\t\t}\n\t}\n\texport interface Color {\n\t\ttoString(): string\n\t\t//darker(amount: number): Color\n\t\t//brighter(amount: number): Color\n\t\tkelvin(): number\n\t}\n\tColor.prototype.toString = Color.prototype.css\n\tColor.prototype.kelvin = Color.prototype.temperature\n\t/**\n\t * @example chroma.black\n\t */\n\texport const black = new Color(0, 0, 0, 1)\n\n\t/**\n\t * @example chroma.black\n\t */\n\texport const white = new Color(255, 255, 255, 1)\n\n\texport const brewer = {\n\t\tOrRd: [0xfff7ec, 0xfee8c8, 0xfdd49e, 0xfdbb84, 0xfc8d59, 0xef6548, 0xd7301f, 0xb30000, 0x7f0000],\n\t\tPuBu: [0xfff7fb, 0xece7f2, 0xd0d1e6, 0xa6bddb, 0x74a9cf, 0x3690c0, 0x0570b0, 0x045a8d, 0x023858],\n\t\tBuPu: [0xf7fcfd, 0xe0ecf4, 0xbfd3e6, 0x9ebcda, 0x8c96c6, 0x8c6bb1, 0x88419d, 0x810f7c, 0x4d004b],\n\t\tOranges: [0xfff5eb, 0xfee6ce, 0xfdd0a2, 0xfdae6b, 0xfd8d3c, 0xf16913, 0xd94801, 0xa63603, 0x7f2704],\n\t\tBuGn: [0xf7fcfd, 0xe5f5f9, 0xccece6, 0x99d8c9, 0x66c2a4, 0x41ae76, 0x238b45, 0x006d2c, 0x00441b],\n\t\tYlOrBr: [0xffffe5, 0xfff7bc, 0xfee391, 0xfec44f, 0xfe9929, 0xec7014, 0xcc4c02, 0x993404, 0x662506],\n\t\tYlGn: [0xffffe5, 0xf7fcb9, 0xd9f0a3, 0xaddd8e, 0x78c679, 0x41ab5d, 0x238443, 0x006837, 0x004529],\n\t\tReds: [0xfff5f0, 0xfee0d2, 0xfcbba1, 0xfc9272, 0xfb6a4a, 0xef3b2c, 0xcb181d, 0xa50f15, 0x67000d],\n\t\tRdPu: [0xfff7f3, 0xfde0dd, 0xfcc5c0, 0xfa9fb5, 0xf768a1, 0xdd3497, 0xae017e, 0x7a0177, 0x49006a],\n\t\tGreens: [0xf7fcf5, 0xe5f5e0, 0xc7e9c0, 0xa1d99b, 0x74c476, 0x41ab5d, 0x238b45, 0x006d2c, 0x00441b],\n\t\tYlGnBu: [0xffffd9, 0xedf8b1, 0xc7e9b4, 0x7fcdbb, 0x41b6c4, 0x1d91c0, 0x225ea8, 0x253494, 0x081d58],\n\t\tPurples: [0xfcfbfd, 0xefedf5, 0xdadaeb, 0xbcbddc, 0x9e9ac8, 0x807dba, 0x6a51a3, 0x54278f, 0x3f007d],\n\t\tGnBu: [0xf7fcf0, 0xe0f3db, 0xccebc5, 0xa8ddb5, 0x7bccc4, 0x4eb3d3, 0x2b8cbe, 0x0868ac, 0x084081],\n\t\tGreys: [0xffffff, 0xf0f0f0, 0xd9d9d9, 0xbdbdbd, 0x969696, 0x737373, 0x525252, 0x252525, 0x000000],\n\t\tYlOrRd: [0xffffcc, 0xffeda0, 0xfed976, 0xfeb24c, 0xfd8d3c, 0xfc4e2a, 0xe31a1c, 0xbd0026, 0x800026],\n\t\tPuRd: [0xf7f4f9, 0xe7e1ef, 0xd4b9da, 0xc994c7, 0xdf65b0, 0xe7298a, 0xce1256, 0x980043, 0x67001f],\n\t\tBlues: [0xf7fbff, 0xdeebf7, 0xc6dbef, 0x9ecae1, 0x6baed6, 0x4292c6, 0x2171b5, 0x08519c, 0x08306b],\n\t\tPuBuGn: [0xfff7fb, 0xece2f0, 0xd0d1e6, 0xa6bddb, 0x67a9cf, 0x3690c0, 0x02818a, 0x016c59, 0x014636],\n\t\tViridis: [0x440154, 0x482777, 0x3f4a8a, 0x31678e, 0x26838f, 0x1f9d8a, 0x6cce5a, 0xb6de2b, 0xfee825],\n\t\tSpectral: [\n\t\t\t0x9e0142,\n\t\t\t0xd53e4f,\n\t\t\t0xf46d43,\n\t\t\t0xfdae61,\n\t\t\t0xfee08b,\n\t\t\t0xffffbf,\n\t\t\t0xe6f598,\n\t\t\t0xabdda4,\n\t\t\t0x66c2a5,\n\t\t\t0x3288bd,\n\t\t\t0x5e4fa2,\n\t\t],\n\t\tRdYlGn: [\n\t\t\t0xa50026,\n\t\t\t0xd73027,\n\t\t\t0xf46d43,\n\t\t\t0xfdae61,\n\t\t\t0xfee08b,\n\t\t\t0xffffbf,\n\t\t\t0xd9ef8b,\n\t\t\t0xa6d96a,\n\t\t\t0x66bd63,\n\t\t\t0x1a9850,\n\t\t\t0x006837,\n\t\t],\n\t\tRdBu: [\n\t\t\t0x67001f,\n\t\t\t0xb2182b,\n\t\t\t0xd6604d,\n\t\t\t0xf4a582,\n\t\t\t0xfddbc7,\n\t\t\t0xf7f7f7,\n\t\t\t0xd1e5f0,\n\t\t\t0x92c5de,\n\t\t\t0x4393c3,\n\t\t\t0x2166ac,\n\t\t\t0x053061,\n\t\t],\n\t\tPiYG: [\n\t\t\t0x8e0152,\n\t\t\t0xc51b7d,\n\t\t\t0xde77ae,\n\t\t\t0xf1b6da,\n\t\t\t0xfde0ef,\n\t\t\t0xf7f7f7,\n\t\t\t0xe6f5d0,\n\t\t\t0xb8e186,\n\t\t\t0x7fbc41,\n\t\t\t0x4d9221,\n\t\t\t0x276419,\n\t\t],\n\t\tPRGn: [\n\t\t\t0x40004b,\n\t\t\t0x762a83,\n\t\t\t0x9970ab,\n\t\t\t0xc2a5cf,\n\t\t\t0xe7d4e8,\n\t\t\t0xf7f7f7,\n\t\t\t0xd9f0d3,\n\t\t\t0xa6dba0,\n\t\t\t0x5aae61,\n\t\t\t0x1b7837,\n\t\t\t0x00441b,\n\t\t],\n\t\tRdYlBu: [\n\t\t\t0xa50026,\n\t\t\t0xd73027,\n\t\t\t0xf46d43,\n\t\t\t0xfdae61,\n\t\t\t0xfee090,\n\t\t\t0xffffbf,\n\t\t\t0xe0f3f8,\n\t\t\t0xabd9e9,\n\t\t\t0x74add1,\n\t\t\t0x4575b4,\n\t\t\t0x313695,\n\t\t],\n\t\tBrBG: [\n\t\t\t0x543005,\n\t\t\t0x8c510a,\n\t\t\t0xbf812d,\n\t\t\t0xdfc27d,\n\t\t\t0xf6e8c3,\n\t\t\t0xf5f5f5,\n\t\t\t0xc7eae5,\n\t\t\t0x80cdc1,\n\t\t\t0x35978f,\n\t\t\t0x01665e,\n\t\t\t0x003c30,\n\t\t],\n\t\tRdGy: [\n\t\t\t0x67001f,\n\t\t\t0xb2182b,\n\t\t\t0xd6604d,\n\t\t\t0xf4a582,\n\t\t\t0xfddbc7,\n\t\t\t0xffffff,\n\t\t\t0xe0e0e0,\n\t\t\t0xbababa,\n\t\t\t0x878787,\n\t\t\t0x4d4d4d,\n\t\t\t0x1a1a1a,\n\t\t],\n\t\tPuOr: [\n\t\t\t0x7f3b08,\n\t\t\t0xb35806,\n\t\t\t0xe08214,\n\t\t\t0xfdb863,\n\t\t\t0xfee0b6,\n\t\t\t0xf7f7f7,\n\t\t\t0xd8daeb,\n\t\t\t0xb2abd2,\n\t\t\t0x8073ac,\n\t\t\t0x542788,\n\t\t\t0x2d004b,\n\t\t],\n\t\tSet2: [0x66c2a5, 0xfc8d62, 0x8da0cb, 0xe78ac3, 0xa6d854, 0xffd92f, 0xe5c494, 0xb3b3b3],\n\t\tAccent: [0x7fc97f, 0xbeaed4, 0xfdc086, 0xffff99, 0x386cb0, 0xf0027f, 0xbf5b17, 0x666666],\n\t\tSet1: [0xe41a1c, 0x377eb8, 0x4daf4a, 0x984ea3, 0xff7f00, 0xffff33, 0xa65628, 0xf781bf, 0x999999],\n\t\tSet3: [\n\t\t\t0x8dd3c7,\n\t\t\t0xffffb3,\n\t\t\t0xbebada,\n\t\t\t0xfb8072,\n\t\t\t0x80b1d3,\n\t\t\t0xfdb462,\n\t\t\t0xb3de69,\n\t\t\t0xfccde5,\n\t\t\t0xd9d9d9,\n\t\t\t0xbc80bd,\n\t\t\t0xccebc5,\n\t\t\t0xffed6f,\n\t\t],\n\t\tDark2: [0x1b9e77, 0xd95f02, 0x7570b3, 0xe7298a, 0x66a61e, 0xe6ab02, 0xa6761d, 0x666666],\n\t\tPaired: [\n\t\t\t0xa6cee3,\n\t\t\t0x1f78b4,\n\t\t\t0xb2df8a,\n\t\t\t0x33a02c,\n\t\t\t0xfb9a99,\n\t\t\t0xe31a1c,\n\t\t\t0xfdbf6f,\n\t\t\t0xff7f00,\n\t\t\t0xcab2d6,\n\t\t\t0x6a3d9a,\n\t\t\t0xffff99,\n\t\t\t0xb15928,\n\t\t],\n\t\tPastel2: [0xb3e2cd, 0xfdcdac, 0xcbd5e8, 0xf4cae4, 0xe6f5c9, 0xfff2ae, 0xf1e2cc, 0xcccccc],\n\t\tPastel1: [0xfbb4ae, 0xb3cde3, 0xccebc5, 0xdecbe4, 0xfed9a6, 0xffffcc, 0xe5d8bd, 0xfddaec, 0xf2f2f2],\n\t}\n\n\t/**\n\t * X11 color names\n\t * http://www.w3.org/TR/css3-color/#svg-color\n\t *\n\t * @example Object.keys(chroma.w3cx11).slice(0, 4)\n\t */\n\texport const w3cx11 = {\n\t\taliceblue: 0xf0f8ff,\n\t\tantiquewhite: 0xfaebd7,\n\t\taqua: 0x00ffff,\n\t\taquamarine: 0x7fffd4,\n\t\tazure: 0xf0ffff,\n\t\tbeige: 0xf5f5dc,\n\t\tbisque: 0xffe4c4,\n\t\tblack: 0x000000,\n\t\tblanchedalmond: 0xffebcd,\n\t\tblue: 0x0000ff,\n\t\tblueviolet: 0x8a2be2,\n\t\tbrown: 0xa52a2a,\n\t\tburlywood: 0xdeb887,\n\t\tcadetblue: 0x5f9ea0,\n\t\tchartreuse: 0x7fff00,\n\t\tchocolate: 0xd2691e,\n\t\tcoral: 0xff7f50,\n\t\tcornflower: 0x6495ed,\n\t\tcornflowerblue: 0x6495ed,\n\t\tcornsilk: 0xfff8dc,\n\t\tcrimson: 0xdc143c,\n\t\tcyan: 0x00ffff,\n\t\tdarkblue: 0x00008b,\n\t\tdarkcyan: 0x008b8b,\n\t\tdarkgoldenrod: 0xb8860b,\n\t\tdarkgray: 0xa9a9a9,\n\t\tdarkgreen: 0x006400,\n\t\tdarkgrey: 0xa9a9a9,\n\t\tdarkkhaki: 0xbdb76b,\n\t\tdarkmagenta: 0x8b008b,\n\t\tdarkolivegreen: 0x556b2f,\n\t\tdarkorange: 0xff8c00,\n\t\tdarkorchid: 0x9932cc,\n\t\tdarkred: 0x8b0000,\n\t\tdarksalmon: 0xe9967a,\n\t\tdarkseagreen: 0x8fbc8f,\n\t\tdarkslateblue: 0x483d8b,\n\t\tdarkslategray: 0x2f4f4f,\n\t\tdarkslategrey: 0x2f4f4f,\n\t\tdarkturquoise: 0x00ced1,\n\t\tdarkviolet: 0x9400d3,\n\t\tdeeppink: 0xff1493,\n\t\tdeepskyblue: 0x00bfff,\n\t\tdimgray: 0x696969,\n\t\tdimgrey: 0x696969,\n\t\tdodgerblue: 0x1e90ff,\n\t\tfirebrick: 0xb22222,\n\t\tfloralwhite: 0xfffaf0,\n\t\tforestgreen: 0x228b22,\n\t\tfuchsia: 0xff00ff,\n\t\tgainsboro: 0xdcdcdc,\n\t\tghostwhite: 0xf8f8ff,\n\t\tgold: 0xffd700,\n\t\tgoldenrod: 0xdaa520,\n\t\tgray: 0x808080,\n\t\tgreen: 0x008000,\n\t\tgreenyellow: 0xadff2f,\n\t\tgrey: 0x808080,\n\t\thoneydew: 0xf0fff0,\n\t\thotpink: 0xff69b4,\n\t\tindianred: 0xcd5c5c,\n\t\tindigo: 0x4b0082,\n\t\tivory: 0xfffff0,\n\t\tkhaki: 0xf0e68c,\n\t\tlaserlemon: 0xffff54,\n\t\tlavender: 0xe6e6fa,\n\t\tlavenderblush: 0xfff0f5,\n\t\tlawngreen: 0x7cfc00,\n\t\tlemonchiffon: 0xfffacd,\n\t\tlightblue: 0xadd8e6,\n\t\tlightcoral: 0xf08080,\n\t\tlightcyan: 0xe0ffff,\n\t\tlightgoldenrod: 0xfafad2,\n\t\tlightgoldenrodyellow: 0xfafad2,\n\t\tlightgray: 0xd3d3d3,\n\t\tlightgreen: 0x90ee90,\n\t\tlightgrey: 0xd3d3d3,\n\t\tlightpink: 0xffb6c1,\n\t\tlightsalmon: 0xffa07a,\n\t\tlightseagreen: 0x20b2aa,\n\t\tlightskyblue: 0x87cefa,\n\t\tlightslategray: 0x778899,\n\t\tlightslategrey: 0x778899,\n\t\tlightsteelblue: 0xb0c4de,\n\t\tlightyellow: 0xffffe0,\n\t\tlime: 0x00ff00,\n\t\tlimegreen: 0x32cd32,\n\t\tlinen: 0xfaf0e6,\n\t\tmagenta: 0xff00ff,\n\t\tmaroon: 0x800000,\n\t\tmaroon2: 0x7f0000,\n\t\tmaroon3: 0xb03060,\n\t\tmediumaquamarine: 0x66cdaa,\n\t\tmediumblue: 0x0000cd,\n\t\tmediumorchid: 0xba55d3,\n\t\tmediumpurple: 0x9370db,\n\t\tmediumseagreen: 0x3cb371,\n\t\tmediumslateblue: 0x7b68ee,\n\t\tmediumspringgreen: 0x00fa9a,\n\t\tmediumturquoise: 0x48d1cc,\n\t\tmediumvioletred: 0xc71585,\n\t\tmidnightblue: 0x191970,\n\t\tmintcream: 0xf5fffa,\n\t\tmistyrose: 0xffe4e1,\n\t\tmoccasin: 0xffe4b5,\n\t\tnavajowhite: 0xffdead,\n\t\tnavy: 0x000080,\n\t\toldlace: 0xfdf5e6,\n\t\tolive: 0x808000,\n\t\tolivedrab: 0x6b8e23,\n\t\torange: 0xffa500,\n\t\torangered: 0xff4500,\n\t\torchid: 0xda70d6,\n\t\tpalegoldenrod: 0xeee8aa,\n\t\tpalegreen: 0x98fb98,\n\t\tpaleturquoise: 0xafeeee,\n\t\tpalevioletred: 0xdb7093,\n\t\tpapayawhip: 0xffefd5,\n\t\tpeachpuff: 0xffdab9,\n\t\tperu: 0xcd853f,\n\t\tpink: 0xffc0cb,\n\t\tplum: 0xdda0dd,\n\t\tpowderblue: 0xb0e0e6,\n\t\tpurple: 0x800080,\n\t\tpurple2: 0x7f007f,\n\t\tpurple3: 0xa020f0,\n\t\trebeccapurple: 0x663399,\n\t\tred: 0xff0000,\n\t\trosybrown: 0xbc8f8f,\n\t\troyalblue: 0x4169e1,\n\t\tsaddlebrown: 0x8b4513,\n\t\tsalmon: 0xfa8072,\n\t\tsandybrown: 0xf4a460,\n\t\tseagreen: 0x2e8b57,\n\t\tseashell: 0xfff5ee,\n\t\tsienna: 0xa0522d,\n\t\tsilver: 0xc0c0c0,\n\t\tskyblue: 0x87ceeb,\n\t\tslateblue: 0x6a5acd,\n\t\tslategray: 0x708090,\n\t\tslategrey: 0x708090,\n\t\tsnow: 0xfffafa,\n\t\tspringgreen: 0x00ff7f,\n\t\tsteelblue: 0x4682b4,\n\t\ttan: 0xd2b48c,\n\t\tteal: 0x008080,\n\t\tthistle: 0xd8bfd8,\n\t\ttomato: 0xff6347,\n\t\tturquoise: 0x40e0d0,\n\t\tviolet: 0xee82ee,\n\t\twheat: 0xf5deb3,\n\t\twhite: 0xffffff,\n\t\twhitesmoke: 0xf5f5f5,\n\t\tyellow: 0xffff00,\n\t\tyellowgreen: 0x9acd32,\n\t}\n\n\t/**\n\t * Return a new [[CubeHelix]].\n\t *\n\t * @example chroma.cubehelix() // use the default helix\n\t * @example chroma.cubehelix().start(200).rotations(-0.5).gamma(0.8).lightness([0.3, 0.8])\n\t */\n\texport function cubehelix(\n\t\tstart = 300,\n\t\trotations = -1.5,\n\t\thue: number | [number, number] = 1,\n\t\tgamma = 1,\n\t\tlightness: number | [number, number] = [0, 1],\n\t) {\n\t\tconst f: CubeHelix = (t => f.at(t)) as CubeHelix\n\t\t;(Object.getOwnPropertyNames(CubeHelix.prototype) as (keyof typeof CubeHelix)[]).forEach(\n\t\t\tkey => (f[key] = CubeHelix.prototype[key]),\n\t\t)\n\t\tf.start(start)\n\t\tf.rotations(rotations)\n\t\tf.hue(hue)\n\t\tf.gamma(gamma)\n\t\tf.lightness(lightness)\n\t\treturn f\n\t}\n\n\t/**\n\t * [Dave Green's cubehelix color scheme](http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/)!\n\t *\n\t * A CubeHelix is a function defined on [0, 1] which returns colors.\n\t */\n\texport interface CubeHelix {\n\t\t(f: number): Color\n\t}\n\texport class CubeHelix {\n\t\tprivate _start!: number\n\t\tprivate _rotations!: number\n\t\tprivate _gamma!: number\n\t\tprivate _hue!: [number, number]\n\t\tprivate _lightness!: [number, number]\n\t\tpublic start(s: number) {\n\t\t\tif (undefined === s) {\n\t\t\t\treturn this._start\n\t\t\t}\n\t\t\tthis._start = s\n\t\t\treturn this\n\t\t}\n\t\tpublic rotations(r: number) {\n\t\t\tif (undefined === r) {\n\t\t\t\treturn this._rotations\n\t\t\t}\n\t\t\tthis._rotations = r\n\t\t\treturn this\n\t\t}\n\t\tpublic gamma(g: number) {\n\t\t\tif (undefined === g) {\n\t\t\t\treturn this._gamma\n\t\t\t}\n\t\t\tthis._gamma = g\n\t\t\treturn this\n\t\t}\n\t\tpublic hue(h: number | [number, number]) {\n\t\t\tif (undefined === h) {\n\t\t\t\treturn this._hue\n\t\t\t}\n\t\t\tthis._hue = Array.isArray(h) ? h : [h, h]\n\t\t\treturn this\n\t\t}\n\t\tpublic lightness(h: number | [number, number]) {\n\t\t\tif (undefined === h) {\n\t\t\t\treturn this._lightness\n\t\t\t}\n\t\t\tthis._lightness = Array.isArray(h) ? h : [h, h]\n\t\t\treturn this\n\t\t}\n\n\t\t/**\n\t\t * Convert to a [[Scale]].\n\t\t *\n\t\t * @example chroma.cubehelix().scale().correctLightness().domain(2, 22)\n\t\t */\n\t\tpublic scale() {\n\t\t\treturn scale(this)\n\t\t}\n\n\t\tpublic at(fract: number) {\n\t\t\tconst a = TWOPI * ((this._start + 120) / 360 + this._rotations * fract)\n\t\t\tconst l = lerp(this._lightness[0], this._lightness[1], fract) ** this._gamma\n\t\t\tconst h = lerp(this._hue[0], this._hue[1], fract)\n\t\t\tconst amp = (h * l * (1 - l)) / 2\n\t\t\tconst cos_a = cos(a)\n\t\t\tconst sin_a = sin(a)\n\t\t\tconst r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a)\n\t\t\tconst g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a)\n\t\t\tconst b = l + amp * (+1.97294 * cos_a)\n\t\t\treturn rgb([r * 255, g * 255, b * 255, 1])\n\t\t}\n\t}\n\n\t/**\n\t * Create a new random [Color] from a random point in the RGB color space.\n\t * @param randomSource A function which returns random `number`s in the interval [0; 1). Useful if you want to\n\t *     create a deterministic sequence of \"random\" colors. Defaults to `Math.random`.\n\t */\n\texport function random(randomSource = Math.random) {\n\t\treturn num((randomSource() * 0x1_00_00_00) | 0)\n\t}\n\n\t/**\n\t * Create a valid RGB color (`.clipped() == false`) from a random point in the CIELAB color space. This results in\n\t * more colors in the RGB color space where humans can perceive more differences.\n\t * @param randomSource A function which returns random `number`s in the interval [0; 1). Useful if you want to\n\t *     create a deterministic sequence of \"random\" colors. Defaults to `Math.random`.\n\t * @example chroma.random((() => { let i = 0; return () => (i = (i *Math.SQRT2) % 1); })())\n\t */\n\t// export function randomLab(randomSource = Math.random) {\n\t// \tconst labAMin = -87,\n\t// \t\tlabAMax = 99,\n\t// \t\tlabBMin = -108,\n\t// \t\tlabBMax = 95\n\t// \tlet maxIterations = 100\n\t// \twhile (maxIterations--) {\n\t// \t\tconst u = randomSource(),\n\t// \t\t\tv = randomSource(),\n\t// \t\t\tw = randomSource()\n\t// \t\t// The following matrix multiplication transform the random point (u v w) in the unit cube into the\n\t// \t\t// oriented bounding box (OBB) of the projection of the RGB space into the LAB space. This is necessary to\n\t// \t\t// avoid a huge number of misses.\n\t// \t\tconst color = chroma.lab(\n\t// \t\t\tu * -53.903 + v * -88.755 + w * 71.7 + 99.707,\n\t// \t\t\tu * -82.784 + v * 187.036 + w * -2.422 + -28.17,\n\t// \t\t\tu * -75.813 + v * -141.406 + w * -48.261 + 152.469,\n\t// \t\t)\n\t// \t\tconsole.log(color.lab())\n\t// \t\tconsole.log(color.rgba(false, false))\n\t// \t\tif (!color.clipped()) return color\n\t// \t}\n\t// \tthrow new Error(\"Could find a random color in 100 iterations\")\n\t// }\n\n\t/**\n\t * Mixes two colors. The mix ratio is a value between 0 and 1.\n\t * The color mixing produces different results based the color space used for interpolation.\n\t *\n\t * @param col2\n\t * @param f\n\t * @param m\n\t * @example chroma.mix('red', 'blue')\n\t * @example chroma.mix('red', 'blue', 0.25)\n\t * @example chroma.mix('red', 'blue', 0.75)\n\t *\n\t * @example chroma.mix('red', 'blue', 0.5, 'rgb')\n\t * @example chroma.mix('red', 'blue', 0.5, 'hsl')\n\t * @example chroma.mix('red', 'blue', 0.5, 'lab')\n\t * @example chroma.mix('red', 'blue', 0.5, 'lch')\n\t * @example chroma.mix('red', 'blue', 0.5, 'lrgb')\n\t */\n\texport function mix(col1: Chromable, col2: Chromable, f = 0.5, m: InterpolationMode = \"rgb\") {\n\t\tconst c1 = chroma(col1)\n\t\tconst c2 = chroma(col2)\n\t\tconst res = interpolators[m] && ((interpolators as any)[m](c1, c2, f, m) as Color)\n\t\tif (!res) {\n\t\t\tthrow new Error(\"color mode \" + m + \" is not supported\")\n\t\t}\n\t\treturn res.alpha(lerp(c1.alpha(), c2.alpha(), f))\n\t}\n\n\t/**\n\t * Parse a CSS color. See [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color) for all the possible\n\t * variants.\n\t *\n\t * @example chroma.css('hsl(2rad 90% 50% / 0.9)')\n\t * @example chroma.css('laserlemon')\n\t */\n\texport function css(cssString: string) {\n\t\tconst [r, g, b, a] = css2rgb(cssString)\n\t\treturn new Color(r, g, b, a)\n\t}\n\n\t/**\n\t * @example chroma.cmyk(0.2, 0.8, 0, 0)\n\t * @example chroma(0.2, 0.8, 0, 0, 'cmyk')\n\t */\n\texport function cmyk(cmyk: CMYK): Color\n\texport function cmyk(cyan1: number, magenta1: number, yellow1: number, key1: number): Color\n\texport function cmyk(...args: any[]) {\n\t\treturn guess(args, \"cmyk\")\n\t}\n\n\t/**\n\t * @example chroma.gl(1, 1, 0, 1)\n\t */\n\texport function gl(gl: RGBA | RGB): Color\n\t/**\n\t * @example chroma.gl([1, 0, 1, 0.5])\n\t */\n\texport function gl(red1: number, green1: number, blue1: number, alpha1: number): Color\n\texport function gl(...args: any[]) {\n\t\treturn guess(args, \"gl\")\n\t}\n\n\texport function hcg(hcg: HCG): Color\n\t/**\n\t * @param alpha1 default=1\n\t */\n\texport function hcg(h: number, c: number, g: number, alpha1?: number): Color\n\texport function hcg(...args: any[]) {\n\t\treturn guess(args, \"hcg\")\n\t}\n\n\texport function lch(lch: LCH): Color\n\t/**\n\t * @param alpha1 default=1\n\t */\n\texport function lch(h: number, c: number, l: number, alpha1?: number): Color\n\texport function lch(...args: any[]) {\n\t\treturn guess(args, \"lch\")\n\t}\n\n\texport function hsi(hsi: HSI): Color\n\t/**\n\t * @param alpha1 default=1\n\t */\n\texport function hsi(h: number, s: number, i: number, alpha1?: number): Color\n\texport function hsi(...args: any[]) {\n\t\treturn guess(args, \"hsi\")\n\t}\n\n\texport function hsl(hsl: HSL): Color\n\t/**\n\t * @param alpha1 default=1\n\t * @example chroma.hsl(30, 1, 0.5)\n\t * @example chroma.hsl(30, 0.6, 0.5)\n\t */\n\texport function hsl(hueDegrees: number, saturation1: number, lightness1: number, alpha1?: number): Color\n\texport function hsl(...args: any[]) {\n\t\treturn guess(args, \"hsl\")\n\t}\n\n\texport function hsv(hsv: LAB): Color\n\texport function hsv(h: number, s: number, v: number): Color\n\texport function hsv(...args: any[]) {\n\t\treturn guess(args, \"hsv\")\n\t}\n\n\t/**\n\t *\n\t * @param temperature\n\t * @example chroma.kelvin(2000) // candle light\n\t * @example chroma.kelvin(3500) // sunset\n\t * @example chroma.kelvin(6500) // daylight\n\t * @example x0_1 => chroma.kelvin(x0_1 * 30000) // effective range: [0; 30000]\n\t */\n\texport function kelvin(temperature: number) {\n\t\tconst [r, g, b] = kelvin2rgb(temperature)\n\t\treturn new Color(r, g, b)\n\t}\n\n\texport function lab(lab: LAB): Color\n\t/**\n\t * @param alpha1 default=1\n\t */\n\texport function lab(lightness1: number, a1: number, b: number, alpha1?: number): Color\n\texport function lab(...args: any[]) {\n\t\treturn guess(args, \"lab\")\n\t}\n\n\t/**\n\t * @example chroma.num(0x663399) // rebeccapurple\n\t */\n\texport function num(num: number) {\n\t\tconst [r, g, b] = num2rgb(num)\n\t\treturn new Color(r, g, b)\n\t}\n\n\texport function rgb(rgb: RGBA | RGB): Color\n\t/**\n\t * @param alpha1 default=1\n\t * @example chroma.rgb(0, 100, 200)\n\t */\n\texport function rgb(red255: number, green255: number, blue255: number, alpha1?: number): Color\n\texport function rgb(...args: any[]) {\n\t\treturn guess(args, \"rgb\")\n\t}\n\n\texport function xyz(xyz: XYZ): Color\n\t/** @param alpha1 default=1 */\n\texport function xyz(x1: number, y1: number, z1: number, alpha1?: number): Color\n\texport function xyz(...args: any[]) {\n\t\treturn guess(args, \"xyz\")\n\t}\n\n\t/**\n\t * Similar to chroma.mix, but accepts more than two colors.\n\t *\n\t * @example colors = ['#ddd', 'yellow', 'red', 'teal']\n\t * @example chroma.average(colors) // default = 'rgb'\n\t * @example chroma.average(colors, 'lab')\n\t * @example chroma.average(colors, 'lch')\n\t * @example chroma.average(colors, 'lrgb')\n\t * @example chroma.average(['red', 'rgba(0,0,0,0.5)']).css()\n\t */\n\texport function average(chromables: Chromable[], mode: InterpolationMode = \"rgb\") {\n\t\tconst colors = chromables.map(c => chroma(c))\n\t\tif (mode == \"lrgb\") {\n\t\t\treturn _average_lrgb(colors)\n\t\t}\n\t\tif (mode == \"num\") {\n\t\t\tlet numSum = 0,\n\t\t\t\talphaSum = 0\n\t\t\tfor (const col of colors) {\n\t\t\t\tnumSum += col.num()\n\t\t\t\talphaSum += col.alpha()\n\t\t\t}\n\t\t\treturn num(numSum / colors.length).alpha(alphaSum / colors.length)\n\t\t}\n\t\tconst xyz = [0, 0, 0]\n\t\tlet dx = 0\n\t\tlet dy = 0\n\t\tlet alphaSum = 0\n\t\tfor (const c of colors) {\n\t\t\tconst xyz2 = c[mode]()\n\t\t\talphaSum += c.alpha()\n\t\t\tconsole.log(alphaSum)\n\n\t\t\tfor (let i = 0; i < xyz.length; i++) {\n\t\t\t\tif (mode.charAt(i) == \"h\") {\n\t\t\t\t\tconst A = xyz2[i] * DEG2RAD\n\t\t\t\t\tdx += cos(A)\n\t\t\t\t\tdy += sin(A)\n\t\t\t\t} else {\n\t\t\t\t\txyz[i] += xyz2[i]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (let i = 0; i < xyz.length; i++) {\n\t\t\tif (mode.charAt(i) == \"h\") {\n\t\t\t\tconst A = atan2(dy / colors.length, dx / colors.length) * RAD2DEG\n\t\t\t\txyz[i] = (A + 360) % 360\n\t\t\t} else {\n\t\t\t\txyz[i] = xyz[i] / colors.length\n\t\t\t}\n\t\t}\n\t\treturn guess(xyz, mode).alpha(alphaSum / colors.length)\n\t}\n\n\t/**\n\t *\n\t * @param chromables\n\t * @example chroma.scale('black', 'red', 'gold') // linear interpolation\n\t * @example chroma.bezier('black', 'red', 'gold') // bezier interpolation\n\t */\n\texport function bezier(chromables: Chromable[]): { (t: number): Color; scale(): Scale }\n\texport function bezier(...chromables: Chromable[]): { (t: number): Color; scale(): Scale }\n\texport function bezier(...args: any[]) {\n\t\tconst chromables: Chromable[] = Array.isArray(args[0]) ? args[0] : args\n\t\tconst f = _bezier(chromables) as { (t: number): Color; scale(): Scale }\n\t\tf.scale = CubeHelix.prototype.scale\n\t\treturn f\n\t}\n\n\t/**\n\t * Blends two colors using RGB channel-wise blend functions.\n\t * @param bottom\n\t * @param top\n\t * @param mode\n\t * @example chroma.blend('4CBBFC', 'EEEE22', 'multiply')\n\t * @example chroma.blend('4CBBFC', 'EEEE22', 'darken')\n\t * @example chroma.blend('4CBBFC', 'EEEE22', 'lighten')\n\t */\n\texport function blend(bottom: Chromable, top: Chromable, mode: BlendMode) {\n\t\tif (!blend_fs[mode]) {\n\t\t\tthrow new Error(\"unknown blend mode \" + mode)\n\t\t}\n\t\treturn blend_fs[mode](bottom, top)\n\t}\n\texport type BlendMode = keyof typeof blend_fs\n\tnamespace blend_fs {\n\t\texport const normal = blend_f(each((a, _) => a))\n\t\texport const multiply = blend_f(each((a, b) => (a * b) / 255))\n\t\texport const screen = blend_f(each(_screen))\n\t\texport const overlay = blend_f(each(_overlay))\n\t\texport const darken = blend_f(each(min))\n\t\texport const lighten = blend_f(each(max))\n\t\texport const dodge = blend_f(each(_dodge))\n\t\texport const burn = blend_f(each(_burn))\n\t}\n\n\t/**\n\t * @param colors\n\t * @example scale = chroma.scale(['yellow', '008ae5'])\n\t * @example scale(0.25)\n\t * @example scale(0.5)\n\t * @example scale(0.75)\n\t * @example chroma.scale('Viridis')\n\t */\n\texport function scale(colors: Chromable[] | keyof typeof brewer | ((f: number) => Color)): Scale\n\texport function scale(...colors: Chromable[]): Scale\n\texport function scale(...args: any[]) {\n\t\tconst f: Scale = (t => (f as any)._at(t)) as Scale\n\t\t;(Object.getOwnPropertyNames(Scale.prototype) as (keyof typeof Scale)[]).forEach(\n\t\t\tkey => (f[key] = Scale.prototype[key]),\n\t\t)\n\t\tif (Array.isArray(args[0])) args = args[0]\n\t\tif (args.length == 1 && \"string\" == typeof args[0]) args = brewer[args[0] as keyof typeof brewer]\n\t\t;(f as any)._init(\"function\" == typeof args[0] ? args[0] : args.map(a => chroma(a)))\n\t\t//f.setColors(args.length > 1 ? args : args[0])\n\t\treturn f\n\t}\n\t/**\n\t * A color scale, created with chroma.scale, is a function that maps numeric values to a color palette.\n\t *\n\t * The type parameter describes the output type and can be changed with out(). Defaults to Color objects.\n\t *\n\t * @param T The output format. default=Color\n\t * @example chroma.scale('Purples')\n\t * @example chroma.scale('Purples')(0.4)\n\t */\n\texport interface Scale<T = Color> {\n\t\t(val: number): T\n\t}\n\texport class Scale<T = Color> {\n\t\tprivate _colors!: Color[] | ((t: number) => Color)\n\t\tprivate _classes!: number[] | undefined\n\t\t/**\n\t\t * Color cache. undefined if the cache should not be used.\n\t\t */\n\t\tprivate _cache!: Map<number, Color> | undefined\n\t\tprivate _correctLightness!: boolean\n\t\tprivate _gamma!: number\n\t\tprivate _mode!: InterpolationMode\n\t\tprivate _out!: ColorFormat | undefined\n\t\tprivate _min!: number\n\t\tprivate _max!: number\n\t\tprivate _paddingLeft!: number\n\t\tprivate _paddingRight!: number\n\t\t// positions of the colors on the interval [0, 1]. guaranteed to have the same length as _colors\n\t\t// undefined when _colors is a function\n\t\tprivate _pos: number[] | undefined\n\n\t\t/**\n\t\t * Get the current scale classes.\n\t\t */\n\t\tpublic classes(): number[]\n\t\t/**\n\t\t * Make the scale return a number of distint color instead of a continuous gradient.\n\t\t * If you pass a number the scale will broken into equi-distant classes:\n\t\t *\n\t\t * @example chroma.scale('OrRd') // continous\n\t\t * @example chroma.scale('OrRd').classes(5) // equidistant classes\n\t\t * @example chroma.scale('OrRd').classes(8)\n\t\t *\n\t\t * @example chroma.scale('OrRd').classes([0, 6, 11, 17, 20]) // also sets domain\n\t\t */\n\t\tpublic classes(classes: number | number[]): this\n\t\tpublic classes(classes?: number | number[]) {\n\t\t\tif (undefined === classes) {\n\t\t\t\treturn this._classes\n\t\t\t}\n\t\t\tif (Array.isArray(classes)) {\n\t\t\t\tthis._classes = classes\n\t\t\t\tthis.domain(classes[0], classes[classes.length - 1])\n\t\t\t} else {\n\t\t\t\tif (classes % 1 != 0 || classes < 1) throw new Error(\"invalid classes param\")\n\t\t\t\t// const d = analyze(this.domain())\n\t\t\t\tthis._classes = limits(this.domain(), \"e\", classes)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\t/**\n\t\t * Get the domain.\n\t\t * @return If _colors is a function, [this._min, this._max]. If _colors is an array of colors, an array with the\n\t\t * same length as the number of colors.\n\t\t * @example chroma.scale(\"red\", \"white\", \"blue\").domain(0, 20).domain() // == [0, 10, 20]\n\t\t */\n\t\tpublic domain(): number[]\n\t\t/**\n\t\t * Set the domain interval on which the scale is defined. Colors are distributed equidistantly along the\n\t\t * interval.\n\t\t * @param start\n\t\t * @param end\n\t\t * @return `this`\n\t\t * @example chroma.scale(\"red\", \"white\", \"blue\").domain(0, 100)(50) // == white\n\t\t * @example chroma.scale(\"red\", \"white\", \"blue\").domain(0, 0.25, 1).domain(0, 100).domain() // == [0, 25, 100]\n\t\t */\n\t\tpublic domain(start: number, end: number): this\n\t\t/**\n\t\t * Set the domain interval and the individual positions of the colors. The number of passed values must match\n\t\t * the number of colors which define the scale. Not valid if the scale is defined by a function.\n\t\t * @param domain The positions of all scale colors. Values must be in ascending order and should not have\n\t\t * duplicates.\n\t\t * @return `this`\n\t\t * @example scale = chroma.scale(\"red\", \"white\", \"blue\").domain(0, 25, 100)\n\t\t * @example scale(25) // == white\n\t\t * @example scale(100) // == blue\n\t\t * @example scale(50) // == #aaaaff\n\t\t */\n\t\tpublic domain(...domain: number[]): this\n\t\tpublic domain(...domain: number[]): number[] | this {\n\t\t\tif (undefined === domain[0]) {\n\t\t\t\treturn \"function\" !== typeof this._colors\n\t\t\t\t\t? this._pos!.map(p => lerp(this._min, this._max, p))\n\t\t\t\t\t: [this._min, this._max]\n\t\t\t}\n\t\t\tthis._min = domain[0]\n\t\t\tthis._max = domain[domain.length - 1]\n\t\t\tif (2 == domain.length) {\n\t\t\t\tif (\"function\" !== typeof this._colors) {\n\t\t\t\t\t// equidistant positions\n\t\t\t\t\tthis._pos = this._colors.map((_, c) => c / (this._colors.length - 1))\n\t\t\t\t}\n\t\t\t} else if (\"function\" !== typeof this._colors && domain.length == this._colors.length) {\n\t\t\t\tthis._pos = domain.map(d => lerpInv(this._min, this._max, d))\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"invalid domain \" + domain)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\t/**\n\t\t * Get the interpolation mode used when calculating colors.\n\t\t */\n\t\tpublic mode(): InterpolationMode\n\t\t/**\n\t\t * Set the interpolation mode used when calculating colors. The defaut mode is \"rgb\".\n\t\t * See also {@link chroma#mix}\n\t\t * @param mode the mode to set.\n\t\t * @return `this`\n\t\t * @example chroma.scale(\"red\", \"green\").mode(\"lab\")\n\t\t * @example chroma.scale(\"red\", \"green\").mode(\"lrgb\")\n\t\t */\n\t\tpublic mode(mode: InterpolationMode): this\n\t\tpublic mode(mode?: InterpolationMode) {\n\t\t\tif (undefined === mode) {\n\t\t\t\treturn this._mode\n\t\t\t}\n\t\t\tthis._mode = mode\n\t\t\tthis._resetCache()\n\t\t\treturn this\n\t\t}\n\n\t\t/**\n\t\t * Set the output format return by `this(x)` and `this.colors(n)`.\n\t\t * @param outputFormat The color format to use. Pass `undefined` to return [Color] objects.\n\t\t * @return `this`\n\t\t * @example chroma.scale(\"red\", \"white\").out(\"hex\")(0) // == \"#ff0000\"\n\t\t * @example chroma.scale(\"red\", \"white\").out(\"num\").colors(2) // == [0xff0000, 0xffffff]\n\t\t */\n\t\tpublic out<M extends ColorFormat | undefined>(\n\t\t\toutputFormat: M,\n\t\t): Scale<M extends ColorFormat ? ReturnType<Color[M]> : Color> {\n\t\t\tthis._out = outputFormat\n\t\t\treturn this as any\n\t\t}\n\n\t\t/**\n\t\t * This makes sure the lightness range is spread evenly across a color scale. Especially useful when working\n\t\t * with [multi-hue color scales](https://www.vis4.net/blog/2013/09/mastering-multi-hued-color-scales/), where\n\t\t * simple gamma correction can't help you very much.\n\t\t *\n\t\t * @example chroma.scale('black','red','yellow','white')\n\t\t * @example chroma.scale('black','red','yellow','white').correctLightness()\n\t\t */\n\t\tpublic correctLightness(enableCorrectLightness = true) {\n\t\t\tif (this._correctLightness != enableCorrectLightness) {\n\t\t\t\tthis._resetCache()\n\t\t\t\tconst colors = this._colors\n\t\t\t\tif (enableCorrectLightness && \"function\" !== typeof colors) {\n\t\t\t\t\t// make sure that the colors have ascending or descending lightnesses\n\t\t\t\t\tlet sign = 0\n\t\t\t\t\tfor (let i = 1; i < colors.length; i++) {\n\t\t\t\t\t\tconst sign2 = colors[i].lab()[0] - colors[i - 1].lab()[0]\n\t\t\t\t\t\tif (0 == sign) {\n\t\t\t\t\t\t\tsign = sign2\n\t\t\t\t\t\t} else if (sign * sign2 < 0) {\n\t\t\t\t\t\t\tthrow new Error(\"scale color lightnesses must be monotonic\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._correctLightness = enableCorrectLightness\n\t\t\treturn this\n\t\t}\n\n\t\t/**\n\t\t * Get the padding.\n\t\t * @returns [paddingLeft, paddingRight]\n\t\t */\n\t\tpublic padding(): [number, number]\n\t\t/**\n\t\t * Set the padding. Positive values will \"cut off\" the ends of gradient, while negative values will add a\n\t\t * section of constant color at the ends.\n\t\t * @example chroma.scale(\"red\", \"white\").padding(0.2)\n\t\t * @example chroma.scale(\"red\", \"white\").padding(0.1)(0) // == chroma('#ff1a1a'), instead of red\n\t\t * @example chroma.scale(\"red\", \"white\").padding(-0.1)(0) // == chroma('red')\n\t\t * @param paddingLeft padding on left side.(lower-valued end of the interval).\n\t\t * @param paddingRight padding on right (higher-valued end of the interval).\n\t\t * default=paddingLeft\n\t\t */\n\t\tpublic padding(paddingLeft: number, paddingRight?: number): this\n\t\tpublic padding(paddingLeft?: number, paddingRight: number | undefined = paddingLeft) {\n\t\t\tif (!paddingLeft) {\n\t\t\t\treturn [this._paddingLeft, this._paddingRight]\n\t\t\t}\n\t\t\tthis._paddingLeft = paddingLeft\n\t\t\tthis._paddingRight = paddingRight!\n\t\t\treturn this\n\t\t}\n\n\t\t/**\n\t\t * Get a number of equidistant colors.\n\t\t * @param numColors The number of colors to return.\n\t\t * @param format Output format. Defaults to `\"hex\"`. Pass `false` to get {@link Color} objects.\n\t\t * @returns If `numColors` is `undefined`, the colors which define this [Scale]. If `numColors` is 1,\n\t\t * `[this((min + max) / 2)]`. Otherwise, an array where the first element is `this(min)`, the last one is\n\t\t * `this(max)` and the rest are equidistant samples between min and max.\n\t\t * @example chroma.scale('OrRd').colors(5)\n\t\t * @example chroma.scale(['white', 'black']).colors(12)\n\t\t */\n\t\tpublic colors(numColors?: number, format: ColorFormat | false = \"hex\"): T[] {\n\t\t\tlet result: Color[]\n\t\t\tif (undefined === numColors) {\n\t\t\t\tresult = (this._colors as Color[]).slice()\n\t\t\t} else if (numColors == 1) {\n\t\t\t\tresult = [this._color((this._min + this._max) / 2)]\n\t\t\t} else if (numColors > 1) {\n\t\t\t\tresult = Array.from({ length: numColors }, (_, i) =>\n\t\t\t\t\tthis._color(lerp(this._min, this._max, i / (numColors - 1))),\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\t// returns all colors based on the defined classes\n\t\t\t\tlet samples\n\t\t\t\tif (this._classes && this._classes.length > 2) {\n\t\t\t\t\tsamples = Array.from(\n\t\t\t\t\t\t{ length: this._classes.length - 1 },\n\t\t\t\t\t\t(_, i) => (this._classes![i] + this._classes![i + 1]) * 0.5,\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\tsamples = this.domain() // TODO?!\n\t\t\t\t}\n\t\t\t\tresult = samples.map(s => this._color(s))\n\t\t\t}\n\n\t\t\treturn (format ? result.map(c => c[format]()) : result) as any\n\t\t}\n\n\t\t/**\n\t\t * Get whether the cache is enabled. Defaults to true.\n\t\t */\n\t\tpublic cache(): boolean\n\t\t/**\n\t\t * Enable or disable the cache.\n\t\t * @param enableCache Whether the cache should be enabled.\n\t\t */\n\t\tpublic cache(enableCache: boolean): this\n\t\tpublic cache(enableCache?: boolean) {\n\t\t\tif (undefined === enableCache) {\n\t\t\t\treturn !!this._cache\n\t\t\t}\n\t\t\tthis._cache = enableCache ? this._cache || new Map() : undefined\n\t\t\treturn this\n\t\t}\n\n\t\t/**\n\t\t * Get the current gamma value. Defaults to 1.\n\t\t */\n\t\tpublic gamma(): number\n\t\t/**\n\t\t * Set the gamma value. Gamma-correction can be used to \"shift\" a scale's center more the the beginning (gamma <\n\t\t * 1) or end (gamma > 1), typically used to \"even\" the lightness gradient. Default is 1.\n\t\t * @example chroma.scale('YlGn').gamma(0.5)\n\t\t * @example chroma.scale('YlGn').gamma(1)\n\t\t * @example chroma.scale('YlGn').gamma(2)\n\t\t */\n\t\tpublic gamma(gamma: number): this\n\t\tpublic gamma(gamma?: number) {\n\t\t\tif (undefined === gamma) {\n\t\t\t\treturn this._gamma\n\t\t\t}\n\t\t\tthis._gamma = gamma\n\t\t\treturn this\n\t\t}\n\n\t\t/**\n\t\t * @ignore\n\t\t */\n\t\tpublic _at(t: number) {\n\t\t\tconst c = this._color(t)\n\t\t\treturn this._out ? c[this._out]() : c\n\t\t}\n\n\t\t/**\n\t\t * @ignore\n\t\t */\n\t\tpublic _init(colorsOrFunction: Color[] | ((t: number) => Color)) {\n\t\t\tthis._colors = colorsOrFunction\n\t\t\tif (\"function\" != typeof colorsOrFunction) {\n\t\t\t\tthis._pos = colorsOrFunction.map((_, i) => i / (colorsOrFunction.length - 1))\n\t\t\t}\n\t\t\tthis._mode = \"rgb\"\n\t\t\tthis.domain(0, 1)\n\t\t\tthis._paddingLeft = 0\n\t\t\tthis._paddingRight = 0\n\t\t\tthis._correctLightness = false\n\t\t\tthis._cache = new Map()\n\t\t\tthis._gamma = 1\n\t\t}\n\n\t\tprivate _getClass(value: number) {\n\t\t\treturn this._classes!.findIndex(cls => value <= cls) - 1\n\t\t}\n\n\t\tprivate _color(val: number, bypassMap = false) {\n\t\t\tlet t\n\t\t\tif (!bypassMap) {\n\t\t\t\tconst min = this._min,\n\t\t\t\t\tmax = this._max\n\t\t\t\tif (this._classes && this._classes.length > 2) {\n\t\t\t\t\tconst c = this._getClass(val)\n\t\t\t\t\tt = c / (this._classes.length - 2)\n\t\t\t\t} else if (max !== min) {\n\t\t\t\t\tt = (val - min) / (max - min)\n\t\t\t\t} else {\n\t\t\t\t\tt = 1\n\t\t\t\t}\n\t\t\t\tif (this._correctLightness) {\n\t\t\t\t\tt = this._tCorrectedLightness(t)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tt = val\n\t\t\t}\n\t\t\tt = t ** this._gamma\n\t\t\tt = (this._paddingLeft + t) / (1 + this._paddingLeft + this._paddingRight)\n\t\t\t//\tt = this._paddingLeft + t * (1 - this._paddingLeft - this._paddingRight)\n\t\t\tt = clamp(t, 0, 1)\n\t\t\tconst tHash = t\n\t\t\tconst cacheResult = this._cache && this._cache.get(tHash)\n\t\t\tif (cacheResult) {\n\t\t\t\treturn cacheResult\n\t\t\t} else {\n\t\t\t\tlet col: Color\n\t\t\t\tif (Array.isArray(this._colors)) {\n\t\t\t\t\tfor (let i = 0; i < this._pos!.length; i++) {\n\t\t\t\t\t\tconst p = this._pos![i]\n\t\t\t\t\t\tif (t <= p) {\n\t\t\t\t\t\t\tcol = this._colors[i]\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (t >= p && i == this._pos!.length - 1) {\n\t\t\t\t\t\t\tcol = this._colors[i]\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (t > p && t < this._pos![i + 1]) {\n\t\t\t\t\t\t\tt = (t - p) / (this._pos![i + 1] - p)\n\t\t\t\t\t\t\tcol = mix(this._colors[i], this._colors[i + 1], t, this._mode)\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcol = this._colors(t)\n\t\t\t\t}\n\t\t\t\tif (this._cache) {\n\t\t\t\t\t// tslint:disable-next-line\n\t\t\t\t\tthis._cache.set(tHash, col!)\n\t\t\t\t}\n\t\t\t\t// tslint:disable-next-line\n\t\t\t\treturn col!\n\t\t\t}\n\t\t}\n\t\tprivate _tCorrectedLightness(t0_1: number) {\n\t\t\tconst L0 = this._color(0, true).lab()[0]\n\t\t\tconst L1 = this._color(1, true).lab()[0]\n\t\t\tconst L_ideal = lerp(L0, L1, t0_1)\n\t\t\treturn bisect(t => this._color(t, true).lab()[0] - L_ideal, 0, 1, 8)\n\t\t}\n\t\tprivate _resetCache() {\n\t\t\tif (this._cache) this._cache.clear()\n\t\t}\n\t}\n\n\texport namespace scales {\n\t\t/**\n\t\t * @example chroma.scales.cool()\n\t\t */\n\t\texport function cool() {\n\t\t\treturn scale([hsl(180, 1, 0.9), hsl(250, 0.7, 0.4)])\n\t\t}\n\n\t\t/**\n\t\t * @example chroma.scales.hot()\n\t\t */\n\t\texport function hot() {\n\t\t\treturn scale([\"#000\", \"#f00\", \"#ff0\", \"#fff\"]).mode(\"rgb\")\n\t\t}\n\t}\n\n\t/**\n\t * Computes the WCAG contrast ratio between two colors. A minimum contrast of 4.5:1\n\t * [is recommended](http://www.w3.org/TR/WCAG20-TECHS/G18.html) to ensure that text is still readable against a\n\t * background color.\n\t *\n\t * @param a\n\t * @param b\n\t */\n\texport function contrast(a: Chromable, b: Chromable) {\n\t\tconst l1 = chroma(a).luminance()\n\t\tconst l2 = chroma(b).luminance()\n\t\tif (l1 > l2) {\n\t\t\treturn (l1 + 0.05) / (l2 + 0.05)\n\t\t} else {\n\t\t\treturn (l2 + 0.05) / (l1 + 0.05)\n\t\t}\n\t}\n\n\t/**\n\t * Compute the [euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance#Three_dimensions) between two\n\t * colors in a given color space.\n\t * @param a First color.\n\t * @param b Second color.\n\t * @param mode The color space in which to compute the distance. Defaults to \"lab\".\n\t * @example chroma.distance('#fff', '#ff0', 'rgb')\n\t * @example chroma.distance('#fff', '#f0f', 'rgb')\n\t * @example chroma.distance('#fff', '#ff0')\n\t * @example chroma.distance('#fff', '#f0f')\n\t */\n\texport function distance(a: Chromable, b: Chromable, mode: ColorMode = \"lab\") {\n\t\tconst l1 = chroma(a)[mode]()\n\t\tconst l2 = chroma(b)[mode]()\n\t\tconst channelDifferences = l1.map(\n\t\t\t(channelValue: number, channelIndex: number) => channelValue - l2[channelIndex],\n\t\t)\n\t\treturn hypot(...channelDifferences)\n\t}\n\n\t/**\n\t * Computes color difference as developed by the Colour Measurement Committee of the Society of Dyers and Colourists\n\t * (CMC) in 1984. The implementation is adapted from Bruce Lindbloom. The parameters L and C are weighting factors\n\t * for lightness and chromaticity.\n\t * @param reference\n\t * @param sample\n\t * @param L\n\t * @param C\n\t * @example [r = '#ededee', s = '#edeeed', chroma.deltaE(r, s)]\n\t * @example [r = '#ececee', s = '#eceeec', chroma.deltaE(r, s)]\n\t * @example [r = '#e9e9ee', s = '#e9eee9', chroma.deltaE(r, s)]\n\t * @example [r = '#e4e4ee', s = '#e4eee4', chroma.deltaE(r, s)]\n\t * @example [r = '#e0e0ee', s = '#e0eee0', chroma.deltaE(r, s)]\n\t */\n\texport function deltaE(reference: Chromable, sample: Chromable, L = 1, C = 1) {\n\t\tconst [L1, a1, b1] = chroma(reference).lab()\n\t\tconst [L2, a2, b2] = chroma(sample).lab()\n\t\tconst c1 = sqrt(a1 * a1 + b1 * b1)\n\t\tconst c2 = sqrt(a2 * a2 + b2 * b2)\n\t\tconst sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + 0.01765 * L1)\n\t\tconst sc = (0.0638 * c1) / (1.0 + 0.0131 * c1) + 0.638\n\t\tconst h1 = norm360(c1 < 0.000001 ? 0.0 : atan2(b1, a1) * RAD2DEG)\n\t\tconst t =\n\t\t\th1 >= 164.0 && h1 <= 345.0\n\t\t\t\t? 0.56 + abs(0.2 * cos((h1 + 168.0) * DEG2RAD))\n\t\t\t\t: 0.36 + abs(0.4 * cos((h1 + 35.0) * DEG2RAD))\n\t\tconst c4 = c1 * c1 * c1 * c1\n\t\tconst f = sqrt(c4 / (c4 + 1900.0))\n\t\tconst sh = sc * (f * t + 1.0 - f)\n\t\tconst delL = L1 - L2\n\t\tconst delC = c1 - c2\n\t\tconst delA = a1 - a2\n\t\tconst delB = b1 - b2\n\t\tconst dH2 = delA * delA + delB * delB - delC * delC\n\t\tconst v1 = delL / (L * sl)\n\t\tconst v2 = delC / (C * sc)\n\t\tconst v3 = sh\n\t\treturn sqrt(v1 * v1 + v2 * v2 + dH2 / (v3 * v3))\n\t}\n\ttype DataInfo = {\n\t\tmin: number\n\t\tmax: number\n\t\tsum: number\n\t\tvalues: number[]\n\t\tcount: number\n\t\tdomain: [number, number]\n\t\tlimits(mode: LimitsMode, num: number): number[]\n\t}\n\texport function analyze(data: number[]): DataInfo {\n\t\tconst r: DataInfo = {\n\t\t\tmin: Infinity,\n\t\t\tmax: -Infinity,\n\t\t\tsum: 0,\n\t\t\tvalues: [] as number[],\n\t\t\tcount: 0,\n\t\t} as DataInfo\n\t\tfunction add(val: number) {\n\t\t\tif (val != undefined && !isNaN(val)) {\n\t\t\t\tr.values.push(val)\n\t\t\t\tr.sum += val\n\t\t\t\tif (val < r.min) r.min = val\n\t\t\t\tif (val > r.max) r.max = val\n\t\t\t\tr.count += 1\n\t\t\t}\n\t\t}\n\t\tdata.forEach(val => add(val))\n\t\tr.domain = [r.min, r.max]\n\t\tr.limits = function(mode, num) {\n\t\t\treturn limits(this, mode, num)\n\t\t}\n\t\treturn r\n\t}\n\n\ttype LimitsMode = \"c\" | \"e\" | \"q\" | \"l\" | \"k\"\n\texport function limits(data: number[] | DataInfo, mode: LimitsMode = \"e\", num = 7): number[] {\n\t\tconst info = Array.isArray(data) ? analyze(data) : data\n\t\tconst { min, max, values } = info\n\t\tvalues.sort((a, b) => a - b)\n\t\tif (num == 1) {\n\t\t\treturn [min, max]\n\t\t}\n\t\tif (mode.startsWith(\"c\")) {\n\t\t\treturn [min, max]\n\t\t} else if (mode.startsWith(\"e\")) {\n\t\t\treturn Array.from({ length: num + 1 }, (_, i) => lerp(min, max, i / num))\n\t\t} else if (mode.startsWith(\"l\")) {\n\t\t\tif (min <= 0) {\n\t\t\t\tthrow new Error(\"Logarithmic scales are only possible for values > 0\")\n\t\t\t}\n\t\t\tconst min_log = Math.LOG10E * log(min)\n\t\t\tconst max_log = Math.LOG10E * log(max)\n\t\t\treturn Array.from({ length: num + 1 }, (_, i) => 10 ** lerp(min_log, max_log, i / num))\n\t\t} else if (mode.startsWith(\"q\")) {\n\t\t\treturn Array.from({ length: num + 1 }, (_, i) => {\n\t\t\t\tconst p = ((values.length - 1) * i) / num\n\t\t\t\tconst pb = floor(p)\n\t\t\t\treturn pb == p ? values[pb] : lerp(values[pb], values[pb + 1], p - pb)\n\t\t\t})\n\t\t} else if (mode.startsWith(\"k\")) {\n\t\t\t// implementation based on\n\t\t\t// http://code.google.com/p/figue/source/browse/trunk/figue.js#336\n\t\t\t// simplified for 1-d input values\n\t\t\tconst n = values.length\n\t\t\tconst assignments = new Array(n)\n\t\t\tconst clusterSizes = new Array(num)\n\t\t\tlet repeat = true\n\t\t\tlet nb_iters = 0\n\t\t\tlet centroids = Array.from({ length: num + 1 }, (_, i) => lerp(min, max, i / num))\n\t\t\tdo {\n\t\t\t\t// assignment step\n\t\t\t\tclusterSizes.fill(0)\n\t\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\t\tconst value = values[i]\n\t\t\t\t\tconst minDistIndex = indexOfMax(centroids, c => -abs(c - value))\n\t\t\t\t\tclusterSizes[minDistIndex]++\n\t\t\t\t\tassignments[i] = minDistIndex\n\t\t\t\t}\n\n\t\t\t\t// update centroids step\n\t\t\t\tconst newCentroids = new Array(num).fill(0)\n\t\t\t\tfor (let i = 0; i < assignments.length; i++) {\n\t\t\t\t\tconst cluster = assignments[i]\n\t\t\t\t\tnewCentroids[cluster] += values[i]\n\t\t\t\t}\n\t\t\t\tfor (let j = 0; j < newCentroids.length; j++) {\n\t\t\t\t\tnewCentroids[j] /= clusterSizes[j]\n\t\t\t\t}\n\n\t\t\t\t// check convergence\n\t\t\t\trepeat = newCentroids.some((nc, j) => nc != centroids[j])\n\t\t\t\tcentroids = newCentroids\n\t\t\t} while (nb_iters++ < 200 && repeat)\n\n\t\t\t// finished k-means clustering\n\t\t\t// the next part is borrowed from gabrielflor.it\n\t\t\tconst kClusters: number[][] = Array.from({ length: num }, () => [])\n\t\t\tfor (let i = 0; i < assignments.length; i++) {\n\t\t\t\tconst cluster = assignments[i]\n\t\t\t\tkClusters[cluster].push(values[i])\n\t\t\t}\n\t\t\tconst tmpKMeansBreaks = []\n\t\t\tfor (const kCluster of kClusters) {\n\t\t\t\ttmpKMeansBreaks.push(kCluster[0], kCluster[kCluster.length - 1])\n\t\t\t}\n\t\t\ttmpKMeansBreaks.sort((a, b) => a - b)\n\n\t\t\tconst limits = []\n\t\t\tlimits.push(tmpKMeansBreaks[0])\n\t\t\tfor (let i = 1; i < tmpKMeansBreaks.length; i += 2) {\n\t\t\t\tconst v = tmpKMeansBreaks[i]\n\t\t\t\tif (!isNaN(v) && limits.indexOf(v) == -1) {\n\t\t\t\t\tlimits.push(v)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn limits\n\t\t} else {\n\t\t\tthrow new Error(\"unknown mode\")\n\t\t}\n\t}\n}\n\nconst interpolators: {\n\t[K in InterpolationMode]?: (color1: chroma.Color, color2: chroma.Color, f: number, mode: K) => chroma.Color\n} = {}\n\n// const _guess_formats: { p: number; test: (args: any[]) => ColorFormat | undefined }[] = []\nconst _input: {\n\t[mode: string]: (...args: any[]) => RGB | RGBA\n} = {}\n\nfunction linear_interpolator(col1: chroma.Color, col2: chroma.Color, f: number, m: ColorMode) {\n\tconst xyz1 = col1[m]()\n\tconst xyz2 = col2[m]()\n\treturn guess(\n\t\t[\n\t\t\tlerp(xyz1[0], xyz2[0], f),\n\t\t\tlerp(xyz1[1], xyz2[1], f),\n\t\t\tlerp(xyz1[2], xyz2[2], f),\n\t\t\tlerp(col1.alpha(), col2.alpha(), f),\n\t\t],\n\t\tm,\n\t)\n}\ninterpolators.xyz = interpolators.rgb = interpolators.lab = linear_interpolator\n\ninterpolators.num = function(col1, col2, f) {\n\tconst n1 = col1.num()\n\tconst n2 = col2.num()\n\treturn chroma.num(lerp(n1, n2, f))\n}\n\ninterpolators.lrgb = function(col1, col2, f) {\n\tconst [r1, g1, b1, a1] = col1.rgba(false, false)\n\tconst [r2, g2, b2, a2] = col2.rgba(false, false)\n\treturn new chroma.Color(\n\t\tsqrt(r1 ** 2 * (1 - f) + r2 ** 2 * f),\n\t\tsqrt(g1 ** 2 * (1 - f) + g2 ** 2 * f),\n\t\tsqrt(b1 ** 2 * (1 - f) + b2 ** 2 * f),\n\t\tlerp(a1, a2, f),\n\t)\n}\n\nfunction _bezier(chromables: chroma.Chromable[]): (t: number) => chroma.Color {\n\tconst colors = chromables.map(c => chroma(c))\n\tconst [lab0, lab1, lab2, lab3] = colors.map(c => c.lab())\n\tif (2 == chromables.length) {\n\t\t// linear interpolation\n\t\treturn t => {\n\t\t\treturn chroma.lab([0, 1, 2].map(i => lerp(lab0[i], lab1[i], t)) as LAB)\n\t\t}\n\t} else if (3 == chromables.length) {\n\t\t// quadratic bezier interpolation\n\t\tconst bezier2 = (p0: number, p1: number, p2: number, t: number) =>\n\t\t\t(1 - t) ** 2 * p0 + 2 * (1 - t) * t * p1 + t ** 2 * p2\n\t\treturn t => chroma.lab([0, 1, 2].map(i => bezier2(lab0[i], lab1[i], lab2[i], t)) as LAB)\n\t} else if (4 == chromables.length) {\n\t\t// cubic bezier interpolation\n\t\tconst bezier3 = (p0: number, p1: number, p2: number, p3: number, t: number) =>\n\t\t\t(1 - t) ** 3 * p0 + 3 * (1 - t) ** 2 * t * p1 + 3 * (1 - t) * t ** 2 * p2 + t ** 3 * p3\n\t\treturn t => chroma.lab([0, 1, 2].map(i => bezier3(lab0[i], lab1[i], lab2[i], lab3[i], t)) as LAB)\n\t} else if (5 == chromables.length) {\n\t\tconst I0 = _bezier(colors.slice(0, 3))\n\t\tconst I1 = _bezier(colors.slice(2, 5))\n\t\treturn t => (t < 0.5 ? I0(t * 2) : I1((t - 0.5) * 2))\n\t} else throw new Error()\n}\n\nfunction guess(args: any[], mode?: ColorFormat): chroma.Color {\n\tif (Array.isArray(args[0])) args = args[0]\n\tif (!mode) {\n\t\tif (args.length == 1 && args[0] in chroma.w3cx11) {\n\t\t\tmode = \"name\"\n\t\t} else if (args.length == 1 && \"string\" == typeof args[0]) {\n\t\t\tmode = \"css\"\n\t\t} else if (args.length == 3) {\n\t\t\tmode = \"rgb\"\n\t\t} else if (args.length == 4 && \"number\" == typeof args[3] && args[3] >= 0 && args[3] <= 1) {\n\t\t\tmode = \"rgb\"\n\t\t} else if (args.length == 1 && \"number\" == typeof args[0] && args[0] >= 0 && args[0] <= 0xffffff) {\n\t\t\tmode = \"num\"\n\t\t} else throw new Error(\"could not guess mode. args \" + JSON.stringify(args))\n\t}\n\tconst channels = _input[mode](...args)\n\treturn new chroma.Color(channels[0], channels[1], channels[2], undefined !== channels[3] ? channels[3] : 1)\n}\n\nfunction _average_lrgb(colors: chroma.Color[]) {\n\tlet rSquareSum = 0,\n\t\tgSquareSum = 0,\n\t\tbSquareSum = 0,\n\t\talphaSum = 0\n\tfor (const col of colors) {\n\t\tconst [r, g, b, alpha] = col.rgba(false, false)\n\t\trSquareSum += r ** 2\n\t\tgSquareSum += g ** 2\n\t\tbSquareSum += b ** 2\n\t\talphaSum += alpha\n\t}\n\treturn new chroma.Color(\n\t\tsqrt(rSquareSum) / colors.length,\n\t\tsqrt(gSquareSum) / colors.length,\n\t\tsqrt(bSquareSum) / colors.length,\n\t\talphaSum / colors.length,\n\t)\n}\n\nfunction hex2rgb(hex: string): RGBA {\n\tlet m\n\tif ((m = hex.match(/^#?([A-F\\d]{2})([A-F\\d]{2})([A-F\\d]{2})([A-F\\d]{2})?$/i))) {\n\t\treturn [parseInt(m[1], 16), parseInt(m[2], 16), parseInt(m[3], 16), m[4] ? parseInt(m[4], 16) / 255 : 1]\n\t} else if ((m = hex.match(/^#?([A-F\\d])([A-F\\d])([A-F\\d])([A-F\\d])?$/i))) {\n\t\treturn [\n\t\t\tparseInt(m[1], 16) * 0x11,\n\t\t\tparseInt(m[2], 16) * 0x11,\n\t\t\tparseInt(m[3], 16) * 0x11,\n\t\t\tm[4] ? (parseInt(m[4], 16) * 0x11) / 255 : 1,\n\t\t]\n\t}\n\tthrow new Error(\"invalid hex color: \" + hex)\n}\n// color mode, i.e. representation as array of number\nexport type ColorMode = \"rgb\" | \"cmyk\" | \"lab\" | \"hsv\" | \"hsi\" | \"hcg\" | \"hsl\" | \"gl\" | \"lch\" | \"xyz\"\nexport type InterpolationMode = \"rgb\" | \"lab\" | \"hsv\" | \"hsi\" | \"hcg\" | \"hsl\" | \"lch\" | \"xyz\" | \"lrgb\" | \"num\"\nexport type ColorFormat = ColorMode | \"hex\" | \"num\" | \"name\" | \"kelvin\" | \"css\"\n/**\n * CMYK color space\n * @see https://en.wikipedia.org/wiki/cmyk_color_model\n * [cyan, magenta, yellow, alpha1]\n */\ntype CMYK = [number, number, number, number]\n/**\n * WebGL colors. Like RGB, but floats in [0; 1] instead of 0-255.\n * [red255, green255, blue255, alpha1]\n */\ntype GL = [number, number, number, number]\n/**\n * Red, green, blue ranging from 0-255.\n * Can be floats and outside the above range internally.\n */\ntype RGB = [number, number, number]\n/**\n * RGB plus alpha ranging from 0-1\n * [red255, green255, blue255, alpha1]\n */\ntype RGBA = [number, number, number, number]\n/**\n * CIELAB color space\n * [lightness, A*, B*]\n * @see https://en.wikipedia.org/wiki/CIELAB_color_space\n */\ntype LAB = [number, number, number]\n/**\n * Cylindrical representation of CIELAB\n * @see https://en.wikipedia.org/wiki/CIELAB_color_space#Cylindrical_representation:_CIELCh_or_CIEHLC\n *\n */\ntype LCH = [number, number, number]\n/**\n * @see https://en.wikipedia.org/wiki/HSL_and_HSV\n * [hueDegrees, saturation1, lightness1]\n */\ntype HSL = [number, number, number]\n/**\n * @see https://en.wikipedia.org/wiki/HSL_and_HSV\n * [hueDegrees, saturation1, value1]\n */\ntype HSV = [number, number, number]\n/**\n * @see https://en.wikipedia.org/w/index.php?title=HSI_color_space&redirect=no\n * [hueDegrees, saturation1, intensity1]\n */\ntype HSI = [number, number, number]\ntype XYZ = [number, number, number]\n/**\n * HCG Color Model\n * See https://github.com/acterhd/hcg-color\n * A color value in the HCG format is an array of three numbers [h, c, g], where\n * `h` is the hue as an angle in degrees [0; 360)\n * `c` is the chroma value in [0; 1]\n * `g` is the gray value in [0; 1]\n */\ntype HCG = [number, number, number]\n\n// interface ColorModes {\n// \tcmyk: CMYK\n// \tgl: GL\n// \trgb: RGB\n// \trgba: RGBA\n// \tlab: LAB\n// \thsl: HSL\n// \thsv: HSV\n// \thsi: HSI\n// \txyz: XYZ\n// \thcg: HCG\n// \tlch: LCH\n// \thex: string\n// \tnum: number\n// \tname: string\n// \tkelvin: number\n// \tcss: string\n// }\nfunction rgb2hex(r255: number, g255: number, b255: number, a1: number, mode: \"rgb\" | \"rgba\" | \"argb\" = \"rgb\") {\n\tr255 = clamp(round(r255), 0, 255)\n\tg255 = clamp(round(g255), 0, 255)\n\tb255 = clamp(round(b255), 0, 255)\n\tconst rgb = (r255 << 16) | (g255 << 8) | b255\n\tconst rgbString = rgb.toString(16).padStart(6, \"0\")\n\tconst alphaString = round(clamp(a1) * 255)\n\t\t.toString(16)\n\t\t.padStart(2, \"0\")\n\treturn \"#\" + (\"argb\" == mode ? alphaString + rgbString : \"rgba\" == mode ? rgbString + alphaString : rgbString)\n}\n\n_input.lrgb = _input.rgb\n\n_input.hex = hex2rgb\n_input.hsl = hsl2rgb\nfunction norm360(degrees: number) {\n\treturn ((degrees % 360) + 360) % 360\n}\n\n_input.hsv = hsv2rgb\n\nfunction num2rgb(num: number): RGBA {\n\tif (!(\"number\" == typeof num && num >= 0 && num <= 0xffffff)) {\n\t\tthrow new Error(\"unknown num color: \" + num)\n\t}\n\tconst r = num >> 16\n\tconst g = (num >> 8) & 0xff\n\tconst b = num & 0xff\n\treturn [r, g, b, 1]\n}\n\nfunction rgb2num(r255: number, g255: number, b255: number, a1: number = 1, mode: \"rgb\" | \"rgba\" | \"argb\" = \"rgb\") {\n\tconst rgbNum = (round(r255) << 16) | (round(g255) << 8) | round(b255)\n\tif (\"rgb\" === mode) {\n\t\treturn rgbNum\n\t} else if (\"rgba\" === mode) {\n\t\treturn (rgbNum << 8) | (round(a1 * 255) << 24)\n\t} else {\n\t\treturn (round(a1 * 255) << 24) | rgbNum\n\t}\n}\n\n_input.num = num2rgb\n\nconst WS = \"\\\\s*\"\nconst FLOAT = \"([+-]?(?:\\\\d*\\\\.?)?\\\\d+(?:[eE][+-]?\\\\d+)?)\"\nconst CSS_RGB_REGEX = new RegExp(\n\t[\"^rgba?\\\\(\", FLOAT, \",\", FLOAT, \",\", FLOAT, \"(?:,\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS),\n\t\"i\",\n)\nconst CSS_RGB_WS_REGEX = new RegExp([\"^rgba?\\\\(\", FLOAT, FLOAT, FLOAT, \"(?:/\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS), \"i\")\nconst CSS_RGB_PERCENT_REGEX = new RegExp(\n\t[\"^rgba?\\\\(\", FLOAT + \"%\", \",\", FLOAT + \"%\", \",\", FLOAT + \"%\", \"(?:,\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS),\n\t\"i\",\n)\nconst CSS_RGB_WS_PERCENT_REGEX = new RegExp(\n\t[\"^rgba?\\\\(\", FLOAT + \"%\", FLOAT + \"%\", FLOAT + \"%\", \"(?:/\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS),\n\t\"i\",\n)\nconst CSS_HSL_REGEX = new RegExp(\n\t[\"^hsla?\\\\(\", FLOAT + \"(deg|rad|turn)?\", \",\", FLOAT + \"%\", \",\", FLOAT + \"%\", \"(?:,\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(\n\t\tWS,\n\t),\n\t\"i\",\n)\nconst CSS_HSL_WS_REGEX = new RegExp(\n\t[\"^hsla?\\\\(\", FLOAT + \"(deg|rad|turn)?\\\\s+\" + FLOAT + \"%\", FLOAT + \"%\", \"(?:/\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS),\n\t\"i\",\n)\nfunction css2rgb(css: string): RGBA {\n\tif (chroma.w3cx11 && (chroma.w3cx11 as any)[css.toLowerCase()]) {\n\t\treturn num2rgb((chroma.w3cx11 as any)[css.toLowerCase()])\n\t}\n\tlet m\n\tif ((m = css.match(CSS_RGB_REGEX) || css.match(CSS_RGB_WS_REGEX))) {\n\t\treturn [\n\t\t\tclamp(+m[1], 0, 255),\n\t\t\tclamp(+m[2], 0, 255),\n\t\t\tclamp(+m[3], 0, 255),\n\t\t\tm[4] ? clamp(m[5] ? +m[4] / 100 : +m[4]) : 1,\n\t\t]\n\t} else if ((m = css.match(CSS_RGB_PERCENT_REGEX) || css.match(CSS_RGB_WS_PERCENT_REGEX))) {\n\t\treturn [\n\t\t\tclamp(+m[1] / 100) * 255,\n\t\t\tclamp(+m[2] / 100) * 255,\n\t\t\tclamp(+m[3] / 100) * 255,\n\t\t\tm[4] ? clamp(m[5] ? +m[4] / 100 : +m[4]) : 1,\n\t\t]\n\t} else if ((m = css.match(CSS_HSL_REGEX) || css.match(CSS_HSL_WS_REGEX))) {\n\t\tconst CONVERSION = { deg: 1, rad: RAD2DEG, turn: 360 }\n\t\tconst angleUnit = (m[2] ? m[2].toLowerCase() : \"deg\") as \"deg\" | \"rad\" | \"turn\"\n\t\treturn hsl2rgb(\n\t\t\t(((+m[1] * CONVERSION[angleUnit]) % 360) + 360) % 360,\n\t\t\tclamp(+m[3] / 100),\n\t\t\tclamp(+m[4] / 100),\n\t\t\tm[5] ? clamp(m[6] ? +m[5] / 100 : +m[5]) : 1,\n\t\t)\n\t} else {\n\t\treturn hex2rgb(css)\n\t}\n}\n\nfunction rgb2css(r: number, g: number, b: number, a = 1) {\n\tif (a >= 1) {\n\t\treturn \"rgb(\" + [r, g, b].map(round).join(\",\") + \")\"\n\t} else {\n\t\treturn \"rgba(\" + [r, g, b].map(round).join(\",\") + \",\" + a + \")\"\n\t}\n}\n\nfunction rnd(a: any) {\n\treturn round(a * 100) / 100\n}\n\nfunction hsl2css([h, s, l]: HSL, alpha: number) {\n\tconst mode = alpha < 1 ? \"hsla\" : \"hsl\"\n\treturn (\n\t\tmode +\n\t\t\"(\" +\n\t\trnd(h) +\n\t\t\",\" +\n\t\trnd(s * 100) +\n\t\t\"%\" +\n\t\t\",\" +\n\t\trnd(l * 100) +\n\t\t\"%\" +\n\t\t(\"hsla\" == mode ? \",\" + rnd(alpha) : \"\") +\n\t\t\")\"\n\t)\n}\n\n_input.css = css2rgb\n\n_input.name = function(name) {\n\treturn num2rgb((chroma.w3cx11 as any)[name])\n}\n\nfunction lch2lab(l: number, c: number, hueDegrees: number): LAB {\n\t/*\n    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\n    These formulas were invented by David Dalrymple to obtain maximum contrast without going\n    out of gamut if the parameters are in the range 0-1.\n\n    A saturation multiplier was added by Gregor Aisch\n     */\n\treturn [l, cos(hueDegrees * DEG2RAD) * c, sin(hueDegrees * DEG2RAD) * c]\n}\n\nfunction lch2rgb(l: number, c: number, hDegrees: number, alpha1 = 1): RGBA {\n\tconst [, a, b] = lch2lab(l, c, hDegrees)\n\treturn cielab2rgb(l, a, b, alpha1)\n}\n\nfunction lab2lch(l: number, a: number, b: number): LCH {\n\tconst c = hypot(a, b)\n\tconst h = (atan2(b, a) * RAD2DEG + 360) % 360\n\treturn [l, c, h]\n}\n\nfunction rgb2lch(r255: number, g255: number, b255: number) {\n\tconst [l, a, b2] = rgb2lab(r255, g255, b255)\n\treturn lab2lch(l, a, b2)\n}\n\n_input.lch = lch2rgb\n\nfunction rgb2cmyk(r255: number, g255: number, b255: number): CMYK {\n\tr255 /= 255\n\tg255 /= 255\n\tb255 /= 255\n\tconst k = 1 - max(r255, g255, b255)\n\tif (1 == k) return [0, 0, 0, 1]\n\tconst c = (1 - r255 - k) / (1 - k)\n\tconst m = (1 - g255 - k) / (1 - k)\n\tconst y = (1 - b255 - k) / (1 - k)\n\treturn [c, m, y, k]\n}\n\nfunction cmyk2rgb(c1: number, m1: number, y1: number, k1: number, alpha1 = 1): RGBA {\n\tif (k1 == 1) {\n\t\treturn [0, 0, 0, alpha1]\n\t}\n\tconst r255 = 255 * (1 - c1) * (1 - k1)\n\tconst g255 = 255 * (1 - m1) * (1 - k1)\n\tconst b255 = 255 * (1 - y1) * (1 - k1)\n\treturn [r255, g255, b255, alpha1]\n}\n\n_input.cmyk = cmyk2rgb\n\n_input.gl = function(r: number, g: number, b: number, a: number = 1): RGBA {\n\treturn [r * 255, g * 255, b * 255, a]\n}\n\n//function rgb2luminance(r: number, g: number, b: number) {\n//\t// https://en.wikipedia.org/wiki/Relative_luminance\n//\tconst [, Y] = rgb2xyz(r, g, b)\n//\treturn Y\n//}\n\nfunction rgbChannel2RgbLinear(x255: number) {\n\tconst x1 = x255 / 255\n\t// http://entropymine.com/imageworsener/srgbformula/\n\tif (x1 <= 0.04045) {\n\t\treturn x1 / 12.92\n\t} else {\n\t\treturn ((x1 + 0.055) / 1.055) ** 2.4\n\t}\n}\nfunction rgbLinearChannel2Rgb(xLinear1: number) {\n\tif (xLinear1 <= 0.0031308) {\n\t\treturn 255 * (12.92 * xLinear1)\n\t} else {\n\t\treturn 255 * ((1 + 0.055) * xLinear1 ** (1 / 2.4) - 0.055)\n\t}\n}\n\nfunction kelvin2rgb(kelvin: number): RGB {\n\tconst t = kelvin / 100\n\tlet r, g, b\n\tif (t < 66) {\n\t\tr = 255\n\t\tg = -155.25485562709179 - 0.44596950469579133 * (t - 2) + 104.49216199393888 * log(t - 2)\n\t\tb = t < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (t - 10) + 115.67994401066147 * log(t - 10)\n\t} else {\n\t\tr = 351.97690566805693 + 0.114206453784165 * (t - 55) - 40.25366309332127 * log(t - 55)\n\t\tg = 325.4494125711974 + 0.07943456536662342 * (t - 50) - 28.0852963507957 * log(t - 50)\n\t\tb = 255\n\t}\n\treturn [r, g, b]\n}\n\n_input.rgb = (...args: number[]) => args as RGB\n\nfunction rgb2kelvin(r255: number, g255: number, b255: number) {\n\tconsole.log(b255 - r255)\n\tif (g255 + b255 < 158.61) {\n\t\tconsole.log(\"0 < t < 20\")\n\t\t// calc from green\n\t\treturn round(\n\t\t\tnewtonIterate1d(\n\t\t\t\tt => g255 - (-155.25485562709179 - 0.44596950469579133 * (t - 2) + 104.49216199393888 * log(t - 2)),\n\t\t\t\t15,\n\t\t\t\t4,\n\t\t\t) * 100,\n\t\t)\n\t\treturn (Math.E ** ((g255 + 155.25485562709179 + 0.44596950469579133 * (15 - 2)) / 104.49216199393888) + 2) * 100\n\t} else if (b255 - r255 < 0) {\n\t\tconsole.log(\"20 < t < 66\")\n\t\treturn round(\n\t\t\tnewtonIterate1d(\n\t\t\t\tt => b255 - (-254.76935184120902 + 0.8274096064007395 * (t - 10) + 115.67994401066147 * log(t - 10)),\n\t\t\t\t43,\n\t\t\t\t4,\n\t\t\t) * 100,\n\t\t)\n\t\treturn (\n\t\t\t(Math.E ** ((b255 + 254.76935184120902 - 0.8274096064007395 * (43 - 10)) / 115.67994401066147) + 10) * 100\n\t\t)\n\t} else {\n\t\tconsole.log(\"0 < t < 400, start= \" + (-1.4 * (r255 + g255) + 755))\n\t\treturn round(\n\t\t\tnewtonIterate1d(\n\t\t\t\tt => r255 - (351.97690566805693 + 0.114206453784165 * (t - 55) - 40.25366309332127 * log(t - 55)),\n\t\t\t\t-1.4 * (r255 + g255) + 755,\n\t\t\t\t8,\n\t\t\t) * 100,\n\t\t)\n\t\treturn ((r255 / 329.698727446) ** (1 / -0.1332047592) + 60) * 100\n\t}\n\treturn newtonIterate1d(\n\t\tk => {\n\t\t\tconst eps = 1e-9\n\t\t\tconst [kr, kg, kb] = kelvin2rgb(k)\n\t\t\tconst [kr2, kg2, kb2] = kelvin2rgb(k + eps)\n\t\t\tconst dkr = (kr2 - kr) / eps,\n\t\t\t\tdkg = (kg2 - kg) / eps,\n\t\t\t\tdkb = (kb2 - kb) / eps\n\t\t\treturn dkr * (kr - r255) + dkg * (kg - g255) + dkb * (kb - b255)\n\n\t\t\treturn kb / kr - b255 / r255\n\t\t},\n\t\t//1000,\n\t\t//40000,\n\t\tMath.E ** ((b255 / r255 + 2.5) / 0.4),\n\t\t20,\n\t\t//1e-6,\n\t)\n\tlet maxTemp = 40000\n\tlet minTemp = 1000\n\tconst eps = 0.4\n\tlet temp: number = 0\n\tlet rgb\n\twhile (maxTemp - minTemp > eps) {\n\t\ttemp = (maxTemp + minTemp) * 0.5\n\t\trgb = kelvin2rgb(temp)\n\t\tif (rgb[2] / rgb[0] >= b255 / r255) {\n\t\t\tmaxTemp = temp\n\t\t} else {\n\t\t\tminTemp = temp\n\t\t}\n\t}\n\treturn round(temp)\n}\n\n_input.temperature = _input.kelvin = _input.K = kelvin2rgb\n\nfunction blend_f(f: (c1: RGB, c2: RGB) => RGB) {\n\treturn function(bottom: chroma.Chromable, top: chroma.Chromable) {\n\t\tconst [r, g, b] = f(chroma(top).rgb(), chroma(bottom).rgb())\n\t\treturn chroma.rgb(r, g, b)\n\t}\n}\n\nfunction each(f: (a: number, b: number) => number) {\n\treturn function(c1: RGB, c2: RGB): RGB {\n\t\treturn c1.map((e, i) => f(e, c2[i])) as RGB\n\t}\n}\n\nfunction _screen(a: number, b: number) {\n\treturn 255 * (1 - (1 - a / 255) * (1 - b / 255))\n}\n\nfunction _overlay(a: number, b: number) {\n\tif (b < 128) {\n\t\treturn (2 * a * b) / 255\n\t} else {\n\t\treturn 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255))\n\t}\n}\n\nfunction _burn(a: number, b: number) {\n\treturn 255 * (1 - (1 - b / 255) / (a / 255))\n}\n\nfunction _dodge(a: number, b: number) {\n\tif (a == 255) {\n\t\treturn 255\n\t}\n\treturn 255 * min(1, b / 255 / (1 - a / 255))\n}\n\n/**\n * r, g, b can be in any interval (0-1 or 0-255)\n * @param r\n * @param g\n * @param b\n */\nfunction rgb2hexhue(r: number, g: number, b: number) {\n\tconst m = min(r, g, b)\n\tconst M = max(r, g, b)\n\tconst delta = M - m\n\tlet hueTurnX6 // angle as value between 0 and 6\n\tif (0 == delta) {\n\t\thueTurnX6 = 0\n\t} else if (r == M) {\n\t\t// second term to make sure the value is > 0\n\t\thueTurnX6 = (g - b) / delta + (g < b ? 6 : 0)\n\t} else if (g == M) {\n\t\thueTurnX6 = 2 + (b - r) / delta\n\t} else {\n\t\thueTurnX6 = 4 + (r - g) / delta\n\t}\n\treturn [hueTurnX6 * 60, m, M]\n}\nfunction hcxm2rgb(hueDegrees: number, c1: number, x1: number, m1: number, alpha1: number): RGBA {\n\tconst m255 = m1 * 255\n\tconst cm255 = c1 * 255 + m255\n\tconst xm255 = x1 * 255 + m255\n\tif (hueDegrees < 60) {\n\t\treturn [cm255, xm255, m255, alpha1]\n\t} else if (hueDegrees < 120) {\n\t\treturn [xm255, cm255, m255, alpha1]\n\t} else if (hueDegrees < 180) {\n\t\treturn [m255, cm255, xm255, alpha1]\n\t} else if (hueDegrees < 240) {\n\t\treturn [m255, xm255, cm255, alpha1]\n\t} else if (hueDegrees < 300) {\n\t\treturn [xm255, m255, cm255, alpha1]\n\t} else {\n\t\treturn [cm255, m255, xm255, alpha1]\n\t}\n}\n\n/**\n * https://en.wikipedia.org/w/index.php?title=HSL_and_HSV&oldid=856714654#From_HSL\n */\nfunction hsl2rgb(hueDegrees: number, s1: number, l1: number, alpha1 = 1): RGBA {\n\thueDegrees = norm360(hueDegrees)\n\tconst c1 = (1 - abs(2 * l1 - 1)) * s1\n\treturn hcxm2rgb(hueDegrees, c1, c1 * (1 - abs(((hueDegrees / 60) % 2) - 1)), l1 - c1 / 2, alpha1)\n}\nfunction rgb2hsl(r255: number, g255: number, b255: number): HSL {\n\tconst [hue, min1, max1] = rgb2hexhue(r255 / 255, g255 / 255, b255 / 255)\n\tconst l1 = (max1 + min1) / 2\n\tlet s1: number\n\tif (max1 == min1) {\n\t\ts1 = 0\n\t} else {\n\t\ts1 = l1 < 0.5 ? (max1 - min1) / (max1 + min1) : (max1 - min1) / (2 - max1 - min1)\n\t}\n\treturn [hue, s1, l1]\n}\n\nfunction hsv2rgb(hueDegrees: number, s1: number, v1: number, alpha1: number = 1): RGBA {\n\thueDegrees = norm360(hueDegrees)\n\tconst c1 = v1 * s1\n\treturn hcxm2rgb(hueDegrees, c1, c1 * (1 - abs(((hueDegrees / 60) % 2) - 1)), v1 - c1, alpha1)\n}\n\nfunction rgb2hsv(r255: number, g255: number, b255: number): HSV {\n\tconst [hue, min255, max255] = rgb2hexhue(r255, g255, b255)\n\tconst delta255 = max255 - min255\n\tconst v1 = max255 / 255.0\n\tconst s1 = max255 == 0 ? 0 : delta255 / max255\n\treturn [hue, s1, v1]\n}\n\nfunction hcg2rgb(hueDegrees: number, c1: number, g1: number, alpha1 = 1): RGBA {\n\thueDegrees = norm360(hueDegrees)\n\tconst p = g1 * (1 - c1)\n\treturn hcxm2rgb(hueDegrees, c1, c1 * (1 - abs(((hueDegrees / 60) % 2) - 1)), p, alpha1)\n}\n\nfunction rgb2hcg(r255: number, g255: number, b255: number): HCG {\n\tconst [hue, min255, max255] = rgb2hexhue(r255, g255, b255)\n\tconst c1 = (max255 - min255) / 255\n\tconst _g1 = c1 < 1 ? min255 / 255 / (1 - c1) : 0\n\treturn [hue, c1, _g1]\n}\n\n_input.hcg = hcg2rgb\n\nfunction cielab2rgb(LStar100: number, aStar: number, bStar: number, alpha = 1): RGBA {\n\tconst [x, y, z] = cielab2xyz(LStar100, aStar, bStar)\n\treturn xyz2rgb(x, y, z, alpha)\n}\n\nfunction cielab2xyz(LStar100: number, aStar: number, bStar: number) {\n\tfunction fInv(t: number) {\n\t\tif (t > LAB_delta) {\n\t\t\treturn t ** 3\n\t\t} else {\n\t\t\treturn LAB_3DeltaPow2 * (t - 4 / 29)\n\t\t}\n\t}\n\treturn [\n\t\tLAB_Xn * fInv((LStar100 + 16) / 116 + aStar / 500),\n\t\tLAB_Yn * fInv((LStar100 + 16) / 116),\n\t\tLAB_Zn * fInv((LStar100 + 16) / 116 - bStar / 200),\n\t]\n}\nfunction xyz2cielab(x: number, y: number, z: number): LAB {\n\t// https://en.wikipedia.org/w/index.php?title=CIELAB_color_space&oldid=849576085#Forward_transformation\n\tfunction f(t: number) {\n\t\tif (t > LAB_deltaPow3) {\n\t\t\treturn cbrt(t)\n\t\t} else {\n\t\t\treturn t / LAB_3DeltaPow2 + 4 / 29\n\t\t}\n\t}\n\treturn [116 * f(y / LAB_Yn) - 16, 500 * (f(x / LAB_Xn) - f(y / LAB_Yn)), 200 * (f(y / LAB_Yn) - f(z / LAB_Zn))]\n}\n\n// const LAB_CONSTANTS = {\nconst LAB_Kn = 18\nconst LAB_Xn = 0.95047\nconst LAB_Yn = 1\nconst LAB_Zn = 1.08883\nconst LAB_delta = 0.206896552 // delta = 6 / 29\nconst LAB_3DeltaPow2 = 0.12841855 // 3 * delta ** 2\nconst LAB_deltaPow3 = 0.008856452 // delta ** 3\n// }\n\nfunction rgb2lab(r255: number, g255: number, b255: number): RGB {\n\tconst [x, y, z] = rgb2xyz(r255, g255, b255)\n\treturn xyz2cielab(x, y, z)\n}\n\nfunction rgb2xyz(r255: number, g255: number, b255: number): XYZ {\n\t// https://en.wikipedia.org/wiki/SRGB#The_reverse_transformation\n\tconst r1Linear = rgbChannel2RgbLinear(r255)\n\tconst g1Linear = rgbChannel2RgbLinear(g255)\n\tconst b1Linear = rgbChannel2RgbLinear(b255)\n\tconst X = 0.4124564 * r1Linear + 0.3575761 * g1Linear + 0.1804375 * b1Linear\n\tconst Y = 0.2126729 * r1Linear + 0.7151522 * g1Linear + 0.072175 * b1Linear\n\tconst Z = 0.0193339 * r1Linear + 0.119192 * g1Linear + 0.9503041 * b1Linear\n\treturn [X, Y, Z]\n}\nfunction xyz2rgb(X1: number, Y1: number, Z1: number, alpha1 = 1): RGBA {\n\t// https://en.wikipedia.org/wiki/SRGB#The_forward_transformation_(CIE_XYZ_to_sRGB)\n\tconst r1Linear = 3.2404542 * X1 - 1.5371385 * Y1 - 0.4985314 * Z1\n\tconst g1Linear = -0.969266 * X1 + 1.8760108 * Y1 + 0.041556 * Z1\n\tconst b1Linear = 0.0556434 * X1 - 0.2040259 * Y1 + 1.0572252 * Z1\n\treturn [rgbLinearChannel2Rgb(r1Linear), rgbLinearChannel2Rgb(g1Linear), rgbLinearChannel2Rgb(b1Linear), alpha1]\n}\n\n_input.xyz = xyz2rgb\n_input.lab = cielab2rgb\n\n/**\n * For HSI, we use the direct angle calculation. I.e. atan2(beta, alpha). See wikipedia link. This is why we don't use\n * hcxm2rgb.\n */\nfunction hsi2rgb(hueDegrees: number, s1: number, i1: number, alpha1 = 1): RGBA {\n\t/*\n    borrowed from here:\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\n     */\n\tlet r, g, b\n\tlet hRad = hueDegrees * DEG2RAD\n\tif (hRad < (2 * PI) / 3) {\n\t\tb = (1 - s1) / 3\n\t\tr = (1 + (s1 * cos(hRad)) / cos(PI / 3 - hRad)) / 3\n\t\tg = 1 - (b + r)\n\t} else if (hRad < (4 * PI) / 3) {\n\t\thRad -= (2 * PI) / 3\n\t\tr = (1 - s1) / 3\n\t\tg = (1 + (s1 * cos(hRad)) / cos(PI / 3 - hRad)) / 3\n\t\tb = 1 - (r + g)\n\t} else {\n\t\thRad -= (4 * PI) / 3\n\t\tg = (1 - s1) / 3\n\t\tb = (1 + (s1 * cos(hRad)) / cos(PI / 3 - hRad)) / 3\n\t\tr = 1 - (g + b)\n\t}\n\treturn [3 * i1 * r * 255, 3 * i1 * g * 255, 3 * i1 * b * 255, alpha1]\n}\n\n/**\n * For HSI, we use the direct angle calculation. I.e. atan2(beta, alpha). See wikipedia link. This is why we don't use\n * rgb2hexhue.\n */\nfunction rgb2hsi(r255: number, g255: number, b255: number): HSI {\n\t// See https://en.wikipedia.org/wiki/HSL_and_HSV#Hue_and_chroma\n\t// See https://en.wikipedia.org/wiki/HSL_and_HSV#Lightness\n\tconst r1 = r255 / 255\n\tconst g1 = g255 / 255\n\tconst b1 = b255 / 255\n\tconst i1 = (r1 + g1 + b1) / 3\n\tif (r1 == g1 && g1 == b1) {\n\t\treturn [0, 0, i1]\n\t} else {\n\t\tconst alpha = (1 / 2) * (2 * r1 - g1 - b1)\n\t\tconst beta = (sqrt(3) / 2) * (g1 - b1)\n\t\tconst hRad = atan2(beta, alpha)\n\t\tconst min1 = min(r1, g1, b1)\n\t\tconst s1 = 1 - min1 / i1\n\t\treturn [(hRad < 0 ? 2 * PI + hRad : hRad) * RAD2DEG, s1, i1]\n\t}\n}\n\n_input.hsi = hsi2rgb\n\ninterpolators.hsv = interpolators.hsl = interpolators.hsi = interpolators.lch = interpolators.hcg = function interpolate_hsx(\n\tcolor1: chroma.Color,\n\tcolor2: chroma.Color,\n\tf: number,\n\tm: \"hsv\" | \"hsl\" | \"hsi\" | \"lch\" | \"hcg\",\n) {\n\tconst [a1, b1, c1] = color1[m]()\n\tconst [a2, b2, c2] = color2[m]()\n\tfunction lerpHue(hue1: number, hue2: number, f: number) {\n\t\tconst dh = norm360(hue2 - hue1 + 180) - 180\n\t\treturn hue1 + f * dh\n\t}\n\treturn chroma[m](\n\t\t(\"h\" == m.charAt(0) ? lerpHue : lerp)(a1, a2, f),\n\t\tlerp(b1, b2, f),\n\t\t(\"h\" == m.charAt(2) ? lerpHue : lerp)(c1, c2, f),\n\t)\n}\n\nfunction indexOfMax<T>(arr: ArrayLike<T>, f: (el: T) => number) {\n\tlet maxValue = -Infinity,\n\t\tmaxValueIndex = -1\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tconst value = f(arr[i])\n\t\tif (value > maxValue) {\n\t\t\tmaxValue = value\n\t\t\tmaxValueIndex = i\n\t\t}\n\t}\n\treturn maxValueIndex\n}\nfunction withMax<T>(arr: ArrayLike<T>, f: (el: T) => number): T {\n\treturn arr[indexOfMax(arr, f)]\n}\n"],"names":[],"mappings":"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"}