{"version":3,"file":"index.module.min.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * @license\n *\n * js - JavaScript library for color conversions\n *\n * Copyright (c) 2011-2017, Gregor Aisch\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. The name Gregor Aisch may not be used to endorse or promote products\n *    derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// tslint:disable:no-unnecessary-qualifier\n\nconst { abs, atan2, cos, floor, log, min, max, round, sign, sin, sqrt, cbrt, PI, hypot } = Math\n\nfunction lerp(a: number, b: number, f: number) {\n\treturn a + (b - a) * f\n}\nfunction lerpInv(a: number, b: number, f: number) {\n\treturn (f - a) / (b - a)\n}\nfunction clamp(x: number, min = 0, max = 1) {\n\treturn x < min ? min : x > max ? max : x\n}\n\nfunction newtonIterate1d(f: (x: number) => number, xStart: number, max_steps: number, eps: number = 1e-8): number {\n\tlet x = xStart,\n\t\tfx\n\twhile (max_steps-- && abs((fx = f(x))) > eps) {\n\t\tconst dfdx = (f(x + eps) - fx) / eps\n\t\tconsole.log(\"fx / dfdx\", fx / dfdx, \"fx\", fx, \"x\", x)\n\t\tx = x - fx / dfdx\n\t}\n\treturn x\n}\nfunction bisect(f: (x: number) => number, a: number, b: number, steps: number) {\n\t//assert(a < b)\n\tlet fA = f(a)\n\t// let fB = f(b)\n\t//assert(fA * fB < 0)\n\twhile (steps--) {\n\t\tconst c = (a + b) / 2\n\t\tconst fC = f(c)\n\t\t// console.log(\"fC\", fC, \"c\", c)\n\t\tif (sign(fA) == sign(fC)) {\n\t\t\ta = c\n\t\t\tfA = fC\n\t\t} else {\n\t\t\tb = c\n\t\t\t// fB = fC\n\t\t}\n\t}\n\t//assert(a <= (b + a) / 2)\n\t//assert(b >= (b + a) / 2)\n\treturn (a + b) / 2\n}\n\nconst TWOPI = 2 * PI\n\nconst DEG2RAD = PI / 180\n\nconst RAD2DEG = 180 / PI\n/**\n * @param alpha1 default=1\n * @example chroma.color(99, 99, 44, 0.7)\n */\nexport function color(red255: number, green255: number, blue255: number, alpha1?: number): Color\n/**\n * @example chroma.color('mediumorchid') // a css string\n * @example chroma.color([56, 203, 30]) // a RGB triple\n * @example chroma.color(0x4b0082) // a hex num\n * @example chroma.color([30, 0.8, 0.3], 'hsl') // explicit format\n */\nexport function color(x: Chromable, format?: ColorFormat): Color\n/**\n * This overload allows VS Code to suggest color names when you type `color('`.\n */\nexport function color(colorname: keyof typeof w3cx11, format?: \"name\"): Color\n/** @example chroma.color(30, 0.8, 0.3, 'hsl') */\nexport function color(channel0: number, channel1: number, channel2: number, format: ColorFormat): Color\n/** @example chroma.color(0.3, 0.8, 0.3, 1, 'gl') */\nexport function color(\n\tchannel0: number,\n\tchannel1: number,\n\tchannel2: number,\n\tchannel3: number,\n\tformat: ColorFormat,\n): Color\nexport function color(...args: any[]) {\n\tif (args[0] instanceof Color) {\n\t\treturn args[0]\n\t}\n\tif (args.length > 1 && \"string\" == typeof args[args.length - 1]) {\n\t\treturn guess(args.slice(0, args.length - 1), args[args.length - 1])\n\t} else if (Array.isArray(args[0])) {\n\t\treturn guess(args[0])\n\t} else {\n\t\treturn guess(args)\n\t}\n}\n/**\n * A Chromable is any value which can be converted to a color. For ease of use, most functions accept these instead of\n * only Color values.\n */\nexport type Chromable = number | string | Color | number[]\n\nexport class Color {\n\t/** @internal */\n\tconstructor(\n\t\tprivate readonly r: number,\n\t\tprivate readonly g: number,\n\t\tprivate readonly b: number,\n\t\tprivate readonly a = 1,\n\t) {}\n\n\t// public shade() {\n\t// \tconst shades: [string, string, number][] = [\n\t// \t\t[\"ff0000\", \"red\"],\n\t// \t\t[\"ffa500\", \"orange\"],\n\t// \t\t[\"ffff00\", \"yellow\"],\n\t// \t\t[\"008000\", \"green\"],\n\t// \t\t[\"0000ff\", \"blue\"],\n\t// \t\t[\"ee82ee\", \"violet\"],\n\t// \t\t[\"a52a2a\", \"brown\"],\n\t// \t\t[\"000000\", \"black\"],\n\t// \t\t[\"808080\", \"grey\"],\n\t// \t\t[\"ffffff\", \"white\"],\n\t// \t] as any\n\t// \tfunction angleDiff(a: number, b: number) {\n\t// \t\tconst d = (a - b) % 360\n\t// \t\tif (d > 180) return d - 360\n\t// \t\tif (d < -180) return d + 360\n\t// \t\treturn d\n\t// \t}\n\t// \tshades.forEach(arr => arr.push(color(arr[0]).hsl()[0]))\n\t// \tconst [h, s, l] = this.hsl()\n\t// \tif (l > 0.9) return \"white\"\n\t// \tif (l > 0.8 && s < 0.2) return \"white\"\n\t// \tif (s < 0.1) return \"grey\"\n\t// \tif (s < 0.4 && h > 0 && h < 48) return \"brown\"\n\n\t// \tconst distanceInXYZ: { [hue: number]: number } = { 0: 0 }\n\t// \tfor (let i = 60; i <= 360; i += 60) {\n\t// \t\tdistanceInXYZ[i] =\n\t// \t\t\tdistanceInXYZ[i - 60] + distance(hsl(i - 60, 1, 0.5), hsl(i, 1, 0.5), \"xyz\")\n\t// \t}\n\t// \t// console.log(distanceInXYZ)\n\n\t// \tconst shadeEnds: { [hue: number]: number } = {\n\t// \t\t0: 9,\n\t// \t\t38: 48,\n\t// \t\t60: 65,\n\t// \t\t120: 165,\n\t// \t\t240: 245,\n\t// \t\t300: 338,\n\t// \t\t360: 369,\n\t// \t}\n\n\t// \tconst getColorDistanceAlongXYZHue = (hueDegrees: number) => {\n\t// \t\tconst base = hueDegrees - (hueDegrees % 60)\n\t// \t\treturn (\n\t// \t\t\tdistanceInXYZ[base] + distance(hsl(base, 1, 0.5), hsl(hueDegrees, 1, 0.5), \"xyz\")\n\t// \t\t)\n\t// \t}\n\t// \tconst colorXYZD = getColorDistanceAlongXYZHue(this.hsl()[0])\n\t// \tconst md = distanceInXYZ[360]\n\t// \tconst shadeHue =\n\t// \t\t(Object.keys(shadeEnds) as any[]).find(shadeHue => shadeEnds[shadeHue | 0] >= this.hsl()[0])! % 360\n\t// \treturn shades.find(([_hex, _name, _hue]) => (_hue | 0) === shadeHue)![1]\n\t// \t// process.exit()\n\t// \treturn withMax(shades, ([_hex, _name, _hue]) => {\n\t// \t\treturn -abs(angleDiff(this.hsl()[0], _hue))\n\t// \t})[1]\n\t// \treturn withMax(shades, ([_hex, _name, _hue]) => {\n\t// \t\tconst [thisL, thisA, thisB] = this.lab()\n\t// \t\tconst [L, A, B] = color(_hex).lab()\n\t// \t\treturn -hypot(thisL - L, thisA - A, thisB - B)\n\t// \t})[1]\n\t// }\n\n\t/**\n\t * @see [[mix]]\n\t */\n\tpublic mix(col2: Chromable, f: number, m: InterpolationMode = \"rgb\") {\n\t\treturn mix(this, col2, f, m)\n\t}\n\tpublic rgb(doRound = true, clamp_ = true): RGB {\n\t\tconst f = (t: number) => {\n\t\t\tif (doRound) t = round(t)\n\t\t\tif (clamp_) t = clamp(t, 0, 255)\n\t\t\treturn t\n\t\t}\n\t\tconst { r, g, b } = this\n\t\treturn [f(r), f(g), f(b)]\n\t}\n\tpublic rgba(doRound = true, clamp_ = true): RGBA {\n\t\tconst f = (t: number) => {\n\t\t\tif (doRound) t = round(t)\n\t\t\tif (clamp_) t = clamp(t, 0, 255)\n\t\t\treturn t\n\t\t}\n\t\tconst { r, g, b, a } = this\n\t\treturn [f(r), f(g), f(b), a]\n\t}\n\n\t/**\n\t * Return a hex-string representation of this color.\n\t *\n\t * @param mode\n\t * @see #num for a hex-number representation.\n\t * @example chroma.color('yellow').alpha(0.7).hex()\n\t * @example chroma.color('yellow').alpha(0.7).hex('rgba')\n\t * @example chroma.color('yellow').alpha(0.7).hex('argb')\n\t */\n\tpublic hex(mode: \"rgb\" | \"rgba\" | \"argb\" = \"rgb\") {\n\t\tconst { r, g, b, a } = this\n\t\treturn rgb2hex(r, g, b, a, mode)\n\t}\n\n\t/**\n\t * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.\n\t *\n\t * @example chroma.color('purple').hsl()\n\t */\n\tpublic hsl(): HSL {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2hsl(r, g, b)\n\t}\n\n\t/**\n\t * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.\n\t *\n\t * @example chroma.color('purple').hsv()\n\t */\n\tpublic hsv() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2hsv(r, g, b)\n\t}\n\n\t/**\n\t * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.\n\t *\n\t * @example chroma.color('purple').hcg()\n\t */\n\tpublic hcg() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2hcg(r, g, b)\n\t}\n\n\t/**\n\t * Returns a CSS `rgb(...)` or `hsl(...)` string representation that can be used as CSS-color definition. The alpha\n\t * value is not output if it 1.\n\t * @example chroma.color('teal').css() // == \"rgb(0,128,128)\"\n\t * @example chroma.color('teal').alpha(0.5).css() // == \"rgba(0,128,128,0.5)\"\n\t * @example chroma.color('teal').css('hsl') // == \"hsl(180,100%,25.1%)\"\n\t */\n\tpublic css(mode: \"rgb\" | \"hsl\" = \"rgb\") {\n\t\tif (\"rgb\" == mode) {\n\t\t\tconst { r, g, b, a } = this\n\t\t\treturn rgb2css(r, g, b, a)\n\t\t} else if (\"hsl\" == mode) {\n\t\t\treturn hsl2css(this.hsl(), this.alpha())\n\t\t} else {\n\t\t\tthrow new Error()\n\t\t}\n\t}\n\n\tpublic name(closest: true): string\n\t/**\n\t * Get the name of a color. By default, this method will try to match the color exactly (comparing rounded RGB\n\t * values). Pass `true` to return the name of the color which is closest to `this` in CIELAB color space. CIELAB is\n\t * used as it is perceptually uniform.\n\t * @param closest Whether this should find the closest color name. default=false\n\t * @return If `closest == false`, the name of this color or `undefined` if there is no match. Otherwise, will always\n\t * return a color name.\n\t * @example chroma.color('#ff0000').name() // == \"red\"\n\t * @example chroma.color('#ff0001').name() // == undefined\n\t * @example chroma.color('#ff0001').name(true) // == \"red\"\n\t */\n\tpublic name(closest?: boolean): string | undefined\n\tpublic name(closest: boolean = false): string | undefined {\n\t\tconst thisNum = this.num()\n\t\tconst name = Object.keys(w3cx11).find((name) => (w3cx11 as any)[name] == thisNum)\n\t\tif (!name && closest) {\n\t\t\tconst [thisLStar, thisAStar, thisBStar] = this.lab()\n\t\t\treturn withMax(Object.keys(w3cx11) as (keyof typeof w3cx11)[], (name) => {\n\t\t\t\tconst [lStar, aStar, bStar] = num(w3cx11[name]).lab()\n\t\t\t\treturn -hypot(thisLStar - lStar, thisAStar - aStar, thisBStar - bStar)\n\t\t\t})\n\t\t}\n\t\treturn name\n\t}\n\n\t/**\n\t * Get the [CMYK](#CMYK) representation of this color.\n\t *\n\t * @example chroma.color('red').cmyk()\n\t */\n\tpublic cmyk() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2cmyk(r, g, b)\n\t}\n\n\t/**\n\t * Returns the [GL] representation of this color.\n\t * @example chroma.color('33cc00').gl()\n\t */\n\tpublic gl(): GL {\n\t\tconst { r, g, b, a } = this\n\t\treturn [r / 255, g / 255, b / 255, a]\n\t}\n\n\t/**\n\t * Get luminance of the color. This is equal to the Y channel of the XYZ color space.\n\t * @example chroma.color('black').luminance() // == 0\n\t * @example chroma.color('white').luminance() // == 1\n\t * @example chroma.color('red').luminance() // == ~0.21\n\t * @see https://en.wikipedia.org/wiki/Relative_luminance\n\t */\n\tpublic luminance(): number\n\t/**\n\t * Return a new [Color] with `lum1` by linearly interpolating `this` with white (when increasing the luminance) or\n\t * black (otherwise) in the [XYZ] color space.\n\t * @see https://en.wikipedia.org/wiki/Relative_luminance\n\t * @example // Approximately doubling the luminance of red\n\t * @example chroma.color('red').luminance(0.4) // == #ff8686 // \"Vivid Tangerine\"\n\t * @param lum1 The desired luminance.\n\t */\n\tpublic luminance(lum1: number): this\n\tpublic luminance(lum1?: number) {\n\t\tconst { r, g, b, a } = this\n\t\tconst [, Y] = rgb2xyz(r, g, b)\n\t\tif (undefined === lum1) {\n\t\t\treturn Y\n\t\t}\n\t\tconst inverseLerp = (a: number, b: number, val: number) => (val - a) / (b - a)\n\t\tif (lum1 > Y) {\n\t\t\t// lerp to white\n\t\t\treturn mix(this, white, inverseLerp(Y, 1, lum1), \"xyz\").alpha(a)\n\t\t} else {\n\t\t\t// lerp to black\n\t\t\treturn mix(black, this, inverseLerp(0, Y, lum1), \"xyz\").alpha(a)\n\t\t}\n\t}\n\n\t/**\n\t * Get color temperature of this color in Kelvin. This only makes sense for colors close to those output by\n\t * kelvin\n\t *\n\t * @example [c = chroma.color('#ff3300'), c.temperature()]\n\t * @example [c = chroma.color('#ffe3cd'), c.temperature()]\n\t * @example [c = chroma.color('#b3ccff'), c.temperature()]\n\t */\n\tpublic temperature() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2kelvin(r, g, b)\n\t}\n\n\t/**\n\t * Returns a new [Color] with a channel changed.\n\t * @example chroma.color('skyblue').set('hsl.h', 0) // change hue to 0 deg (=red)\n\t * @example chroma.color('hotpink').set('lch.c', 30) // set chromaticity to 30\n\t * @example chroma.color('orangered').set('lab.l', x => x / 2) // half Lab lightness\n\t * @example chroma.color('darkseagreen').set('lch.c', x => x * 2) // double Lch saturation\n\t */\n\tpublic set(modeAndChannel: string, value: number | ((channel: number) => number)) {\n\t\tconst [mode, channel] = modeAndChannel.split(\".\") as [ColorMode, string]\n\t\tconst src = this[mode]()\n\t\tconst i = mode.indexOf(channel)\n\t\tif (-1 == i) throw new Error(\"invalid channel\")\n\t\tsrc[i] = \"number\" == typeof value ? value : value(src[i])\n\t\treturn color(src, mode).alpha(this.a)\n\t}\n\n\t/**\n\t * Returns whether this color is outside the RGB color cube and will be clipped/clamped when calling .rgb()\n\t *\n\t * @example [c = chroma.lch( 20, 40, 50), c.clipped()]\n\t * @example [c = chroma.lch( 40, 40, 50), c.clipped()]\n\t * @example [c = chroma.lch( 60, 40, 50), c.clipped()]\n\t * @example [c = chroma.lch( 80, 40, 50), c.clipped()]\n\t * @example [c = chroma.lch(100, 40, 50), c.clipped()]\n\t */\n\tpublic clipped() {\n\t\tconst { r, g, b } = this\n\t\treturn !(0 <= r && r <= 255 && 0 <= g && g <= 255 && 0 <= b && b <= 255)\n\t}\n\n\t/**\n\t * Returns black or white, whichever has the highest contrast to `this`.\n\t * In the readme you should see the result of this.\n\t *\n\t * @example chroma.color('red')\n\t * @example chroma.color('yellow')\n\t */\n\tpublic textColor() {\n\t\treturn this.luminance() > 0.5 ? black : white\n\t}\n\n\t/**\n\t * Get alpha value of color.\n\t * @example chroma.rgb(0, 0, 255, 0.5).alpha() // == 0.5\n\t */\n\tpublic alpha(): number\n\t/**\n\t * Return new [Color] with given alpha value.\n\t * @example chroma.color('green').alpha(0.3)\n\t * @example chroma.color('green').alpha(0.3).hex('rgba') // == \"#00ff004d\"\n\t * @param alpha1 The desired alpha value.\n\t */\n\tpublic alpha(alpha1: number): Color\n\tpublic alpha(alpha1?: number): number | Color {\n\t\tif (undefined === alpha1) {\n\t\t\treturn this.a\n\t\t}\n\t\tconst { r, g, b } = this\n\t\treturn rgb(r, g, b, alpha1)\n\t}\n\n\tpublic darker(amount = 1) {\n\t\tconst [l, a, b] = this.lab()\n\t\treturn lab(l - LAB_Kn * amount, a, b, this.alpha())\n\t}\n\n\t/**\n\t *\n\t * @param amount\n\t * @example chroma.color('hotpink')\n\t * @example chroma.color('hotpink').brighter()\n\t * @example chroma.color('hotpink').brighter(2)\n\t * @example chroma.color('hotpink').brighter(3)\n\t */\n\tpublic brighter(amount = 1) {\n\t\treturn this.darker(-amount)\n\t}\n\n\t/**\n\t * Returns a new [Color] with increased saturation.\n\t * @param amount How much.\n\t * @example chroma.color('slategray')\n\t * @example chroma.color('slategray').saturate()\n\t * @example chroma.color('slategray').saturate(2)\n\t * @example chroma.color('slategray').saturate(3)\n\t */\n\tpublic saturate(amount = 1) {\n\t\tconst [l, c, h] = this.lch()\n\t\treturn lch(l, max(0, c + amount * LAB_Kn), h, this.alpha())\n\t}\n\n\t/**\n\t * Equivalent to `saturate(-amount)`.\n\t * @see #saturate\n\t */\n\tpublic desaturate(amount = 1) {\n\t\treturn this.saturate(-amount)\n\t}\n\n\tpublic premultiplied() {\n\t\tconst { r, g, b, a } = this\n\t\treturn rgb(r * a, g * a, b * a, a)\n\t}\n\n\t/**\n\t * Returns the [HSI] representation of this color. hue will always be in [0; 360). Values are never NaN.\n\t *\n\t * @example chroma.color('purple').hsi()\n\t */\n\tpublic hsi() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2hsi(r, g, b)\n\t}\n\n\t/**\n\t * Returns the [LAB] representation of this color.\n\t *\n\t * @example chroma.color('purple').lab()\n\t */\n\tpublic lab() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2lab(r, g, b)\n\t}\n\n\t/**\n\t * Return a hex-num of this color.\n\t *\n\t * @param mode\n\t * @see #num for a hex-number representation.\n\t * @example chroma.color('yellow').alpha(0.7).hex()\n\t * @example chroma.color('yellow').alpha(0.7).hex('rgba')\n\t * @example chroma.color('yellow').alpha(0.7).hex('argb')\n\t */\n\tpublic num(mode: \"rgb\" | \"rgba\" | \"argb\" = \"rgb\") {\n\t\tconst { r, g, b, a } = this\n\t\treturn rgb2num(r, g, b, a, mode)\n\t}\n\n\t/**\n\t * Returns the [LCH] representation of this color. hue will always be in [0; 360). Values are never NaN.\n\t *\n\t * @example chroma.color('purple').lch()\n\t */\n\tpublic lch() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2lch(r, g, b)\n\t}\n\n\t/**\n\t * Returns the [XYZ] representation of this color. hue will always be in [0; 360). Values are never NaN.\n\t *\n\t * @example chroma.color('purple').xyz()\n\t */\n\tpublic xyz() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2xyz(r, g, b)\n\t}\n\n\t/**\n\t * Whether this [Color](#Color) is identical (strict equality of r, g, b, a) to `color`.\n\t */\n\tpublic equals(color: Color) {\n\t\tconst { r, g, b, a } = this\n\t\tconst { r: r2, g: g2, b: b2, a: a2 } = color\n\t\treturn r == r2 && g == g2 && b == b2 && a == a2\n\t}\n\n\tpublic hashCode() {\n\t\treturn this.num(\"rgba\")\n\t}\n\n\t/**\n\t * @example chroma.color('red').toSource() // == \"rgb(255, 0, 0)\"\n\t * @example chroma.rgb(-2, 100.02, 200, 0.5).toSource() // == \"rgb(-2, 100.02, 200, 0.5)\"\n\t */\n\tpublic toSource() {\n\t\tconst { r, g, b, a } = this\n\t\treturn \"chroma.rgb(\" + r + \", \" + g + \", \" + b + (a === 1 ? \")\" : \", \" + a + \")\")\n\t}\n}\nexport interface Color {\n\ttoString(): string\n\t//darker(amount: number): Color\n\t//brighter(amount: number): Color\n\tkelvin(): number\n}\nColor.prototype.toString = Color.prototype.css\nColor.prototype.kelvin = Color.prototype.temperature\n/**\n * @example chroma.black\n */\nexport const black = new Color(0, 0, 0, 1)\n\n/**\n * @example chroma.black\n */\nexport const white = new Color(255, 255, 255, 1)\n\nexport const brewer = {\n\tOrRd: [0xfff7ec, 0xfee8c8, 0xfdd49e, 0xfdbb84, 0xfc8d59, 0xef6548, 0xd7301f, 0xb30000, 0x7f0000],\n\tPuBu: [0xfff7fb, 0xece7f2, 0xd0d1e6, 0xa6bddb, 0x74a9cf, 0x3690c0, 0x0570b0, 0x045a8d, 0x023858],\n\tBuPu: [0xf7fcfd, 0xe0ecf4, 0xbfd3e6, 0x9ebcda, 0x8c96c6, 0x8c6bb1, 0x88419d, 0x810f7c, 0x4d004b],\n\tOranges: [0xfff5eb, 0xfee6ce, 0xfdd0a2, 0xfdae6b, 0xfd8d3c, 0xf16913, 0xd94801, 0xa63603, 0x7f2704],\n\tBuGn: [0xf7fcfd, 0xe5f5f9, 0xccece6, 0x99d8c9, 0x66c2a4, 0x41ae76, 0x238b45, 0x006d2c, 0x00441b],\n\tYlOrBr: [0xffffe5, 0xfff7bc, 0xfee391, 0xfec44f, 0xfe9929, 0xec7014, 0xcc4c02, 0x993404, 0x662506],\n\tYlGn: [0xffffe5, 0xf7fcb9, 0xd9f0a3, 0xaddd8e, 0x78c679, 0x41ab5d, 0x238443, 0x006837, 0x004529],\n\tReds: [0xfff5f0, 0xfee0d2, 0xfcbba1, 0xfc9272, 0xfb6a4a, 0xef3b2c, 0xcb181d, 0xa50f15, 0x67000d],\n\tRdPu: [0xfff7f3, 0xfde0dd, 0xfcc5c0, 0xfa9fb5, 0xf768a1, 0xdd3497, 0xae017e, 0x7a0177, 0x49006a],\n\tGreens: [0xf7fcf5, 0xe5f5e0, 0xc7e9c0, 0xa1d99b, 0x74c476, 0x41ab5d, 0x238b45, 0x006d2c, 0x00441b],\n\tYlGnBu: [0xffffd9, 0xedf8b1, 0xc7e9b4, 0x7fcdbb, 0x41b6c4, 0x1d91c0, 0x225ea8, 0x253494, 0x081d58],\n\tPurples: [0xfcfbfd, 0xefedf5, 0xdadaeb, 0xbcbddc, 0x9e9ac8, 0x807dba, 0x6a51a3, 0x54278f, 0x3f007d],\n\tGnBu: [0xf7fcf0, 0xe0f3db, 0xccebc5, 0xa8ddb5, 0x7bccc4, 0x4eb3d3, 0x2b8cbe, 0x0868ac, 0x084081],\n\tGreys: [0xffffff, 0xf0f0f0, 0xd9d9d9, 0xbdbdbd, 0x969696, 0x737373, 0x525252, 0x252525, 0x000000],\n\tYlOrRd: [0xffffcc, 0xffeda0, 0xfed976, 0xfeb24c, 0xfd8d3c, 0xfc4e2a, 0xe31a1c, 0xbd0026, 0x800026],\n\tPuRd: [0xf7f4f9, 0xe7e1ef, 0xd4b9da, 0xc994c7, 0xdf65b0, 0xe7298a, 0xce1256, 0x980043, 0x67001f],\n\tBlues: [0xf7fbff, 0xdeebf7, 0xc6dbef, 0x9ecae1, 0x6baed6, 0x4292c6, 0x2171b5, 0x08519c, 0x08306b],\n\tPuBuGn: [0xfff7fb, 0xece2f0, 0xd0d1e6, 0xa6bddb, 0x67a9cf, 0x3690c0, 0x02818a, 0x016c59, 0x014636],\n\tViridis: [0x440154, 0x482777, 0x3f4a8a, 0x31678e, 0x26838f, 0x1f9d8a, 0x6cce5a, 0xb6de2b, 0xfee825],\n\tSpectral: [\n\t\t0x9e0142,\n\t\t0xd53e4f,\n\t\t0xf46d43,\n\t\t0xfdae61,\n\t\t0xfee08b,\n\t\t0xffffbf,\n\t\t0xe6f598,\n\t\t0xabdda4,\n\t\t0x66c2a5,\n\t\t0x3288bd,\n\t\t0x5e4fa2,\n\t],\n\tRdYlGn: [\n\t\t0xa50026,\n\t\t0xd73027,\n\t\t0xf46d43,\n\t\t0xfdae61,\n\t\t0xfee08b,\n\t\t0xffffbf,\n\t\t0xd9ef8b,\n\t\t0xa6d96a,\n\t\t0x66bd63,\n\t\t0x1a9850,\n\t\t0x006837,\n\t],\n\tRdBu: [\n\t\t0x67001f,\n\t\t0xb2182b,\n\t\t0xd6604d,\n\t\t0xf4a582,\n\t\t0xfddbc7,\n\t\t0xf7f7f7,\n\t\t0xd1e5f0,\n\t\t0x92c5de,\n\t\t0x4393c3,\n\t\t0x2166ac,\n\t\t0x053061,\n\t],\n\tPiYG: [\n\t\t0x8e0152,\n\t\t0xc51b7d,\n\t\t0xde77ae,\n\t\t0xf1b6da,\n\t\t0xfde0ef,\n\t\t0xf7f7f7,\n\t\t0xe6f5d0,\n\t\t0xb8e186,\n\t\t0x7fbc41,\n\t\t0x4d9221,\n\t\t0x276419,\n\t],\n\tPRGn: [\n\t\t0x40004b,\n\t\t0x762a83,\n\t\t0x9970ab,\n\t\t0xc2a5cf,\n\t\t0xe7d4e8,\n\t\t0xf7f7f7,\n\t\t0xd9f0d3,\n\t\t0xa6dba0,\n\t\t0x5aae61,\n\t\t0x1b7837,\n\t\t0x00441b,\n\t],\n\tRdYlBu: [\n\t\t0xa50026,\n\t\t0xd73027,\n\t\t0xf46d43,\n\t\t0xfdae61,\n\t\t0xfee090,\n\t\t0xffffbf,\n\t\t0xe0f3f8,\n\t\t0xabd9e9,\n\t\t0x74add1,\n\t\t0x4575b4,\n\t\t0x313695,\n\t],\n\tBrBG: [\n\t\t0x543005,\n\t\t0x8c510a,\n\t\t0xbf812d,\n\t\t0xdfc27d,\n\t\t0xf6e8c3,\n\t\t0xf5f5f5,\n\t\t0xc7eae5,\n\t\t0x80cdc1,\n\t\t0x35978f,\n\t\t0x01665e,\n\t\t0x003c30,\n\t],\n\tRdGy: [\n\t\t0x67001f,\n\t\t0xb2182b,\n\t\t0xd6604d,\n\t\t0xf4a582,\n\t\t0xfddbc7,\n\t\t0xffffff,\n\t\t0xe0e0e0,\n\t\t0xbababa,\n\t\t0x878787,\n\t\t0x4d4d4d,\n\t\t0x1a1a1a,\n\t],\n\tPuOr: [\n\t\t0x7f3b08,\n\t\t0xb35806,\n\t\t0xe08214,\n\t\t0xfdb863,\n\t\t0xfee0b6,\n\t\t0xf7f7f7,\n\t\t0xd8daeb,\n\t\t0xb2abd2,\n\t\t0x8073ac,\n\t\t0x542788,\n\t\t0x2d004b,\n\t],\n\tSet2: [0x66c2a5, 0xfc8d62, 0x8da0cb, 0xe78ac3, 0xa6d854, 0xffd92f, 0xe5c494, 0xb3b3b3],\n\tAccent: [0x7fc97f, 0xbeaed4, 0xfdc086, 0xffff99, 0x386cb0, 0xf0027f, 0xbf5b17, 0x666666],\n\tSet1: [0xe41a1c, 0x377eb8, 0x4daf4a, 0x984ea3, 0xff7f00, 0xffff33, 0xa65628, 0xf781bf, 0x999999],\n\tSet3: [\n\t\t0x8dd3c7,\n\t\t0xffffb3,\n\t\t0xbebada,\n\t\t0xfb8072,\n\t\t0x80b1d3,\n\t\t0xfdb462,\n\t\t0xb3de69,\n\t\t0xfccde5,\n\t\t0xd9d9d9,\n\t\t0xbc80bd,\n\t\t0xccebc5,\n\t\t0xffed6f,\n\t],\n\tDark2: [0x1b9e77, 0xd95f02, 0x7570b3, 0xe7298a, 0x66a61e, 0xe6ab02, 0xa6761d, 0x666666],\n\tPaired: [\n\t\t0xa6cee3,\n\t\t0x1f78b4,\n\t\t0xb2df8a,\n\t\t0x33a02c,\n\t\t0xfb9a99,\n\t\t0xe31a1c,\n\t\t0xfdbf6f,\n\t\t0xff7f00,\n\t\t0xcab2d6,\n\t\t0x6a3d9a,\n\t\t0xffff99,\n\t\t0xb15928,\n\t],\n\tPastel2: [0xb3e2cd, 0xfdcdac, 0xcbd5e8, 0xf4cae4, 0xe6f5c9, 0xfff2ae, 0xf1e2cc, 0xcccccc],\n\tPastel1: [0xfbb4ae, 0xb3cde3, 0xccebc5, 0xdecbe4, 0xfed9a6, 0xffffcc, 0xe5d8bd, 0xfddaec, 0xf2f2f2],\n}\n\n/**\n * X11 color names\n * http://www.w3.org/TR/css3-color/#svg-color\n *\n * @example chroma.Object.keys(w3cx11).slice(0, 4)\n */\nexport const w3cx11 = {\n\taliceblue: 0xf0f8ff,\n\tantiquewhite: 0xfaebd7,\n\taqua: 0x00ffff,\n\taquamarine: 0x7fffd4,\n\tazure: 0xf0ffff,\n\tbeige: 0xf5f5dc,\n\tbisque: 0xffe4c4,\n\tblack: 0x000000,\n\tblanchedalmond: 0xffebcd,\n\tblue: 0x0000ff,\n\tblueviolet: 0x8a2be2,\n\tbrown: 0xa52a2a,\n\tburlywood: 0xdeb887,\n\tcadetblue: 0x5f9ea0,\n\tchartreuse: 0x7fff00,\n\tchocolate: 0xd2691e,\n\tcoral: 0xff7f50,\n\tcornflower: 0x6495ed,\n\tcornflowerblue: 0x6495ed,\n\tcornsilk: 0xfff8dc,\n\tcrimson: 0xdc143c,\n\tcyan: 0x00ffff,\n\tdarkblue: 0x00008b,\n\tdarkcyan: 0x008b8b,\n\tdarkgoldenrod: 0xb8860b,\n\tdarkgray: 0xa9a9a9,\n\tdarkgreen: 0x006400,\n\tdarkgrey: 0xa9a9a9,\n\tdarkkhaki: 0xbdb76b,\n\tdarkmagenta: 0x8b008b,\n\tdarkolivegreen: 0x556b2f,\n\tdarkorange: 0xff8c00,\n\tdarkorchid: 0x9932cc,\n\tdarkred: 0x8b0000,\n\tdarksalmon: 0xe9967a,\n\tdarkseagreen: 0x8fbc8f,\n\tdarkslateblue: 0x483d8b,\n\tdarkslategray: 0x2f4f4f,\n\tdarkslategrey: 0x2f4f4f,\n\tdarkturquoise: 0x00ced1,\n\tdarkviolet: 0x9400d3,\n\tdeeppink: 0xff1493,\n\tdeepskyblue: 0x00bfff,\n\tdimgray: 0x696969,\n\tdimgrey: 0x696969,\n\tdodgerblue: 0x1e90ff,\n\tfirebrick: 0xb22222,\n\tfloralwhite: 0xfffaf0,\n\tforestgreen: 0x228b22,\n\tfuchsia: 0xff00ff,\n\tgainsboro: 0xdcdcdc,\n\tghostwhite: 0xf8f8ff,\n\tgold: 0xffd700,\n\tgoldenrod: 0xdaa520,\n\tgray: 0x808080,\n\tgreen: 0x008000,\n\tgreenyellow: 0xadff2f,\n\tgrey: 0x808080,\n\thoneydew: 0xf0fff0,\n\thotpink: 0xff69b4,\n\tindianred: 0xcd5c5c,\n\tindigo: 0x4b0082,\n\tivory: 0xfffff0,\n\tkhaki: 0xf0e68c,\n\tlaserlemon: 0xffff54,\n\tlavender: 0xe6e6fa,\n\tlavenderblush: 0xfff0f5,\n\tlawngreen: 0x7cfc00,\n\tlemonchiffon: 0xfffacd,\n\tlightblue: 0xadd8e6,\n\tlightcoral: 0xf08080,\n\tlightcyan: 0xe0ffff,\n\tlightgoldenrod: 0xfafad2,\n\tlightgoldenrodyellow: 0xfafad2,\n\tlightgray: 0xd3d3d3,\n\tlightgreen: 0x90ee90,\n\tlightgrey: 0xd3d3d3,\n\tlightpink: 0xffb6c1,\n\tlightsalmon: 0xffa07a,\n\tlightseagreen: 0x20b2aa,\n\tlightskyblue: 0x87cefa,\n\tlightslategray: 0x778899,\n\tlightslategrey: 0x778899,\n\tlightsteelblue: 0xb0c4de,\n\tlightyellow: 0xffffe0,\n\tlime: 0x00ff00,\n\tlimegreen: 0x32cd32,\n\tlinen: 0xfaf0e6,\n\tmagenta: 0xff00ff,\n\tmaroon: 0x800000,\n\tmaroon2: 0x7f0000,\n\tmaroon3: 0xb03060,\n\tmediumaquamarine: 0x66cdaa,\n\tmediumblue: 0x0000cd,\n\tmediumorchid: 0xba55d3,\n\tmediumpurple: 0x9370db,\n\tmediumseagreen: 0x3cb371,\n\tmediumslateblue: 0x7b68ee,\n\tmediumspringgreen: 0x00fa9a,\n\tmediumturquoise: 0x48d1cc,\n\tmediumvioletred: 0xc71585,\n\tmidnightblue: 0x191970,\n\tmintcream: 0xf5fffa,\n\tmistyrose: 0xffe4e1,\n\tmoccasin: 0xffe4b5,\n\tnavajowhite: 0xffdead,\n\tnavy: 0x000080,\n\toldlace: 0xfdf5e6,\n\tolive: 0x808000,\n\tolivedrab: 0x6b8e23,\n\torange: 0xffa500,\n\torangered: 0xff4500,\n\torchid: 0xda70d6,\n\tpalegoldenrod: 0xeee8aa,\n\tpalegreen: 0x98fb98,\n\tpaleturquoise: 0xafeeee,\n\tpalevioletred: 0xdb7093,\n\tpapayawhip: 0xffefd5,\n\tpeachpuff: 0xffdab9,\n\tperu: 0xcd853f,\n\tpink: 0xffc0cb,\n\tplum: 0xdda0dd,\n\tpowderblue: 0xb0e0e6,\n\tpurple: 0x800080,\n\tpurple2: 0x7f007f,\n\tpurple3: 0xa020f0,\n\trebeccapurple: 0x663399,\n\tred: 0xff0000,\n\trosybrown: 0xbc8f8f,\n\troyalblue: 0x4169e1,\n\tsaddlebrown: 0x8b4513,\n\tsalmon: 0xfa8072,\n\tsandybrown: 0xf4a460,\n\tseagreen: 0x2e8b57,\n\tseashell: 0xfff5ee,\n\tsienna: 0xa0522d,\n\tsilver: 0xc0c0c0,\n\tskyblue: 0x87ceeb,\n\tslateblue: 0x6a5acd,\n\tslategray: 0x708090,\n\tslategrey: 0x708090,\n\tsnow: 0xfffafa,\n\tspringgreen: 0x00ff7f,\n\tsteelblue: 0x4682b4,\n\ttan: 0xd2b48c,\n\tteal: 0x008080,\n\tthistle: 0xd8bfd8,\n\ttomato: 0xff6347,\n\tturquoise: 0x40e0d0,\n\tviolet: 0xee82ee,\n\twheat: 0xf5deb3,\n\twhite: 0xffffff,\n\twhitesmoke: 0xf5f5f5,\n\tyellow: 0xffff00,\n\tyellowgreen: 0x9acd32,\n}\n\n/**\n * Return a new [[CubeHelix]].\n *\n * @example chroma.cubehelix() // use the default helix\n * @example chroma.cubehelix().start(200).rotations(-0.5).gamma(0.8).lightness([0.3, 0.8])\n */\nexport function cubehelix(\n\tstart = 300,\n\trotations = -1.5,\n\thue: number | [number, number] = 1,\n\tgamma = 1,\n\tlightness: number | [number, number] = [0, 1],\n) {\n\tconst f: CubeHelix = ((t) => f.at(t)) as CubeHelix\n\t;(Object.getOwnPropertyNames(CubeHelix.prototype) as (keyof typeof CubeHelix)[]).forEach(\n\t\t(key) => (f[key] = CubeHelix.prototype[key]),\n\t)\n\tf.start(start)\n\tf.rotations(rotations)\n\tf.hue(hue)\n\tf.gamma(gamma)\n\tf.lightness(lightness)\n\treturn f\n}\n\n/**\n * [Dave Green's cubehelix color scheme](http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/)!\n *\n * A CubeHelix is a function defined on [0, 1] which returns colors.\n */\nexport interface CubeHelix {\n\t(f: number): Color\n}\nexport class CubeHelix {\n\tprivate _start!: number\n\tprivate _rotations!: number\n\tprivate _gamma!: number\n\tprivate _hue!: [number, number]\n\tprivate _lightness!: [number, number]\n\n\tpublic start(): number\n\tpublic start(s: number): this\n\tpublic start(s?: number) {\n\t\tif (undefined === s) {\n\t\t\treturn this._start\n\t\t}\n\t\tthis._start = s\n\t\treturn this\n\t}\n\n\tpublic rotations(): number\n\tpublic rotations(r: number): this\n\tpublic rotations(r?: number) {\n\t\tif (undefined === r) {\n\t\t\treturn this._rotations\n\t\t}\n\t\tthis._rotations = r\n\t\treturn this\n\t}\n\n\tpublic gamma(): number\n\tpublic gamma(g: number): this\n\tpublic gamma(g?: number) {\n\t\tif (undefined === g) {\n\t\t\treturn this._gamma\n\t\t}\n\t\tthis._gamma = g\n\t\treturn this\n\t}\n\n\tpublic hue(): [number, number]\n\tpublic hue(h: number | [number, number]): this\n\tpublic hue(h?: number | [number, number]) {\n\t\tif (undefined === h) {\n\t\t\treturn this._hue\n\t\t}\n\t\tthis._hue = Array.isArray(h) ? h : [h, h]\n\t\treturn this\n\t}\n\n\tpublic lightness(): [number, number]\n\tpublic lightness(h: number | [number, number]): this\n\tpublic lightness(h?: number | [number, number]) {\n\t\tif (undefined === h) {\n\t\t\treturn this._lightness\n\t\t}\n\t\tthis._lightness = Array.isArray(h) ? h : [h, h]\n\t\treturn this\n\t}\n\n\t/**\n\t * Convert to a [[Scale]].\n\t *\n\t * @example chroma.cubehelix().scale().correctLightness().domain(2, 22)\n\t */\n\tpublic scale() {\n\t\treturn scale(this)\n\t}\n\n\tpublic at(fract: number) {\n\t\tconst a = TWOPI * ((this._start + 120) / 360 + this._rotations * fract)\n\t\tconst l = lerp(this._lightness[0], this._lightness[1], fract) ** this._gamma\n\t\tconst h = lerp(this._hue[0], this._hue[1], fract)\n\t\tconst amp = (h * l * (1 - l)) / 2\n\t\tconst cos_a = cos(a)\n\t\tconst sin_a = sin(a)\n\t\tconst r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a)\n\t\tconst g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a)\n\t\tconst b = l + amp * (+1.97294 * cos_a)\n\t\treturn rgb([r * 255, g * 255, b * 255, 1])\n\t}\n}\n\n/**\n * Create a new random [Color] from a random point in the RGB color space.\n * @param randomSource A function which returns random `number`s in the interval [0; 1). Useful if you want to\n *     create a deterministic sequence of \"random\" colors. Defaults to `Math.random`.\n */\nexport function random(randomSource = Math.random) {\n\treturn num((randomSource() * 0x1_00_00_00) | 0)\n}\n\n/**\n * Create a valid RGB color (`.clipped() == false`) from a random point in the CIELAB color space. This results in\n * more colors in the RGB color space where humans can perceive more differences.\n * @param randomSource A function which returns random `number`s in the interval [0; 1). Useful if you want to\n *     create a deterministic sequence of \"random\" colors. Defaults to `Math.random`.\n * @example chroma.random((() => { let i = 0; return () => (i = (i *Math.SQRT2) % 1); })())\n */\n// export function randomLab(randomSource = Math.random) {\n// \tconst labAMin = -87,\n// \t\tlabAMax = 99,\n// \t\tlabBMin = -108,\n// \t\tlabBMax = 95\n// \tlet maxIterations = 100\n// \twhile (maxIterations--) {\n// \t\tconst u = randomSource(),\n// \t\t\tv = randomSource(),\n// \t\t\tw = randomSource()\n// \t\t// The following matrix multiplication transform the random point (u v w) in the unit cube into the\n// \t\t// oriented bounding box (OBB) of the projection of the RGB space into the LAB space. This is necessary to\n// \t\t// avoid a huge number of misses.\n// \t\tconst color = lab(\n// \t\t\tu * -53.903 + v * -88.755 + w * 71.7 + 99.707,\n// \t\t\tu * -82.784 + v * 187.036 + w * -2.422 + -28.17,\n// \t\t\tu * -75.813 + v * -141.406 + w * -48.261 + 152.469,\n// \t\t)\n// \t\tconsole.log(color.lab())\n// \t\tconsole.log(color.rgba(false, false))\n// \t\tif (!color.clipped()) return color\n// \t}\n// \tthrow new Error(\"Could find a random color in 100 iterations\")\n// }\n\n/**\n * Mixes two colors. The mix ratio is a value between 0 and 1.\n * The color mixing produces different results based the color space used for interpolation.\n *\n * @param col2\n * @param f\n * @param m\n * @example chroma.mix('red', 'blue')\n * @example chroma.mix('red', 'blue', 0.25)\n * @example chroma.mix('red', 'blue', 0.75)\n *\n * @example chroma.mix('red', 'blue', 0.5, 'rgb')\n * @example chroma.mix('red', 'blue', 0.5, 'hsl')\n * @example chroma.mix('red', 'blue', 0.5, 'lab')\n * @example chroma.mix('red', 'blue', 0.5, 'lch')\n * @example chroma.mix('red', 'blue', 0.5, 'lrgb')\n */\nexport function mix(col1: Chromable, col2: Chromable, f = 0.5, m: InterpolationMode = \"rgb\") {\n\tconst c1 = color(col1)\n\tconst c2 = color(col2)\n\tconst res = interpolators[m] && ((interpolators as any)[m](c1, c2, f, m) as Color)\n\tif (!res) {\n\t\tthrow new Error(\"color mode \" + m + \" is not supported\")\n\t}\n\treturn res.alpha(lerp(c1.alpha(), c2.alpha(), f))\n}\n\n/**\n * Parse a CSS color. See [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color) for all the possible\n * variants.\n *\n * @example chroma.css('hsl(2rad 90% 50% / 0.9)')\n * @example chroma.css('laserlemon')\n */\nexport function css(cssString: string) {\n\tconst [r, g, b, a] = css2rgb(cssString)\n\treturn new Color(r, g, b, a)\n}\n\n/**\n * @example chroma.cmyk(0.2, 0.8, 0, 0)\n * @example chroma.color(0.2, 0.8, 0, 0, 'cmyk')\n */\nexport function cmyk(cmyk: CMYK): Color\nexport function cmyk(cyan1: number, magenta1: number, yellow1: number, key1: number): Color\nexport function cmyk(...args: any[]) {\n\treturn guess(args, \"cmyk\")\n}\n\n/**\n * @example chroma.gl(1, 1, 0, 1)\n */\nexport function gl(gl: RGBA | RGB): Color\n/**\n * @example chroma.gl([1, 0, 1, 0.5])\n */\nexport function gl(red1: number, green1: number, blue1: number, alpha1: number): Color\nexport function gl(...args: any[]) {\n\treturn guess(args, \"gl\")\n}\n\nexport function hcg(hcg: HCG): Color\n/**\n * @param alpha1 default=1\n */\nexport function hcg(h: number, c: number, g: number, alpha1?: number): Color\nexport function hcg(...args: any[]) {\n\treturn guess(args, \"hcg\")\n}\n\nexport function lch(lch: LCH): Color\n/**\n * @param alpha1 default=1\n */\nexport function lch(h: number, c: number, l: number, alpha1?: number): Color\nexport function lch(...args: any[]) {\n\treturn guess(args, \"lch\")\n}\n\nexport function hsi(hsi: HSI): Color\n/**\n * @param alpha1 default=1\n */\nexport function hsi(h: number, s: number, i: number, alpha1?: number): Color\nexport function hsi(...args: any[]) {\n\treturn guess(args, \"hsi\")\n}\n\nexport function hsl(hsl: HSL): Color\n/**\n * @param alpha1 default=1\n * @example chroma.hsl(30, 1, 0.5)\n * @example chroma.hsl(30, 0.6, 0.5)\n */\nexport function hsl(hueDegrees: number, saturation1: number, lightness1: number, alpha1?: number): Color\nexport function hsl(...args: any[]) {\n\treturn guess(args, \"hsl\")\n}\n\nexport function hsv(hsv: LAB): Color\nexport function hsv(h: number, s: number, v: number): Color\nexport function hsv(...args: any[]) {\n\treturn guess(args, \"hsv\")\n}\n\n/**\n *\n * @param temperature\n * @example chroma.kelvin(2000) // candle light\n * @example chroma.kelvin(3500) // sunset\n * @example chroma.kelvin(6500) // daylight\n * @example x0_1 => chroma.kelvin(x0_1 * 30000) // effective range: [0; 30000]\n */\nexport function kelvin(temperature: number) {\n\tconst [r, g, b] = kelvin2rgb(temperature)\n\treturn new Color(r, g, b)\n}\n\nexport function lab(lab: LAB): Color\n/**\n * @param alpha1 default=1\n */\nexport function lab(lightness1: number, a1: number, b: number, alpha1?: number): Color\nexport function lab(...args: any[]) {\n\treturn guess(args, \"lab\")\n}\n\n/**\n * @example chroma.num(0x663399) // rebeccapurple\n */\nexport function num(num: number) {\n\tconst [r, g, b] = num2rgb(num)\n\treturn new Color(r, g, b)\n}\n\nexport function rgb(rgb: RGBA | RGB): Color\n/**\n * @param alpha1 default=1\n * @example chroma.rgb(0, 100, 200)\n */\nexport function rgb(red255: number, green255: number, blue255: number, alpha1?: number): Color\nexport function rgb(...args: any[]) {\n\treturn guess(args, \"rgb\")\n}\n\nexport function xyz(xyz: XYZ): Color\n/** @param alpha1 default=1 */\nexport function xyz(x1: number, y1: number, z1: number, alpha1?: number): Color\nexport function xyz(...args: any[]) {\n\treturn guess(args, \"xyz\")\n}\n\n/**\n * Similar to mix, but accepts more than two colors.\n *\n * @example colors = ['#ddd', 'yellow', 'red', 'teal']\n * @example chroma.average(colors) // default = 'rgb'\n * @example chroma.average(colors, 'lab')\n * @example chroma.average(colors, 'lch')\n * @example chroma.average(colors, 'lrgb')\n * @example chroma.average(['red', 'rgba(0,0,0,0.5)']).css()\n */\nexport function average(chromables: Chromable[], mode: InterpolationMode = \"rgb\") {\n\tconst colors = chromables.map((c) => color(c))\n\tif (mode == \"lrgb\") {\n\t\treturn _average_lrgb(colors)\n\t}\n\tif (mode == \"num\") {\n\t\tlet numSum = 0,\n\t\t\talphaSum = 0\n\t\tfor (const col of colors) {\n\t\t\tnumSum += col.num()\n\t\t\talphaSum += col.alpha()\n\t\t}\n\t\treturn num(numSum / colors.length).alpha(alphaSum / colors.length)\n\t}\n\tconst xyz = [0, 0, 0]\n\tlet dx = 0\n\tlet dy = 0\n\tlet alphaSum = 0\n\tfor (const c of colors) {\n\t\tconst xyz2 = c[mode]()\n\t\talphaSum += c.alpha()\n\n\t\tfor (let i = 0; i < xyz.length; i++) {\n\t\t\tif (mode.charAt(i) == \"h\") {\n\t\t\t\tconst A = xyz2[i] * DEG2RAD\n\t\t\t\tdx += cos(A)\n\t\t\t\tdy += sin(A)\n\t\t\t} else {\n\t\t\t\txyz[i] += xyz2[i]\n\t\t\t}\n\t\t}\n\t}\n\tfor (let i = 0; i < xyz.length; i++) {\n\t\tif (mode.charAt(i) == \"h\") {\n\t\t\tconst A = atan2(dy / colors.length, dx / colors.length) * RAD2DEG\n\t\t\txyz[i] = (A + 360) % 360\n\t\t} else {\n\t\t\txyz[i] = xyz[i] / colors.length\n\t\t}\n\t}\n\treturn guess(xyz, mode).alpha(alphaSum / colors.length)\n}\n\n/**\n *\n * @param chromables\n * @example chroma.scale('black', 'red', 'gold') // linear interpolation\n * @example chroma.bezier('black', 'red', 'gold') // bezier interpolation\n */\nexport function bezier(chromables: Chromable[]): { (t: number): Color; scale(): Scale }\nexport function bezier(...chromables: Chromable[]): { (t: number): Color; scale(): Scale }\nexport function bezier(...args: any[]) {\n\tconst chromables: Chromable[] = Array.isArray(args[0]) ? args[0] : args\n\tconst f = _bezier(chromables) as { (t: number): Color; scale(): Scale }\n\tf.scale = CubeHelix.prototype.scale\n\treturn f\n}\n\n/**\n * Blends two colors using RGB channel-wise blend functions.\n * @param bottom\n * @param top\n * @param mode\n * @example chroma.blend('4CBBFC', 'EEEE22', 'multiply')\n * @example chroma.blend('4CBBFC', 'EEEE22', 'darken')\n * @example chroma.blend('4CBBFC', 'EEEE22', 'lighten')\n */\nexport function blend(bottom: Chromable, top: Chromable, mode: BlendMode) {\n\tif (!blend_fs[mode]) {\n\t\tthrow new Error(\"unknown blend mode \" + mode)\n\t}\n\treturn blend_fs[mode](bottom, top)\n}\nexport type BlendMode = keyof typeof blend_fs\nconst blend_fs = {\n\tnormal: blend_f(each((a, _) => a)),\n\tmultiply: blend_f(each((a, b) => (a * b) / 255)),\n\tscreen: blend_f(each(_screen)),\n\toverlay: blend_f(each(_overlay)),\n\tdarken: blend_f(each(min)),\n\tlighten: blend_f(each(max)),\n\tdodge: blend_f(each(_dodge)),\n\tburn: blend_f(each(_burn)),\n}\n\n/**\n * @param colors\n * @example scale = chroma.scale(['yellow', '008ae5'])\n * @example scale(0.25)\n * @example scale(0.5)\n * @example scale(0.75)\n * @example chroma.scale('Viridis')\n */\nexport function scale(colors: Chromable[] | keyof typeof brewer | ((f: number) => Color)): Scale\nexport function scale(...colors: Chromable[]): Scale\nexport function scale(...args: any[]) {\n\tconst f: Scale = ((t) => (f as any)._at(t)) as Scale\n\t;(Object.getOwnPropertyNames(Scale.prototype) as (keyof typeof Scale)[]).forEach(\n\t\t(key) => (f[key] = Scale.prototype[key]),\n\t)\n\tif (Array.isArray(args[0])) args = args[0]\n\tif (args.length == 1 && \"string\" == typeof args[0]) args = brewer[args[0] as keyof typeof brewer]\n\t;(f as any)._init(\"function\" == typeof args[0] ? args[0] : args.map((a) => color(a)))\n\t//f.setColors(args.length > 1 ? args : args[0])\n\treturn f\n}\n/**\n * A color scale, created with scale, is a function that maps numeric values to a color palette.\n *\n * The type parameter describes the output type and can be changed with out(). Defaults to Color objects.\n *\n * @param T The output format. default=Color\n * @example chroma.scale('Purples')\n * @example chroma.scale('Purples')(0.4)\n */\nexport interface Scale<T = Color> {\n\t(val: number): T\n}\nexport class Scale<T = Color> {\n\tprivate _colors!: Color[] | ((t: number) => Color)\n\tprivate _classes!: number[] | undefined\n\t/**\n\t * Color cache. undefined if the cache should not be used.\n\t */\n\tprivate _cache!: Map<number, Color> | undefined\n\tprivate _correctLightness!: boolean\n\tprivate _gamma!: number\n\tprivate _mode!: InterpolationMode\n\tprivate _out!: ColorFormat | undefined\n\tprivate _min!: number\n\tprivate _max!: number\n\tprivate _paddingLeft!: number\n\tprivate _paddingRight!: number\n\t// positions of the colors on the interval [0, 1]. guaranteed to have the same length as _colors\n\t// undefined when _colors is a function\n\tprivate _pos: number[] | undefined\n\n\t/**\n\t * Get the current scale classes.\n\t */\n\tpublic classes(): number[]\n\t/**\n\t * Make the scale return a number of distint color instead of a continuous gradient.\n\t * If you pass a number the scale will broken into equi-distant classes:\n\t *\n\t * @example chroma.scale('OrRd') // continous\n\t * @example chroma.scale('OrRd').classes(5) // equidistant classes\n\t * @example chroma.scale('OrRd').classes(8)\n\t *\n\t * @example chroma.scale('OrRd').classes([0, 6, 11, 17, 20]) // also sets domain\n\t */\n\tpublic classes(classes: number | number[]): this\n\tpublic classes(classes?: number | number[]) {\n\t\tif (undefined === classes) {\n\t\t\treturn this._classes\n\t\t}\n\t\tif (Array.isArray(classes)) {\n\t\t\tthis._classes = classes\n\t\t\tthis.domain(classes[0], classes[classes.length - 1])\n\t\t} else {\n\t\t\tif (classes % 1 != 0 || classes < 1) throw new Error(\"invalid classes param\")\n\t\t\t// const d = analyze(this.domain())\n\t\t\tthis._classes = limits(this.domain(), \"e\", classes)\n\t\t}\n\t\treturn this\n\t}\n\n\t/**\n\t * Get the domain.\n\t * @return If _colors is a function, [this._min, this._max]. If _colors is an array of colors, an array with the\n\t * same length as the number of colors.\n\t * @example chroma.scale(\"red\", \"white\", \"blue\").domain(0, 20).domain() // == [0, 10, 20]\n\t */\n\tpublic domain(): number[]\n\t/**\n\t * Set the domain interval on which the scale is defined. Colors are distributed equidistantly along the\n\t * interval.\n\t * @param start\n\t * @param end\n\t * @return `this`\n\t * @example chroma.scale(\"red\", \"white\", \"blue\").domain(0, 100)(50) // == white\n\t * @example chroma.scale(\"red\", \"white\", \"blue\").domain(0, 0.25, 1).domain(0, 100).domain() // == [0, 25, 100]\n\t */\n\tpublic domain(start: number, end: number): this\n\t/**\n\t * Set the domain interval and the individual positions of the colors. The number of passed values must match\n\t * the number of colors which define the scale. Not valid if the scale is defined by a function.\n\t * @param domain The positions of all scale colors. Values must be in ascending order and should not have\n\t * duplicates.\n\t * @return `this`\n\t * @example scale = chroma.scale(\"red\", \"white\", \"blue\").domain(0, 25, 100)\n\t * @example scale(25) // == white\n\t * @example scale(100) // == blue\n\t * @example scale(50) // == #aaaaff\n\t */\n\tpublic domain(...domain: number[]): this\n\tpublic domain(...domain: number[]): number[] | this {\n\t\tif (undefined === domain[0]) {\n\t\t\treturn \"function\" !== typeof this._colors\n\t\t\t\t? this._pos!.map((p) => lerp(this._min, this._max, p))\n\t\t\t\t: [this._min, this._max]\n\t\t}\n\t\tthis._min = domain[0]\n\t\tthis._max = domain[domain.length - 1]\n\t\tif (2 == domain.length) {\n\t\t\tif (\"function\" !== typeof this._colors) {\n\t\t\t\t// equidistant positions\n\t\t\t\tthis._pos = this._colors.map((_, c) => c / (this._colors.length - 1))\n\t\t\t}\n\t\t} else if (\"function\" !== typeof this._colors && domain.length == this._colors.length) {\n\t\t\tthis._pos = domain.map((d) => lerpInv(this._min, this._max, d))\n\t\t} else {\n\t\t\tthrow new Error(\"invalid domain \" + domain)\n\t\t}\n\t\treturn this\n\t}\n\n\t/**\n\t * Get the interpolation mode used when calculating colors.\n\t */\n\tpublic mode(): InterpolationMode\n\t/**\n\t * Set the interpolation mode used when calculating colors. The defaut mode is \"rgb\".\n\t * See also {@link chroma#mix}\n\t * @param mode the mode to set.\n\t * @return `this`\n\t * @example chroma.scale(\"red\", \"green\").mode(\"lab\")\n\t * @example chroma.scale(\"red\", \"green\").mode(\"lrgb\")\n\t */\n\tpublic mode(mode: InterpolationMode): this\n\tpublic mode(mode?: InterpolationMode) {\n\t\tif (undefined === mode) {\n\t\t\treturn this._mode\n\t\t}\n\t\tthis._mode = mode\n\t\tthis._resetCache()\n\t\treturn this\n\t}\n\n\t/**\n\t * Set the output format return by `this(x)` and `this.colors(n)`.\n\t * @param outputFormat The color format to use. Pass `undefined` to return [Color] objects.\n\t * @return `this`\n\t * @example chroma.scale(\"red\", \"white\").out(\"hex\")(0) // == \"#ff0000\"\n\t * @example chroma.scale(\"red\", \"white\").out(\"num\").colors(2) // == [0xff0000, 0xffffff]\n\t */\n\tpublic out<M extends ColorFormat | undefined>(\n\t\toutputFormat: M,\n\t): Scale<M extends ColorFormat ? ReturnType<Color[M]> : Color> {\n\t\tthis._out = outputFormat\n\t\treturn this as any\n\t}\n\n\t/**\n\t * This makes sure the lightness range is spread evenly across a color scale. Especially useful when working\n\t * with [multi-hue color scales](https://www.vis4.net/blog/2013/09/mastering-multi-hued-color-scales/), where\n\t * simple gamma correction can't help you very much.\n\t *\n\t * @example chroma.scale('black','red','yellow','white')\n\t * @example chroma.scale('black','red','yellow','white').correctLightness()\n\t */\n\tpublic correctLightness(enableCorrectLightness = true) {\n\t\tif (this._correctLightness != enableCorrectLightness) {\n\t\t\tthis._resetCache()\n\t\t\tconst colors = this._colors\n\t\t\tif (enableCorrectLightness && \"function\" !== typeof colors) {\n\t\t\t\t// make sure that the colors have ascending or descending lightnesses\n\t\t\t\tlet sign = 0\n\t\t\t\tfor (let i = 1; i < colors.length; i++) {\n\t\t\t\t\tconst sign2 = colors[i].lab()[0] - colors[i - 1].lab()[0]\n\t\t\t\t\tif (0 == sign) {\n\t\t\t\t\t\tsign = sign2\n\t\t\t\t\t} else if (sign * sign2 < 0) {\n\t\t\t\t\t\tthrow new Error(\"scale color lightnesses must be monotonic\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._correctLightness = enableCorrectLightness\n\t\treturn this\n\t}\n\n\t/**\n\t * Get the padding.\n\t * @returns [paddingLeft, paddingRight]\n\t */\n\tpublic padding(): [number, number]\n\t/**\n\t * Set the padding. Positive values will \"cut off\" the ends of gradient, while negative values will add a\n\t * section of constant color at the ends.\n\t * @example chroma.scale(\"red\", \"white\").padding(0.2)\n\t * @example chroma.scale(\"red\", \"white\").padding(0.1)(0) // == color('#ff1a1a'), instead of red\n\t * @example chroma.scale(\"red\", \"white\").padding(-0.1)(0) // == color('red')\n\t * @param paddingLeft padding on left side.(lower-valued end of the interval).\n\t * @param paddingRight padding on right (higher-valued end of the interval).\n\t * default=paddingLeft\n\t */\n\tpublic padding(paddingLeft: number, paddingRight?: number): this\n\tpublic padding(paddingLeft?: number, paddingRight: number | undefined = paddingLeft) {\n\t\tif (!paddingLeft) {\n\t\t\treturn [this._paddingLeft, this._paddingRight]\n\t\t}\n\t\tthis._paddingLeft = paddingLeft\n\t\tthis._paddingRight = paddingRight!\n\t\treturn this\n\t}\n\n\t/**\n\t * Get a number of equidistant colors.\n\t * @param numColors The number of colors to return.\n\t * @param format Output format. Defaults to `\"hex\"`. Pass `\"color\"` to get {@link Color} objects.\n\t * @returns If `numColors` is `undefined`, the colors which define this [Scale]. If `numColors` is 1,\n\t * `[this((min + max) / 2)]`. Otherwise, an array where the first element is `this(min)`, the last one is\n\t * `this(max)` and the rest are equidistant samples between min and max.\n\t * @example chroma.scale('OrRd').colors(5)\n\t * @example chroma.scale(['white', 'black']).colors(12)\n\t */\n\tpublic colors<M extends ColorFormat | \"color\" | undefined = \"hex\">(\n\t\tnumColors?: number,\n\t\tformat: M = \"hex\" as any,\n\t): Array<M extends ColorFormat ? ReturnType<Color[M]> : M extends \"color\" ? Color : string> {\n\t\tlet result: Color[]\n\t\tif (undefined === numColors) {\n\t\t\tresult = (this._colors as Color[]).slice()\n\t\t} else if (numColors == 1) {\n\t\t\tresult = [this._color((this._min + this._max) / 2)]\n\t\t} else if (numColors > 1) {\n\t\t\tresult = Array.from({ length: numColors }, (_, i) =>\n\t\t\t\tthis._color(lerp(this._min, this._max, i / (numColors - 1))),\n\t\t\t)\n\t\t} else {\n\t\t\t// returns all colors based on the defined classes\n\t\t\tlet samples\n\t\t\tif (this._classes && this._classes.length > 2) {\n\t\t\t\tsamples = Array.from(\n\t\t\t\t\t{ length: this._classes.length - 1 },\n\t\t\t\t\t(_, i) => (this._classes![i] + this._classes![i + 1]) * 0.5,\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tsamples = this.domain() // TODO?!\n\t\t\t}\n\t\t\tresult = samples.map((s) => this._color(s))\n\t\t}\n\n\t\treturn (format != \"color\" ? result.map((c) => c[format as \"hex\"]()) : result) as any\n\t}\n\n\t/**\n\t * Get whether the cache is enabled. Defaults to true.\n\t */\n\tpublic cache(): boolean\n\t/**\n\t * Enable or disable the cache.\n\t * @param enableCache Whether the cache should be enabled.\n\t */\n\tpublic cache(enableCache: boolean): this\n\tpublic cache(enableCache?: boolean) {\n\t\tif (undefined === enableCache) {\n\t\t\treturn !!this._cache\n\t\t}\n\t\tthis._cache = enableCache ? this._cache || new Map() : undefined\n\t\treturn this\n\t}\n\n\t/**\n\t * Get the current gamma value. Defaults to 1.\n\t */\n\tpublic gamma(): number\n\t/**\n\t * Set the gamma value. Gamma-correction can be used to \"shift\" a scale's center more the the beginning (gamma <\n\t * 1) or end (gamma > 1), typically used to \"even\" the lightness gradient. Default is 1.\n\t * @example chroma.scale('YlGn').gamma(0.5)\n\t * @example chroma.scale('YlGn').gamma(1)\n\t * @example chroma.scale('YlGn').gamma(2)\n\t */\n\tpublic gamma(gamma: number): this\n\tpublic gamma(gamma?: number) {\n\t\tif (undefined === gamma) {\n\t\t\treturn this._gamma\n\t\t}\n\t\tthis._gamma = gamma\n\t\treturn this\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _at(t: number) {\n\t\tconst c = this._color(t)\n\t\treturn this._out ? c[this._out]() : c\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _init(colorsOrFunction: Color[] | ((t: number) => Color)) {\n\t\tthis._colors = colorsOrFunction\n\t\tif (\"function\" != typeof colorsOrFunction) {\n\t\t\tthis._pos = colorsOrFunction.map((_, i) => i / (colorsOrFunction.length - 1))\n\t\t}\n\t\tthis._mode = \"rgb\"\n\t\tthis.domain(0, 1)\n\t\tthis._paddingLeft = 0\n\t\tthis._paddingRight = 0\n\t\tthis._correctLightness = false\n\t\tthis._cache = new Map()\n\t\tthis._gamma = 1\n\t}\n\n\tprivate _getClass(value: number) {\n\t\treturn this._classes!.findIndex((cls) => value <= cls) - 1\n\t}\n\n\tprivate _color(val: number, bypassMap = false) {\n\t\tlet t\n\t\tif (!bypassMap) {\n\t\t\tconst min = this._min,\n\t\t\t\tmax = this._max\n\t\t\tif (this._classes && this._classes.length > 2) {\n\t\t\t\tconst c = this._getClass(val)\n\t\t\t\tt = c / (this._classes.length - 2)\n\t\t\t} else if (max !== min) {\n\t\t\t\tt = (val - min) / (max - min)\n\t\t\t} else {\n\t\t\t\tt = 1\n\t\t\t}\n\t\t\tif (this._correctLightness) {\n\t\t\t\tt = this._tCorrectedLightness(t)\n\t\t\t}\n\t\t} else {\n\t\t\tt = val\n\t\t}\n\t\tt = t ** this._gamma\n\t\tt = (this._paddingLeft + t) / (1 + this._paddingLeft + this._paddingRight)\n\t\t//\tt = this._paddingLeft + t * (1 - this._paddingLeft - this._paddingRight)\n\t\tt = clamp(t, 0, 1)\n\t\tconst tHash = t\n\t\tconst cacheResult = this._cache && this._cache.get(tHash)\n\t\tif (cacheResult) {\n\t\t\treturn cacheResult\n\t\t} else {\n\t\t\tlet col: Color\n\t\t\tif (Array.isArray(this._colors)) {\n\t\t\t\tfor (let i = 0; i < this._pos!.length; i++) {\n\t\t\t\t\tconst p = this._pos![i]\n\t\t\t\t\tif (t <= p) {\n\t\t\t\t\t\tcol = this._colors[i]\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tif (t >= p && i == this._pos!.length - 1) {\n\t\t\t\t\t\tcol = this._colors[i]\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tif (t > p && t < this._pos![i + 1]) {\n\t\t\t\t\t\tt = (t - p) / (this._pos![i + 1] - p)\n\t\t\t\t\t\tcol = mix(this._colors[i], this._colors[i + 1], t, this._mode)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcol = this._colors(t)\n\t\t\t}\n\t\t\tif (this._cache) {\n\t\t\t\t// tslint:disable-next-line\n\t\t\t\tthis._cache.set(tHash, col!)\n\t\t\t}\n\t\t\t// tslint:disable-next-line\n\t\t\treturn col!\n\t\t}\n\t}\n\tprivate _tCorrectedLightness(t0_1: number) {\n\t\tconst L0 = this._color(0, true).lab()[0]\n\t\tconst L1 = this._color(1, true).lab()[0]\n\t\tconst L_ideal = lerp(L0, L1, t0_1)\n\t\treturn bisect((t) => this._color(t, true).lab()[0] - L_ideal, 0, 1, 8)\n\t}\n\tprivate _resetCache() {\n\t\tif (this._cache) this._cache.clear()\n\t}\n}\n\nexport namespace scales {\n\t/**\n\t * @example chroma.scales.cool()\n\t */\n\texport function cool() {\n\t\treturn scale([hsl(180, 1, 0.9), hsl(250, 0.7, 0.4)])\n\t}\n\n\t/**\n\t * @example chroma.scales.hot()\n\t */\n\texport function hot() {\n\t\treturn scale([\"#000\", \"#f00\", \"#ff0\", \"#fff\"]).mode(\"rgb\")\n\t}\n}\n\n/**\n * Computes the WCAG contrast ratio between two colors. A minimum contrast of 4.5:1\n * [is recommended](http://www.w3.org/TR/WCAG20-TECHS/G18.html) to ensure that text is still readable against a\n * background color.\n *\n * @param a\n * @param b\n */\nexport function contrast(a: Chromable, b: Chromable) {\n\tconst l1 = color(a).luminance()\n\tconst l2 = color(b).luminance()\n\tif (l1 > l2) {\n\t\treturn (l1 + 0.05) / (l2 + 0.05)\n\t} else {\n\t\treturn (l2 + 0.05) / (l1 + 0.05)\n\t}\n}\n\n/**\n * Compute the [euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance#Three_dimensions) between two\n * colors in a given color space.\n * @param a First color.\n * @param b Second color.\n * @param mode The color space in which to compute the distance. Defaults to \"lab\".\n * @example chroma.distance('#fff', '#ff0', 'rgb')\n * @example chroma.distance('#fff', '#f0f', 'rgb')\n * @example chroma.distance('#fff', '#ff0')\n * @example chroma.distance('#fff', '#f0f')\n */\nexport function distance(a: Chromable, b: Chromable, mode: ColorMode = \"lab\") {\n\tconst l1 = color(a)[mode]()\n\tconst l2 = color(b)[mode]()\n\tconst channelDifferences = l1.map((channelValue: number, channelIndex: number) => channelValue - l2[channelIndex])\n\treturn hypot(...channelDifferences)\n}\n\n/**\n * Computes color difference as developed by the Colour Measurement Committee of the Society of Dyers and Colourists\n * (CMC) in 1984. The implementation is adapted from Bruce Lindbloom. The parameters L and C are weighting factors\n * for lightness and chromaticity.\n * @param reference\n * @param sample\n * @param L\n * @param C\n * @example [r = '#ededee', s = '#edeeed', chroma.deltaE(r, s)]\n * @example [r = '#ececee', s = '#eceeec', chroma.deltaE(r, s)]\n * @example [r = '#e9e9ee', s = '#e9eee9', chroma.deltaE(r, s)]\n * @example [r = '#e4e4ee', s = '#e4eee4', chroma.deltaE(r, s)]\n * @example [r = '#e0e0ee', s = '#e0eee0', chroma.deltaE(r, s)]\n */\nexport function deltaE(reference: Chromable, sample: Chromable, L = 1, C = 1) {\n\tconst [L1, a1, b1] = color(reference).lab()\n\tconst [L2, a2, b2] = color(sample).lab()\n\tconst c1 = sqrt(a1 * a1 + b1 * b1)\n\tconst c2 = sqrt(a2 * a2 + b2 * b2)\n\tconst sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + 0.01765 * L1)\n\tconst sc = (0.0638 * c1) / (1.0 + 0.0131 * c1) + 0.638\n\tconst h1 = norm360(c1 < 0.000001 ? 0.0 : atan2(b1, a1) * RAD2DEG)\n\tconst t =\n\t\th1 >= 164.0 && h1 <= 345.0\n\t\t\t? 0.56 + abs(0.2 * cos((h1 + 168.0) * DEG2RAD))\n\t\t\t: 0.36 + abs(0.4 * cos((h1 + 35.0) * DEG2RAD))\n\tconst c4 = c1 * c1 * c1 * c1\n\tconst f = sqrt(c4 / (c4 + 1900.0))\n\tconst sh = sc * (f * t + 1.0 - f)\n\tconst delL = L1 - L2\n\tconst delC = c1 - c2\n\tconst delA = a1 - a2\n\tconst delB = b1 - b2\n\tconst dH2 = delA * delA + delB * delB - delC * delC\n\tconst v1 = delL / (L * sl)\n\tconst v2 = delC / (C * sc)\n\tconst v3 = sh\n\treturn sqrt(v1 * v1 + v2 * v2 + dH2 / (v3 * v3))\n}\ntype DataInfo = {\n\tmin: number\n\tmax: number\n\tsum: number\n\tvalues: number[]\n\tcount: number\n\tdomain: [number, number]\n\tlimits(mode: LimitsMode, num: number): number[]\n}\nexport function analyze(data: number[]): DataInfo {\n\tconst r: DataInfo = {\n\t\tmin: Infinity,\n\t\tmax: -Infinity,\n\t\tsum: 0,\n\t\tvalues: [] as number[],\n\t\tcount: 0,\n\t} as DataInfo\n\tfunction add(val: number) {\n\t\tif (val != undefined && !isNaN(val)) {\n\t\t\tr.values.push(val)\n\t\t\tr.sum += val\n\t\t\tif (val < r.min) r.min = val\n\t\t\tif (val > r.max) r.max = val\n\t\t\tr.count += 1\n\t\t}\n\t}\n\tdata.forEach((val) => add(val))\n\tr.domain = [r.min, r.max]\n\tr.limits = function (mode, num) {\n\t\treturn limits(this, mode, num)\n\t}\n\treturn r\n}\n\ntype LimitsMode = \"c\" | \"e\" | \"q\" | \"l\" | \"k\"\nexport function limits(data: number[] | DataInfo, mode: LimitsMode = \"e\", num = 7): number[] {\n\tconst info = Array.isArray(data) ? analyze(data) : data\n\tconst { min, max, values } = info\n\tvalues.sort((a, b) => a - b)\n\tif (num == 1) {\n\t\treturn [min, max]\n\t}\n\tif (mode.startsWith(\"c\")) {\n\t\treturn [min, max]\n\t} else if (mode.startsWith(\"e\")) {\n\t\treturn Array.from({ length: num + 1 }, (_, i) => lerp(min, max, i / num))\n\t} else if (mode.startsWith(\"l\")) {\n\t\tif (min <= 0) {\n\t\t\tthrow new Error(\"Logarithmic scales are only possible for values > 0\")\n\t\t}\n\t\tconst min_log = Math.LOG10E * log(min)\n\t\tconst max_log = Math.LOG10E * log(max)\n\t\treturn Array.from({ length: num + 1 }, (_, i) => 10 ** lerp(min_log, max_log, i / num))\n\t} else if (mode.startsWith(\"q\")) {\n\t\treturn Array.from({ length: num + 1 }, (_, i) => {\n\t\t\tconst p = ((values.length - 1) * i) / num\n\t\t\tconst pb = floor(p)\n\t\t\treturn pb == p ? values[pb] : lerp(values[pb], values[pb + 1], p - pb)\n\t\t})\n\t} else if (mode.startsWith(\"k\")) {\n\t\t// implementation based on\n\t\t// http://code.google.com/p/figue/source/browse/trunk/figue.js#336\n\t\t// simplified for 1-d input values\n\t\tconst n = values.length\n\t\tconst assignments = new Array(n)\n\t\tconst clusterSizes = new Array(num)\n\t\tlet repeat = true\n\t\tlet nb_iters = 0\n\t\tlet centroids = Array.from({ length: num + 1 }, (_, i) => lerp(min, max, i / num))\n\t\tdo {\n\t\t\t// assignment step\n\t\t\tclusterSizes.fill(0)\n\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\tconst value = values[i]\n\t\t\t\tconst minDistIndex = indexOfMax(centroids, (c) => -abs(c - value))\n\t\t\t\tclusterSizes[minDistIndex]++\n\t\t\t\tassignments[i] = minDistIndex\n\t\t\t}\n\n\t\t\t// update centroids step\n\t\t\tconst newCentroids = new Array(num).fill(0)\n\t\t\tfor (let i = 0; i < assignments.length; i++) {\n\t\t\t\tconst cluster = assignments[i]\n\t\t\t\tnewCentroids[cluster] += values[i]\n\t\t\t}\n\t\t\tfor (let j = 0; j < newCentroids.length; j++) {\n\t\t\t\tnewCentroids[j] /= clusterSizes[j]\n\t\t\t}\n\n\t\t\t// check convergence\n\t\t\trepeat = newCentroids.some((nc, j) => nc != centroids[j])\n\t\t\tcentroids = newCentroids\n\t\t} while (nb_iters++ < 200 && repeat)\n\n\t\t// finished k-means clustering\n\t\t// the next part is borrowed from gabrielflor.it\n\t\tconst kClusters: number[][] = Array.from({ length: num }, () => [])\n\t\tfor (let i = 0; i < assignments.length; i++) {\n\t\t\tconst cluster = assignments[i]\n\t\t\tkClusters[cluster].push(values[i])\n\t\t}\n\t\tconst tmpKMeansBreaks = []\n\t\tfor (const kCluster of kClusters) {\n\t\t\ttmpKMeansBreaks.push(kCluster[0], kCluster[kCluster.length - 1])\n\t\t}\n\t\ttmpKMeansBreaks.sort((a, b) => a - b)\n\n\t\tconst limits = []\n\t\tlimits.push(tmpKMeansBreaks[0])\n\t\tfor (let i = 1; i < tmpKMeansBreaks.length; i += 2) {\n\t\t\tconst v = tmpKMeansBreaks[i]\n\t\t\tif (!isNaN(v) && limits.indexOf(v) == -1) {\n\t\t\t\tlimits.push(v)\n\t\t\t}\n\t\t}\n\t\treturn limits\n\t} else {\n\t\tthrow new Error(\"unknown mode\")\n\t}\n}\n\nconst interpolators: { [K in InterpolationMode]?: (color1: Color, color2: Color, f: number, mode: K) => Color } = {}\n\n// const _guess_formats: { p: number; test: (args: any[]) => ColorFormat | undefined }[] = []\nconst _input: {\n\t[mode: string]: (...args: any[]) => RGB | RGBA\n} = {}\n\nfunction linear_interpolator(col1: Color, col2: Color, f: number, m: ColorMode) {\n\tconst xyz1 = col1[m]()\n\tconst xyz2 = col2[m]()\n\treturn guess(\n\t\t[\n\t\t\tlerp(xyz1[0], xyz2[0], f),\n\t\t\tlerp(xyz1[1], xyz2[1], f),\n\t\t\tlerp(xyz1[2], xyz2[2], f),\n\t\t\tlerp(col1.alpha(), col2.alpha(), f),\n\t\t],\n\t\tm,\n\t)\n}\ninterpolators.xyz = interpolators.rgb = interpolators.lab = linear_interpolator\n\ninterpolators.num = function (col1, col2, f) {\n\tconst n1 = col1.num()\n\tconst n2 = col2.num()\n\treturn num(lerp(n1, n2, f))\n}\n\ninterpolators.lrgb = function (col1, col2, f) {\n\tconst [r1, g1, b1, a1] = col1.rgba(false, false)\n\tconst [r2, g2, b2, a2] = col2.rgba(false, false)\n\treturn new Color(\n\t\tsqrt(r1 ** 2 * (1 - f) + r2 ** 2 * f),\n\t\tsqrt(g1 ** 2 * (1 - f) + g2 ** 2 * f),\n\t\tsqrt(b1 ** 2 * (1 - f) + b2 ** 2 * f),\n\t\tlerp(a1, a2, f),\n\t)\n}\n\nfunction _bezier(chromables: Chromable[]): (t: number) => Color {\n\tconst colors = chromables.map((c) => color(c))\n\tconst [lab0, lab1, lab2, lab3] = colors.map((c) => c.lab())\n\tif (2 == chromables.length) {\n\t\t// linear interpolation\n\t\treturn (t) => {\n\t\t\treturn lab([0, 1, 2].map((i) => lerp(lab0[i], lab1[i], t)) as LAB)\n\t\t}\n\t} else if (3 == chromables.length) {\n\t\t// quadratic bezier interpolation\n\t\tconst bezier2 = (p0: number, p1: number, p2: number, t: number) =>\n\t\t\t(1 - t) ** 2 * p0 + 2 * (1 - t) * t * p1 + t ** 2 * p2\n\t\treturn (t) => lab([0, 1, 2].map((i) => bezier2(lab0[i], lab1[i], lab2[i], t)) as LAB)\n\t} else if (4 == chromables.length) {\n\t\t// cubic bezier interpolation\n\t\tconst bezier3 = (p0: number, p1: number, p2: number, p3: number, t: number) =>\n\t\t\t(1 - t) ** 3 * p0 + 3 * (1 - t) ** 2 * t * p1 + 3 * (1 - t) * t ** 2 * p2 + t ** 3 * p3\n\t\treturn (t) => lab([0, 1, 2].map((i) => bezier3(lab0[i], lab1[i], lab2[i], lab3[i], t)) as LAB)\n\t} else if (5 == chromables.length) {\n\t\tconst I0 = _bezier(colors.slice(0, 3))\n\t\tconst I1 = _bezier(colors.slice(2, 5))\n\t\treturn (t) => (t < 0.5 ? I0(t * 2) : I1((t - 0.5) * 2))\n\t} else throw new Error()\n}\n\nfunction guess(args: any[], mode?: ColorFormat): Color {\n\tif (Array.isArray(args[0])) args = args[0]\n\tif (!mode) {\n\t\tif (args.length == 1 && args[0] in w3cx11) {\n\t\t\tmode = \"name\"\n\t\t} else if (args.length == 1 && \"string\" == typeof args[0]) {\n\t\t\tmode = \"css\"\n\t\t} else if (args.length == 3) {\n\t\t\tmode = \"rgb\"\n\t\t} else if (args.length == 4 && \"number\" == typeof args[3] && args[3] >= 0 && args[3] <= 1) {\n\t\t\tmode = \"rgb\"\n\t\t} else if (args.length == 1 && \"number\" == typeof args[0] && args[0] >= 0 && args[0] <= 0xffffff) {\n\t\t\tmode = \"num\"\n\t\t} else throw new Error(\"could not guess mode. args \" + JSON.stringify(args))\n\t}\n\tconst channels = _input[mode](...args)\n\treturn new Color(channels[0], channels[1], channels[2], undefined !== channels[3] ? channels[3] : 1)\n}\n\nfunction _average_lrgb(colors: Color[]) {\n\tlet rSquareSum = 0,\n\t\tgSquareSum = 0,\n\t\tbSquareSum = 0,\n\t\talphaSum = 0\n\tfor (const col of colors) {\n\t\tconst [r, g, b, alpha] = col.rgba(false, false)\n\t\trSquareSum += r ** 2\n\t\tgSquareSum += g ** 2\n\t\tbSquareSum += b ** 2\n\t\talphaSum += alpha\n\t}\n\treturn new Color(\n\t\tsqrt(rSquareSum) / colors.length,\n\t\tsqrt(gSquareSum) / colors.length,\n\t\tsqrt(bSquareSum) / colors.length,\n\t\talphaSum / colors.length,\n\t)\n}\n\nfunction hex2rgb(hex: string): RGBA {\n\tlet m\n\tif ((m = hex.match(/^#?([A-F\\d]{2})([A-F\\d]{2})([A-F\\d]{2})([A-F\\d]{2})?$/i))) {\n\t\treturn [parseInt(m[1], 16), parseInt(m[2], 16), parseInt(m[3], 16), m[4] ? parseInt(m[4], 16) / 255 : 1]\n\t} else if ((m = hex.match(/^#?([A-F\\d])([A-F\\d])([A-F\\d])([A-F\\d])?$/i))) {\n\t\treturn [\n\t\t\tparseInt(m[1], 16) * 0x11,\n\t\t\tparseInt(m[2], 16) * 0x11,\n\t\t\tparseInt(m[3], 16) * 0x11,\n\t\t\tm[4] ? (parseInt(m[4], 16) * 0x11) / 255 : 1,\n\t\t]\n\t}\n\tthrow new Error(\"invalid hex color: \" + hex)\n}\n// color mode, i.e. representation as array of number\nexport type ColorMode = \"rgb\" | \"cmyk\" | \"lab\" | \"hsv\" | \"hsi\" | \"hcg\" | \"hsl\" | \"gl\" | \"lch\" | \"xyz\"\nexport type InterpolationMode = \"rgb\" | \"lab\" | \"hsv\" | \"hsi\" | \"hcg\" | \"hsl\" | \"lch\" | \"xyz\" | \"lrgb\" | \"num\"\nexport type ColorFormat = ColorMode | \"hex\" | \"num\" | \"name\" | \"kelvin\" | \"css\"\n/**\n * CMYK color space\n * @see https://en.wikipedia.org/wiki/cmyk_color_model\n * [cyan, magenta, yellow, alpha1]\n */\ntype CMYK = [number, number, number, number]\n/**\n * WebGL colors. Like RGB, but floats in [0; 1] instead of 0-255.\n * [red255, green255, blue255, alpha1]\n */\ntype GL = [number, number, number, number]\n/**\n * Red, green, blue ranging from 0-255.\n * Can be floats and outside the above range internally.\n */\ntype RGB = [number, number, number]\n/**\n * RGB plus alpha ranging from 0-1\n * [red255, green255, blue255, alpha1]\n */\ntype RGBA = [number, number, number, number]\n/**\n * CIELAB color space\n * [lightness, A*, B*]\n * @see https://en.wikipedia.org/wiki/CIELAB_color_space\n */\ntype LAB = [number, number, number]\n/**\n * Cylindrical representation of CIELAB\n * @see https://en.wikipedia.org/wiki/CIELAB_color_space#Cylindrical_representation:_CIELCh_or_CIEHLC\n *\n */\ntype LCH = [number, number, number]\n/**\n * @see https://en.wikipedia.org/wiki/HSL_and_HSV\n * [hueDegrees, saturation1, lightness1]\n */\ntype HSL = [number, number, number]\n/**\n * @see https://en.wikipedia.org/wiki/HSL_and_HSV\n * [hueDegrees, saturation1, value1]\n */\ntype HSV = [number, number, number]\n/**\n * @see https://en.wikipedia.org/w/index.php?title=HSI_color_space&redirect=no\n * [hueDegrees, saturation1, intensity1]\n */\ntype HSI = [number, number, number]\ntype XYZ = [number, number, number]\n/**\n * HCG Color Model\n * See https://github.com/acterhd/hcg-color\n * A color value in the HCG format is an array of three numbers [h, c, g], where\n * `h` is the hue as an angle in degrees [0; 360)\n * `c` is the chroma value in [0; 1]\n * `g` is the gray value in [0; 1]\n */\ntype HCG = [number, number, number]\n\n// interface ColorModes {\n// \tcmyk: CMYK\n// \tgl: GL\n// \trgb: RGB\n// \trgba: RGBA\n// \tlab: LAB\n// \thsl: HSL\n// \thsv: HSV\n// \thsi: HSI\n// \txyz: XYZ\n// \thcg: HCG\n// \tlch: LCH\n// \thex: string\n// \tnum: number\n// \tname: string\n// \tkelvin: number\n// \tcss: string\n// }\nfunction rgb2hex(r255: number, g255: number, b255: number, a1: number, mode: \"rgb\" | \"rgba\" | \"argb\" = \"rgb\") {\n\tr255 = clamp(round(r255), 0, 255)\n\tg255 = clamp(round(g255), 0, 255)\n\tb255 = clamp(round(b255), 0, 255)\n\tconst rgb = (r255 << 16) | (g255 << 8) | b255\n\tconst rgbString = rgb.toString(16).padStart(6, \"0\")\n\tconst alphaString = round(clamp(a1) * 255)\n\t\t.toString(16)\n\t\t.padStart(2, \"0\")\n\treturn \"#\" + (\"argb\" == mode ? alphaString + rgbString : \"rgba\" == mode ? rgbString + alphaString : rgbString)\n}\n\n_input.lrgb = _input.rgb\n\n_input.hex = hex2rgb\n_input.hsl = hsl2rgb\nfunction norm360(degrees: number) {\n\treturn ((degrees % 360) + 360) % 360\n}\n\n_input.hsv = hsv2rgb\n\nfunction num2rgb(num: number): RGBA {\n\tif (!(\"number\" == typeof num && num >= 0 && num <= 0xffffff)) {\n\t\tthrow new Error(\"unknown num color: \" + num)\n\t}\n\tconst r = num >> 16\n\tconst g = (num >> 8) & 0xff\n\tconst b = num & 0xff\n\treturn [r, g, b, 1]\n}\n\nfunction rgb2num(r255: number, g255: number, b255: number, a1: number = 1, mode: \"rgb\" | \"rgba\" | \"argb\" = \"rgb\") {\n\tconst rgbNum = (round(r255) << 16) | (round(g255) << 8) | round(b255)\n\tif (\"rgb\" === mode) {\n\t\treturn rgbNum\n\t} else if (\"rgba\" === mode) {\n\t\treturn (rgbNum << 8) | (round(a1 * 255) << 24)\n\t} else {\n\t\treturn (round(a1 * 255) << 24) | rgbNum\n\t}\n}\n\n_input.num = num2rgb\n\nconst WS = \"\\\\s*\"\nconst FLOAT = \"([+-]?(?:\\\\d*\\\\.?)?\\\\d+(?:[eE][+-]?\\\\d+)?)\"\nconst CSS_RGB_REGEX = new RegExp(\n\t[\"^rgba?\\\\(\", FLOAT, \",\", FLOAT, \",\", FLOAT, \"(?:,\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS),\n\t\"i\",\n)\nconst CSS_RGB_WS_REGEX = new RegExp([\"^rgba?\\\\(\", FLOAT, FLOAT, FLOAT, \"(?:/\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS), \"i\")\nconst CSS_RGB_PERCENT_REGEX = new RegExp(\n\t[\"^rgba?\\\\(\", FLOAT + \"%\", \",\", FLOAT + \"%\", \",\", FLOAT + \"%\", \"(?:,\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS),\n\t\"i\",\n)\nconst CSS_RGB_WS_PERCENT_REGEX = new RegExp(\n\t[\"^rgba?\\\\(\", FLOAT + \"%\", FLOAT + \"%\", FLOAT + \"%\", \"(?:/\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS),\n\t\"i\",\n)\nconst CSS_HSL_REGEX = new RegExp(\n\t[\"^hsla?\\\\(\", FLOAT + \"(deg|rad|turn)?\", \",\", FLOAT + \"%\", \",\", FLOAT + \"%\", \"(?:,\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(\n\t\tWS,\n\t),\n\t\"i\",\n)\nconst CSS_HSL_WS_REGEX = new RegExp(\n\t[\"^hsla?\\\\(\", FLOAT + \"(deg|rad|turn)?\\\\s+\" + FLOAT + \"%\", FLOAT + \"%\", \"(?:/\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS),\n\t\"i\",\n)\nfunction css2rgb(css: string): RGBA {\n\tif (w3cx11 && w3cx11.hasOwnProperty(css)) {\n\t\treturn num2rgb((w3cx11 as any)[css.toLowerCase()])\n\t}\n\tlet m\n\tif ((m = css.match(CSS_RGB_REGEX) || css.match(CSS_RGB_WS_REGEX))) {\n\t\treturn [\n\t\t\tclamp(+m[1], 0, 255),\n\t\t\tclamp(+m[2], 0, 255),\n\t\t\tclamp(+m[3], 0, 255),\n\t\t\tm[4] ? clamp(m[5] ? +m[4] / 100 : +m[4]) : 1,\n\t\t]\n\t} else if ((m = css.match(CSS_RGB_PERCENT_REGEX) || css.match(CSS_RGB_WS_PERCENT_REGEX))) {\n\t\treturn [\n\t\t\tclamp(+m[1] / 100) * 255,\n\t\t\tclamp(+m[2] / 100) * 255,\n\t\t\tclamp(+m[3] / 100) * 255,\n\t\t\tm[4] ? clamp(m[5] ? +m[4] / 100 : +m[4]) : 1,\n\t\t]\n\t} else if ((m = css.match(CSS_HSL_REGEX) || css.match(CSS_HSL_WS_REGEX))) {\n\t\tconst CONVERSION = { deg: 1, rad: RAD2DEG, turn: 360 }\n\t\tconst angleUnit = (m[2] ? m[2].toLowerCase() : \"deg\") as \"deg\" | \"rad\" | \"turn\"\n\t\treturn hsl2rgb(\n\t\t\t(((+m[1] * CONVERSION[angleUnit]) % 360) + 360) % 360,\n\t\t\tclamp(+m[3] / 100),\n\t\t\tclamp(+m[4] / 100),\n\t\t\tm[5] ? clamp(m[6] ? +m[5] / 100 : +m[5]) : 1,\n\t\t)\n\t} else {\n\t\treturn hex2rgb(css)\n\t}\n}\n\nfunction rgb2css(r: number, g: number, b: number, a = 1) {\n\tif (a >= 1) {\n\t\treturn \"rgb(\" + [r, g, b].map(round).join(\",\") + \")\"\n\t} else {\n\t\treturn \"rgba(\" + [r, g, b].map(round).join(\",\") + \",\" + a + \")\"\n\t}\n}\n\nfunction rnd(a: any) {\n\treturn round(a * 100) / 100\n}\n\nfunction hsl2css([h, s, l]: HSL, alpha: number) {\n\tconst mode = alpha < 1 ? \"hsla\" : \"hsl\"\n\treturn (\n\t\tmode +\n\t\t\"(\" +\n\t\trnd(h) +\n\t\t\",\" +\n\t\trnd(s * 100) +\n\t\t\"%\" +\n\t\t\",\" +\n\t\trnd(l * 100) +\n\t\t\"%\" +\n\t\t(\"hsla\" == mode ? \",\" + rnd(alpha) : \"\") +\n\t\t\")\"\n\t)\n}\n\n_input.css = css2rgb\n\n_input.name = function (name) {\n\treturn num2rgb((w3cx11 as any)[name])\n}\n\nfunction lch2lab(l: number, c: number, hueDegrees: number): LAB {\n\t/*\n    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\n    These formulas were invented by David Dalrymple to obtain maximum contrast without going\n    out of gamut if the parameters are in the range 0-1.\n\n    A saturation multiplier was added by Gregor Aisch\n     */\n\treturn [l, cos(hueDegrees * DEG2RAD) * c, sin(hueDegrees * DEG2RAD) * c]\n}\n\nfunction lch2rgb(l: number, c: number, hDegrees: number, alpha1 = 1): RGBA {\n\tconst [, a, b] = lch2lab(l, c, hDegrees)\n\treturn cielab2rgb(l, a, b, alpha1)\n}\n\nfunction lab2lch(l: number, a: number, b: number): LCH {\n\tconst c = hypot(a, b)\n\tconst h = (atan2(b, a) * RAD2DEG + 360) % 360\n\treturn [l, c, h]\n}\n\nfunction rgb2lch(r255: number, g255: number, b255: number) {\n\tconst [l, a, b2] = rgb2lab(r255, g255, b255)\n\treturn lab2lch(l, a, b2)\n}\n\n_input.lch = lch2rgb\n\nfunction rgb2cmyk(r255: number, g255: number, b255: number): CMYK {\n\tr255 /= 255\n\tg255 /= 255\n\tb255 /= 255\n\tconst k = 1 - max(r255, g255, b255)\n\tif (1 == k) return [0, 0, 0, 1]\n\tconst c = (1 - r255 - k) / (1 - k)\n\tconst m = (1 - g255 - k) / (1 - k)\n\tconst y = (1 - b255 - k) / (1 - k)\n\treturn [c, m, y, k]\n}\n\nfunction cmyk2rgb(c1: number, m1: number, y1: number, k1: number, alpha1 = 1): RGBA {\n\tif (k1 == 1) {\n\t\treturn [0, 0, 0, alpha1]\n\t}\n\tconst r255 = 255 * (1 - c1) * (1 - k1)\n\tconst g255 = 255 * (1 - m1) * (1 - k1)\n\tconst b255 = 255 * (1 - y1) * (1 - k1)\n\treturn [r255, g255, b255, alpha1]\n}\n\n_input.cmyk = cmyk2rgb\n\n_input.gl = function (r: number, g: number, b: number, a: number = 1): RGBA {\n\treturn [r * 255, g * 255, b * 255, a]\n}\n\n//function rgb2luminance(r: number, g: number, b: number) {\n//\t// https://en.wikipedia.org/wiki/Relative_luminance\n//\tconst [, Y] = rgb2xyz(r, g, b)\n//\treturn Y\n//}\n\nfunction rgbChannel2RgbLinear(x255: number) {\n\tconst x1 = x255 / 255\n\t// http://entropymine.com/imageworsener/srgbformula/\n\tif (x1 <= 0.04045) {\n\t\treturn x1 / 12.92\n\t} else {\n\t\treturn ((x1 + 0.055) / 1.055) ** 2.4\n\t}\n}\nfunction rgbLinearChannel2Rgb(xLinear1: number) {\n\tif (xLinear1 <= 0.0031308) {\n\t\treturn 255 * (12.92 * xLinear1)\n\t} else {\n\t\treturn 255 * ((1 + 0.055) * xLinear1 ** (1 / 2.4) - 0.055)\n\t}\n}\n\nfunction kelvin2rgb(kelvin: number): RGB {\n\tconst t = kelvin / 100\n\tlet r, g, b\n\tif (t < 66) {\n\t\tr = 255\n\t\tg = -155.25485562709179 - 0.44596950469579133 * (t - 2) + 104.49216199393888 * log(t - 2)\n\t\tb = t < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (t - 10) + 115.67994401066147 * log(t - 10)\n\t} else {\n\t\tr = 351.97690566805693 + 0.114206453784165 * (t - 55) - 40.25366309332127 * log(t - 55)\n\t\tg = 325.4494125711974 + 0.07943456536662342 * (t - 50) - 28.0852963507957 * log(t - 50)\n\t\tb = 255\n\t}\n\treturn [r, g, b]\n}\n\n_input.rgb = (...args: number[]) => args as RGB\n\nfunction rgb2kelvin(r255: number, g255: number, b255: number) {\n\tconsole.log(b255 - r255)\n\tif (g255 + b255 < 158.61) {\n\t\tconsole.log(\"0 < t < 20\")\n\t\t// calc from green\n\t\treturn round(\n\t\t\tnewtonIterate1d(\n\t\t\t\t(t) => g255 - (-155.25485562709179 - 0.44596950469579133 * (t - 2) + 104.49216199393888 * log(t - 2)),\n\t\t\t\t15,\n\t\t\t\t4,\n\t\t\t) * 100,\n\t\t)\n\t\treturn (Math.E ** ((g255 + 155.25485562709179 + 0.44596950469579133 * (15 - 2)) / 104.49216199393888) + 2) * 100\n\t} else if (b255 - r255 < 0) {\n\t\tconsole.log(\"20 < t < 66\")\n\t\treturn round(\n\t\t\tnewtonIterate1d(\n\t\t\t\t(t) => b255 - (-254.76935184120902 + 0.8274096064007395 * (t - 10) + 115.67994401066147 * log(t - 10)),\n\t\t\t\t43,\n\t\t\t\t4,\n\t\t\t) * 100,\n\t\t)\n\t\treturn (\n\t\t\t(Math.E ** ((b255 + 254.76935184120902 - 0.8274096064007395 * (43 - 10)) / 115.67994401066147) + 10) * 100\n\t\t)\n\t} else {\n\t\tconsole.log(\"0 < t < 400, start= \" + (-1.4 * (r255 + g255) + 755))\n\t\treturn round(\n\t\t\tnewtonIterate1d(\n\t\t\t\t(t) => r255 - (351.97690566805693 + 0.114206453784165 * (t - 55) - 40.25366309332127 * log(t - 55)),\n\t\t\t\t-1.4 * (r255 + g255) + 755,\n\t\t\t\t8,\n\t\t\t) * 100,\n\t\t)\n\t\treturn ((r255 / 329.698727446) ** (1 / -0.1332047592) + 60) * 100\n\t}\n\treturn newtonIterate1d(\n\t\t(k) => {\n\t\t\tconst eps = 1e-9\n\t\t\tconst [kr, kg, kb] = kelvin2rgb(k)\n\t\t\tconst [kr2, kg2, kb2] = kelvin2rgb(k + eps)\n\t\t\tconst dkr = (kr2 - kr) / eps,\n\t\t\t\tdkg = (kg2 - kg) / eps,\n\t\t\t\tdkb = (kb2 - kb) / eps\n\t\t\treturn dkr * (kr - r255) + dkg * (kg - g255) + dkb * (kb - b255)\n\n\t\t\treturn kb / kr - b255 / r255\n\t\t},\n\t\t//1000,\n\t\t//40000,\n\t\tMath.E ** ((b255 / r255 + 2.5) / 0.4),\n\t\t20,\n\t\t//1e-6,\n\t)\n\tlet maxTemp = 40000\n\tlet minTemp = 1000\n\tconst eps = 0.4\n\tlet temp: number = 0\n\tlet rgb\n\twhile (maxTemp - minTemp > eps) {\n\t\ttemp = (maxTemp + minTemp) * 0.5\n\t\trgb = kelvin2rgb(temp)\n\t\tif (rgb[2] / rgb[0] >= b255 / r255) {\n\t\t\tmaxTemp = temp\n\t\t} else {\n\t\t\tminTemp = temp\n\t\t}\n\t}\n\treturn round(temp)\n}\n\n_input.temperature = _input.kelvin = _input.K = kelvin2rgb\n\nfunction blend_f(f: (c1: RGB, c2: RGB) => RGB) {\n\treturn function (bottom: Chromable, top: Chromable) {\n\t\tconst [r, g, b] = f(color(top).rgb(), color(bottom).rgb())\n\t\treturn rgb(r, g, b)\n\t}\n}\n\nfunction each(f: (a: number, b: number) => number) {\n\treturn function (c1: RGB, c2: RGB): RGB {\n\t\treturn c1.map((e, i) => f(e, c2[i])) as RGB\n\t}\n}\n\nfunction _screen(a: number, b: number) {\n\treturn 255 * (1 - (1 - a / 255) * (1 - b / 255))\n}\n\nfunction _overlay(a: number, b: number) {\n\tif (b < 128) {\n\t\treturn (2 * a * b) / 255\n\t} else {\n\t\treturn 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255))\n\t}\n}\n\nfunction _burn(a: number, b: number) {\n\treturn 255 * (1 - (1 - b / 255) / (a / 255))\n}\n\nfunction _dodge(a: number, b: number) {\n\tif (a == 255) {\n\t\treturn 255\n\t}\n\treturn 255 * min(1, b / 255 / (1 - a / 255))\n}\n\n/**\n * r, g, b can be in any interval (0-1 or 0-255)\n * @param r\n * @param g\n * @param b\n */\nfunction rgb2hexhue(r: number, g: number, b: number) {\n\tconst m = min(r, g, b)\n\tconst M = max(r, g, b)\n\tconst delta = M - m\n\tlet hueTurnX6 // angle as value between 0 and 6\n\tif (0 == delta) {\n\t\thueTurnX6 = 0\n\t} else if (r == M) {\n\t\t// second term to make sure the value is > 0\n\t\thueTurnX6 = (g - b) / delta + (g < b ? 6 : 0)\n\t} else if (g == M) {\n\t\thueTurnX6 = 2 + (b - r) / delta\n\t} else {\n\t\thueTurnX6 = 4 + (r - g) / delta\n\t}\n\treturn [hueTurnX6 * 60, m, M]\n}\nfunction hcxm2rgb(hueDegrees: number, c1: number, x1: number, m1: number, alpha1: number): RGBA {\n\tconst m255 = m1 * 255\n\tconst cm255 = c1 * 255 + m255\n\tconst xm255 = x1 * 255 + m255\n\tif (hueDegrees < 60) {\n\t\treturn [cm255, xm255, m255, alpha1]\n\t} else if (hueDegrees < 120) {\n\t\treturn [xm255, cm255, m255, alpha1]\n\t} else if (hueDegrees < 180) {\n\t\treturn [m255, cm255, xm255, alpha1]\n\t} else if (hueDegrees < 240) {\n\t\treturn [m255, xm255, cm255, alpha1]\n\t} else if (hueDegrees < 300) {\n\t\treturn [xm255, m255, cm255, alpha1]\n\t} else {\n\t\treturn [cm255, m255, xm255, alpha1]\n\t}\n}\n\n/**\n * https://en.wikipedia.org/w/index.php?title=HSL_and_HSV&oldid=856714654#From_HSL\n */\nfunction hsl2rgb(hueDegrees: number, s1: number, l1: number, alpha1 = 1): RGBA {\n\thueDegrees = norm360(hueDegrees)\n\tconst c1 = (1 - abs(2 * l1 - 1)) * s1\n\treturn hcxm2rgb(hueDegrees, c1, c1 * (1 - abs(((hueDegrees / 60) % 2) - 1)), l1 - c1 / 2, alpha1)\n}\nfunction rgb2hsl(r255: number, g255: number, b255: number): HSL {\n\tconst [hue, min1, max1] = rgb2hexhue(r255 / 255, g255 / 255, b255 / 255)\n\tconst l1 = (max1 + min1) / 2\n\tlet s1: number\n\tif (max1 == min1) {\n\t\ts1 = 0\n\t} else {\n\t\ts1 = l1 < 0.5 ? (max1 - min1) / (max1 + min1) : (max1 - min1) / (2 - max1 - min1)\n\t}\n\treturn [hue, s1, l1]\n}\n\nfunction hsv2rgb(hueDegrees: number, s1: number, v1: number, alpha1: number = 1): RGBA {\n\thueDegrees = norm360(hueDegrees)\n\tconst c1 = v1 * s1\n\treturn hcxm2rgb(hueDegrees, c1, c1 * (1 - abs(((hueDegrees / 60) % 2) - 1)), v1 - c1, alpha1)\n}\n\nfunction rgb2hsv(r255: number, g255: number, b255: number): HSV {\n\tconst [hue, min255, max255] = rgb2hexhue(r255, g255, b255)\n\tconst delta255 = max255 - min255\n\tconst v1 = max255 / 255.0\n\tconst s1 = max255 == 0 ? 0 : delta255 / max255\n\treturn [hue, s1, v1]\n}\n\nfunction hcg2rgb(hueDegrees: number, c1: number, g1: number, alpha1 = 1): RGBA {\n\thueDegrees = norm360(hueDegrees)\n\tconst p = g1 * (1 - c1)\n\treturn hcxm2rgb(hueDegrees, c1, c1 * (1 - abs(((hueDegrees / 60) % 2) - 1)), p, alpha1)\n}\n\nfunction rgb2hcg(r255: number, g255: number, b255: number): HCG {\n\tconst [hue, min255, max255] = rgb2hexhue(r255, g255, b255)\n\tconst c1 = (max255 - min255) / 255\n\tconst _g1 = c1 < 1 ? min255 / 255 / (1 - c1) : 0\n\treturn [hue, c1, _g1]\n}\n\n_input.hcg = hcg2rgb\n\nfunction cielab2rgb(LStar100: number, aStar: number, bStar: number, alpha = 1): RGBA {\n\tconst [x, y, z] = cielab2xyz(LStar100, aStar, bStar)\n\treturn xyz2rgb(x, y, z, alpha)\n}\n\nfunction cielab2xyz(LStar100: number, aStar: number, bStar: number) {\n\tfunction fInv(t: number) {\n\t\tif (t > LAB_delta) {\n\t\t\treturn t ** 3\n\t\t} else {\n\t\t\treturn LAB_3DeltaPow2 * (t - 4 / 29)\n\t\t}\n\t}\n\treturn [\n\t\tLAB_Xn * fInv((LStar100 + 16) / 116 + aStar / 500),\n\t\tLAB_Yn * fInv((LStar100 + 16) / 116),\n\t\tLAB_Zn * fInv((LStar100 + 16) / 116 - bStar / 200),\n\t]\n}\nfunction xyz2cielab(x: number, y: number, z: number): LAB {\n\t// https://en.wikipedia.org/w/index.php?title=CIELAB_color_space&oldid=849576085#Forward_transformation\n\tfunction f(t: number) {\n\t\tif (t > LAB_deltaPow3) {\n\t\t\treturn cbrt(t)\n\t\t} else {\n\t\t\treturn t / LAB_3DeltaPow2 + 4 / 29\n\t\t}\n\t}\n\treturn [116 * f(y / LAB_Yn) - 16, 500 * (f(x / LAB_Xn) - f(y / LAB_Yn)), 200 * (f(y / LAB_Yn) - f(z / LAB_Zn))]\n}\n\n// const LAB_CONSTANTS = {\nconst LAB_Kn = 18\nconst LAB_Xn = 0.95047\nconst LAB_Yn = 1\nconst LAB_Zn = 1.08883\nconst LAB_delta = 0.206896552 // delta = 6 / 29\nconst LAB_3DeltaPow2 = 0.12841855 // 3 * delta ** 2\nconst LAB_deltaPow3 = 0.008856452 // delta ** 3\n// }\n\nfunction rgb2lab(r255: number, g255: number, b255: number): RGB {\n\tconst [x, y, z] = rgb2xyz(r255, g255, b255)\n\treturn xyz2cielab(x, y, z)\n}\n\nfunction rgb2xyz(r255: number, g255: number, b255: number): XYZ {\n\t// https://en.wikipedia.org/wiki/SRGB#The_reverse_transformation\n\tconst r1Linear = rgbChannel2RgbLinear(r255)\n\tconst g1Linear = rgbChannel2RgbLinear(g255)\n\tconst b1Linear = rgbChannel2RgbLinear(b255)\n\tconst X = 0.4124564 * r1Linear + 0.3575761 * g1Linear + 0.1804375 * b1Linear\n\tconst Y = 0.2126729 * r1Linear + 0.7151522 * g1Linear + 0.072175 * b1Linear\n\tconst Z = 0.0193339 * r1Linear + 0.119192 * g1Linear + 0.9503041 * b1Linear\n\treturn [X, Y, Z]\n}\nfunction xyz2rgb(X1: number, Y1: number, Z1: number, alpha1 = 1): RGBA {\n\t// https://en.wikipedia.org/wiki/SRGB#The_forward_transformation_(CIE_XYZ_to_sRGB)\n\tconst r1Linear = 3.2404542 * X1 - 1.5371385 * Y1 - 0.4985314 * Z1\n\tconst g1Linear = -0.969266 * X1 + 1.8760108 * Y1 + 0.041556 * Z1\n\tconst b1Linear = 0.0556434 * X1 - 0.2040259 * Y1 + 1.0572252 * Z1\n\treturn [rgbLinearChannel2Rgb(r1Linear), rgbLinearChannel2Rgb(g1Linear), rgbLinearChannel2Rgb(b1Linear), alpha1]\n}\n\n_input.xyz = xyz2rgb\n_input.lab = cielab2rgb\n\n/**\n * For HSI, we use the direct angle calculation. I.e. atan2(beta, alpha). See wikipedia link. This is why we don't use\n * hcxm2rgb.\n */\nfunction hsi2rgb(hueDegrees: number, s1: number, i1: number, alpha1 = 1): RGBA {\n\t/*\n    borrowed from here:\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\n     */\n\tlet r, g, b\n\tlet hRad = hueDegrees * DEG2RAD\n\tif (hRad < (2 * PI) / 3) {\n\t\tb = (1 - s1) / 3\n\t\tr = (1 + (s1 * cos(hRad)) / cos(PI / 3 - hRad)) / 3\n\t\tg = 1 - (b + r)\n\t} else if (hRad < (4 * PI) / 3) {\n\t\thRad -= (2 * PI) / 3\n\t\tr = (1 - s1) / 3\n\t\tg = (1 + (s1 * cos(hRad)) / cos(PI / 3 - hRad)) / 3\n\t\tb = 1 - (r + g)\n\t} else {\n\t\thRad -= (4 * PI) / 3\n\t\tg = (1 - s1) / 3\n\t\tb = (1 + (s1 * cos(hRad)) / cos(PI / 3 - hRad)) / 3\n\t\tr = 1 - (g + b)\n\t}\n\treturn [3 * i1 * r * 255, 3 * i1 * g * 255, 3 * i1 * b * 255, alpha1]\n}\n\n/**\n * For HSI, we use the direct angle calculation. I.e. atan2(beta, alpha). See wikipedia link. This is why we don't use\n * rgb2hexhue.\n */\nfunction rgb2hsi(r255: number, g255: number, b255: number): HSI {\n\t// See https://en.wikipedia.org/wiki/HSL_and_HSV#Hue_and_chroma\n\t// See https://en.wikipedia.org/wiki/HSL_and_HSV#Lightness\n\tconst r1 = r255 / 255\n\tconst g1 = g255 / 255\n\tconst b1 = b255 / 255\n\tconst i1 = (r1 + g1 + b1) / 3\n\tif (r1 == g1 && g1 == b1) {\n\t\treturn [0, 0, i1]\n\t} else {\n\t\tconst alpha = (1 / 2) * (2 * r1 - g1 - b1)\n\t\tconst beta = (sqrt(3) / 2) * (g1 - b1)\n\t\tconst hRad = atan2(beta, alpha)\n\t\tconst min1 = min(r1, g1, b1)\n\t\tconst s1 = 1 - min1 / i1\n\t\treturn [(hRad < 0 ? 2 * PI + hRad : hRad) * RAD2DEG, s1, i1]\n\t}\n}\n\n_input.hsi = hsi2rgb\n\ninterpolators.hsv = interpolators.hsl = interpolators.hsi = interpolators.lch = interpolators.hcg = function interpolate_hsx(\n\tcolor1: Color,\n\tcolor2: Color,\n\tf: number,\n\tm: \"hsv\" | \"hsl\" | \"hsi\" | \"lch\" | \"hcg\",\n) {\n\tconst [a1, b1, c1] = color1[m]()\n\tconst [a2, b2, c2] = color2[m]()\n\tfunction lerpHue(hue1: number, hue2: number, f: number) {\n\t\tconst dh = norm360(hue2 - hue1 + 180) - 180\n\t\treturn hue1 + f * dh\n\t}\n\treturn color(\n\t\t(\"h\" == m.charAt(0) ? lerpHue : lerp)(a1, a2, f),\n\t\tlerp(b1, b2, f),\n\t\t(\"h\" == m.charAt(2) ? lerpHue : lerp)(c1, c2, f),\n\t\tm,\n\t)\n}\n\nfunction indexOfMax<T>(arr: ArrayLike<T>, f: (el: T) => number) {\n\tlet maxValue = -Infinity,\n\t\tmaxValueIndex = -1\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tconst value = f(arr[i])\n\t\tif (value > maxValue) {\n\t\t\tmaxValue = value\n\t\t\tmaxValueIndex = i\n\t\t}\n\t}\n\treturn maxValueIndex\n}\nfunction withMax<T>(arr: ArrayLike<T>, f: (el: T) => number): T {\n\treturn arr[indexOfMax(arr, f)]\n}\n"],"names":["abs","atan2","cos","floor","log","min","max","round","sign","sin","sqrt","cbrt","PI","hypot","Math","lerp","a","b","f","clamp","x","newtonIterate1d","xStart","max_steps","eps","fx","dfdx","console","TWOPI","DEG2RAD","RAD2DEG","color","args","Color","length","guess","slice","Array","isArray","[object Object]","r","g","this","col2","m","mix","doRound","clamp_","t","mode","r255","g255","b255","a1","rgbString","toString","padStart","alphaString","rgb2hex","hue","min1","max1","rgb2hexhue","l1","s1","rgb2hsl","min255","max255","rgb2hsv","c1","rgb2hcg","map","join","rgb2css","h","s","l","alpha","rnd","hsl2css","hsl","Error","closest","thisNum","num","name","Object","keys","w3cx11","find","thisLStar","thisAStar","thisBStar","lab","arr","indexOfMax","lStar","aStar","bStar","k","rgb2cmyk","lum1","Y","rgb2xyz","undefined","inverseLerp","val","white","black","modeAndChannel","value","channel","split","src","i","indexOf","luminance","alpha1","rgb","amount","LAB_Kn","darker","c","lch","saturate","r1","g1","b1","i1","beta","hRad","rgb2hsi","rgb2lab","rgbNum","rgb2num","b2","lab2lch","rgb2lch","r2","g2","a2","prototype","css","kelvin","temperature","brewer","OrRd","PuBu","BuPu","Oranges","BuGn","YlOrBr","YlGn","Reds","RdPu","Greens","YlGnBu","Purples","GnBu","Greys","YlOrRd","PuRd","Blues","PuBuGn","Viridis","Spectral","RdYlGn","RdBu","PiYG","PRGn","RdYlBu","BrBG","RdGy","PuOr","Set2","Accent","Set1","Set3","Dark2","Paired","Pastel2","Pastel1","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflower","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","laserlemon","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrod","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","maroon2","maroon3","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","purple2","purple3","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","whitesmoke","yellow","yellowgreen","cubehelix","start","rotations","gamma","lightness","at","getOwnPropertyNames","CubeHelix","forEach","key","_start","_rotations","_gamma","_hue","_lightness","scale","fract","amp","cos_a","sin_a","random","randomSource","col1","c2","res","interpolators","cssString","css2rgb","cmyk","gl","hcg","hsi","hsv","kelvin2rgb","num2rgb","xyz","average","chromables","colors","rSquareSum","gSquareSum","bSquareSum","alphaSum","col","rgba","_average_lrgb","numSum","dx","dy","xyz2","charAt","A","bezier","_bezier","lab0","lab1","lab2","lab3","bezier2","p0","p1","p2","bezier3","p3","I0","I1","blend","bottom","top","blend_fs","normal","blend_f","each","_","multiply","screen","overlay","darken","lighten","dodge","burn","_at","Scale","_init","classes","_classes","domain","limits","_colors","_pos","p","_min","_max","d","lerpInv","_mode","_resetCache","outputFormat","_out","enableCorrectLightness","_correctLightness","sign2","paddingLeft","paddingRight","_paddingLeft","_paddingRight","numColors","format","result","_color","from","samples","enableCache","_cache","Map","colorsOrFunction","findIndex","cls","bypassMap","_getClass","_tCorrectedLightness","tHash","cacheResult","get","set","t0_1","L_ideal","steps","fA","fC","bisect","clear","scales","contrast","l2","distance","channelDifferences","channelValue","channelIndex","deltaE","reference","sample","L","C","L1","L2","sl","sc","h1","norm360","c4","sh","delC","delA","delB","v1","v2","analyze","data","Infinity","sum","values","count","isNaN","push","add","info","sort","startsWith","min_log","LOG10E","max_log","pb","n","assignments","clusterSizes","repeat","nb_iters","centroids","fill","minDistIndex","newCentroids","j","some","nc","kClusters","tmpKMeansBreaks","kCluster","v","_input","JSON","stringify","channels","hex2rgb","hex","match","parseInt","degrees","xyz1","lrgb","hsl2rgb","hueDegrees","hcxm2rgb","WS","FLOAT","CSS_RGB_REGEX","RegExp","CSS_RGB_WS_REGEX","CSS_RGB_PERCENT_REGEX","CSS_RGB_WS_PERCENT_REGEX","CSS_HSL_REGEX","CSS_HSL_WS_REGEX","hasOwnProperty","toLowerCase","CONVERSION","deg","rad","turn","angleUnit","rgbChannel2RgbLinear","x255","x1","rgbLinearChannel2Rgb","xLinear1","e","M","delta","hueTurnX6","m1","m255","cm255","xm255","cielab2rgb","LStar100","y","z","fInv","LAB_delta","LAB_3DeltaPow2","LAB_Xn","LAB_Yn","LAB_Zn","cielab2xyz","xyz2rgb","hDegrees","lch2lab","y1","k1","K","xyz2cielab","r1Linear","g1Linear","b1Linear","X1","Y1","Z1","maxValue","maxValueIndex","color1","color2","lerpHue","hue1","hue2"],"mappings":"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"}